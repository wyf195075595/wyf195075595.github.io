<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>前端小趴菜</subtitle>
  <link href="https://wyf195075595.github.io/atom.xml" rel="self"/>
  
  <link href="https://wyf195075595.github.io/"/>
  <updated>2023-04-17T10:08:33.065Z</updated>
  <id>https://wyf195075595.github.io/</id>
  
  <author>
    <name>王不留行</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手机端搭建linux环境</title>
    <link href="https://wyf195075595.github.io/2023/04/17/programming/linux/%E6%89%8B%E6%9C%BA%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://wyf195075595.github.io/2023/04/17/programming/linux/%E6%89%8B%E6%9C%BA%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-04-17T00:23:10.000Z</published>
    <updated>2023-04-17T10:08:33.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将手机作为Linux服务器</p><p>在手机端安装 Linux 系统,通过一个名为<a href="(https://f-droid.org/packages/com.termux/)"><strong>Termux</strong></a>的软件。Termux 是适用于 Android 的终端仿真器和 Linux 环境。它在 Google Play 商店中可用。安装后无需额外配置。</p></blockquote><p>安装完成后运行就可以得到Linux 环境，接下来设置 ssh 连接。通过一个名为<strong>Dropbear</strong>的软件</p><span id="more"></span><p><strong># <a href="https://blog.csdn.net/qq_45704640/article/details/110398165">安装 dropbear</a></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pkg update <span class="comment">// 更新 Termux 包。</span></span><br><span class="line">pkg upgrade  <span class="comment">// 更新 包数据</span></span><br><span class="line">pkg install dropbear<span class="comment">// 安装</span></span><br><span class="line">dropbear <span class="comment">// 开启， 每次启动都需要手动chong&#x27;qi</span></span><br></pre></td></tr></table></figure><p>设置 <strong>termux密码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="comment">// 两次输入确认</span></span><br></pre></td></tr></table></figure><p><strong>远程连接</strong></p><blockquote><p><a href="https://lbrito1.github.io/blog/2020/02/repurposing-android.html">参考文章</a></p><p><a href="http://www.xbhp.cn/news/8058.html">Termux基础教程</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;将手机作为Linux服务器&lt;/p&gt;
&lt;p&gt;在手机端安装 Linux 系统,通过一个名为&lt;a href=&quot;(https://f-droid.org/packages/com.termux/)&quot;&gt;&lt;strong&gt;Termux&lt;/strong&gt;&lt;/a&gt;的软件。Termux 是适用于 Android 的终端仿真器和 Linux 环境。它在 Google Play 商店中可用。安装后无需额外配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装完成后运行就可以得到Linux 环境，接下来设置 ssh 连接。通过一个名为&lt;strong&gt;Dropbear&lt;/strong&gt;的软件&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://wyf195075595.github.io/categories/linux/"/>
    
    
    <category term="nginx" scheme="https://wyf195075595.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>csrf 跨站点请求伪造</title>
    <link href="https://wyf195075595.github.io/2023/04/13/programming/javascript/csrf/"/>
    <id>https://wyf195075595.github.io/2023/04/13/programming/javascript/csrf/</id>
    <published>2023-04-13T07:23:10.000Z</published>
    <updated>2023-04-13T07:47:19.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>CSRF概念：</strong><a href="https://so.csdn.net/so/search?q=CSRF&spm=1001.2101.3001.7020">CSRF</a>跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：<br>    攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p></blockquote><h3 id="CSRF攻击攻击原理及过程如下："><a href="#CSRF攻击攻击原理及过程如下：" class="headerlink" title="CSRF攻击攻击原理及过程如下："></a><strong>CSRF攻击攻击原理及过程如下：</strong></h3><ol><li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li><li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li><li> 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li><li>. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li><li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 </li></ol><span id="more"></span><h3 id="CSRF攻击实例"><a href="#CSRF攻击实例" class="headerlink" title="CSRF攻击实例"></a>CSRF攻击实例</h3><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2 </span></span><br></pre></td></tr></table></figure><p>可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p><p>​    黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</span></span><br></pre></td></tr></table></figure><p>。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p><p>​    这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">&quot;http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory&quot;</span></span><br></pre></td></tr></table></figure><p>，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 </p><h3 id="CSRF漏洞检测："><a href="#CSRF漏洞检测：" class="headerlink" title="CSRF漏洞检测："></a><strong>CSRF漏洞检测：</strong></h3><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><p>​    随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder等。</p><p>​    以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h3 id="防御CSRF攻击："><a href="#防御CSRF攻击：" class="headerlink" title="防御CSRF攻击："></a><strong>防御CSRF攻击：</strong></h3><blockquote><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p></blockquote><h4 id="（1）验证-HTTP-Referer-字段"><a href="#（1）验证-HTTP-Referer-字段" class="headerlink" title="（1）验证 HTTP Referer 字段"></a><strong>（1）验证 HTTP Referer 字段</strong></h4><p>​    根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</span></span><br></pre></td></tr></table></figure><p>，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>​    这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p><p>​    然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p><p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p><h4 id="（2）在请求地址中添加-token-并验证"><a href="#（2）在请求地址中添加-token-并验证" class="headerlink" title="（2）在请求地址中添加 token 并验证"></a><strong>（2）在请求地址中添加 token 并验证</strong></h4><p>​     CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><p>​    这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url/?csrftoken=tokenvalue%E3%80%82">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrftoken&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tokenvalue&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p><p>​     该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p><p>   <strong>（3）在 HTTP 头中自定义属性并验证</strong></p><p>​    这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>​    然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSRF概念：&lt;/strong&gt;&lt;a href=&quot;https://so.csdn.net/so/search?q=CSRF&amp;spm=1001.2101.3001.7020&quot;&gt;CSRF&lt;/a&gt;跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：&lt;br&gt;    攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CSRF攻击攻击原理及过程如下：&quot;&gt;&lt;a href=&quot;#CSRF攻击攻击原理及过程如下：&quot; class=&quot;headerlink&quot; title=&quot;CSRF攻击攻击原理及过程如下：&quot;&gt;&lt;/a&gt;&lt;strong&gt;CSRF攻击攻击原理及过程如下：&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；&lt;/li&gt;
&lt;li&gt;在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；&lt;/li&gt;
&lt;li&gt; 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；&lt;/li&gt;
&lt;li&gt;. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；&lt;/li&gt;
&lt;li&gt;浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 &lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="拓展" scheme="https://wyf195075595.github.io/tags/%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>雪中悍刀行</title>
    <link href="https://wyf195075595.github.io/2023/04/01/index/"/>
    <id>https://wyf195075595.github.io/2023/04/01/index/</id>
    <published>2023-04-01T01:23:10.000Z</published>
    <updated>2023-03-08T14:41:22.577Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/imgs/hello-world/0df431adcbef76091bf6bb1c23dda3cc7dd99eb7.jpg"></p><h3 id="初始版"><a href="#初始版" class="headerlink" title="初始版"></a>初始版</h3><p>有个白狐脸儿，佩双刀绣冬春雷，要做那天下第一；</p><p>湖底有白发老魁爱吃荤；</p><p>缺门牙老仆背剑匣；</p><p>山上有个骑青牛的年轻师叔祖，不敢下山；</p><p>有个骑大猫扛向日葵不太冷的少女杀手；</p><span id="more"></span><h3 id="收官版"><a href="#收官版" class="headerlink" title="收官版"></a>收官版</h3><p>江湖是一张珠帘。大人物小人物，是珠子，大故事小故事，是串线。情义二字，则是那些珠子的精气神。开始收官中。最终章将以那一声“小二上酒”结尾。</p><h3 id="春秋九国"><a href="#春秋九国" class="headerlink" title="春秋九国"></a>春秋九国</h3><p>离阳，西楚，西蜀，北汉，大魏，后宋、后隋，东越，南唐。徐骁灭六国，后隋，西楚，后宋，西蜀，北汉，大魏。顾剑棠灭东越，南唐。</p><p>离阳王朝：原有六州，灭春秋八国添十三州，共计十九州。</p><p>北莽王朝：占地八州，分别是姑塞，龙腰，东锦，西河，金蝉，玉蝉，宝瓶，橘子。</p><p>西蜀：举国兵卒不过十二万，战死九万。被徐骁两个月灭国。西蜀曾凿开石壁挂了三条铁索拦江试图阻拦北凉临时拼凑出的水师，不曾想那场水战尚未开启便落幕，大江沿岸天险就被北凉军悉数摧破。</p><p>西楚皇都一战：离皇宫十里，赵军师病死。徐骁率军投鞭断江，死战西蜀皇都。西蜀国破，徐骁顺势灭去数个反复无常的南蛮豪强。</p><p>西楚：地方五千里持戟百万人。</p><h3 id="春秋战争"><a href="#春秋战争" class="headerlink" title="春秋战争"></a>春秋战争</h3><p>西楚景河之战：十二万大戟士对阵北凉铁骑，全军覆没，死战不屈。</p><p>西楚襄樊守城战：春秋第一守将王明阳坐镇死守。二十万襄樊人只剩下不到一万。襄樊攻守，北凉军精锐折损大半，其中就有三百名精于钻地的穴师，死亡殆尽。</p><p>西楚西垒壁之战：西楚亡国之战。春秋国战最后一战。北凉军与西楚军对峙两年。北凉旧部马岭等十四人以死替徐骁表忠。王妃一袭白衣缟素亲自敲响战鼓，鼓声如雷，不破西楚鼓不绝。“死战第一”千人鱼鼓营死战不退，最终只活下来十六人，为“骑战第一”三千大雪龙骑兵开辟出一条直插叶白夔大戟军腹地的坦荡血路。陈芝豹坐镇中军，运筹帷幄；王妃亲自擂鼓；徐骁舍弃头盔，持矛首当其冲；三千白马白甲，一路奔雷踏去。其中便有鱼鼓营千余人的袍泽尸体。小人屠陈芝豹与叶白夔死战。叶白夔战死。此战后，杨太岁曾力劝徐骁不杀硕儒方孝梨，最终无果。</p><p>西楚灭国后，徐骁受封大柱国，隔天被封北凉王。</p><p>老皇帝要将以武乱禁的江湖掀翻，徐骁一人请命马踏江湖，不曾开战，便有两万名百战老卒请辞还家，更有无数出身江湖的猛将对徐骁心生怨恨，转投其它军伍。</p><h2 id="境界划分"><a href="#境界划分" class="headerlink" title="境界划分"></a>境界划分</h2><p><a href="javascript:;">编辑</a><a href="javascript:;"> 播报</a></p><p><strong>九品制</strong>（从小到大，九品至一品）</p><p>伤甲而不破，是下三品</p><p>破六甲以下，中三品</p><p>破甲八九，上三品</p><p>二品为小宗师</p><p>一品四境：金刚境，指玄境，天象境，陆地神仙（皆有大小真伪之分，上品为大，最次是伪）。</p><p>金刚境喻释家，金刚境的主要特点就是熬炼体魄，这是四境当中最适合熬炼体魄的时候，也就是提高防御力和体质。金刚境在早年是不被划入高手体系内的，直到高树露以这个境界代表佛家，才被划入了一品境。而金刚境之上还有大金刚境，可锻造真正的金刚不败之身，比如三教中的李当心、当年四大宗师的符将红甲。</p><p>指玄境喻道家，指玄境的主要特点一个是有类似于未卜先知、料敌于先的能力。另一个则是可以悟得一些五花八门的指玄秘术，这些秘术千奇百怪，指玄境之间对上基本上谁也不敢称自己必胜，因为你不知道他悟出的是什么秘术。像江斧丁悟出的是“直指天心”的照镜之法，看到别人的武学可以过目不忘，撷取其中的精华，而天猫韩生宣悟出的是可以截断天象境天人感应的指玄秘术，因此可以指玄杀天象。</p><p>天象境喻儒家，天象境的特点就是天人感应，与天地共鸣，可以借法天地，可以与敏锐的直觉趋利避害。指玄境要晋升天象境难度不比二品境晋升一品境容易。而且因为天象境需要天人感应，如果滥造杀业的话，会受气数影响，所以像韩生宣是可以入天象境而不愿意入。天象境完美即为大天象境，距离地仙只有一步之遥，例如柳蒿师、轩辕大磐、程白霜等人。</p><p>陆地神仙，为三家殊途同归。含有气数在身，陆地神仙位格是有数的，只有其他陆地神仙死了或者飞升了，才能有新的陆地神仙诞生。</p><p>一般而言，佛门入一品为金刚，道门入一品为指玄，儒门入一品为天象，只修单境。而江湖武夫则大多循境而进，金刚-指玄-天象-地仙（融会贯通），多境叠加，故三教中人同境界对打不如武夫。当然，除了三教中人，江湖武夫也有越境升级者，其中多是以术入武，对体魄要求不大，故而入一品则指玄。</p><p>一品往上，则是破碎虚空，剑开天门，或举霞飞升，或驾鹤而起，或御剑而行。一入天门，飞升上界，则为天仙，可得长生，但是如果出了天门，就会成为谪仙人，不再长生。过天门而不入，停留下界，则为天人。有无瑕之分。</p><p>天人大长生为天人圆满，拥有大金刚境的天人体魄（无垢之体）、道教大长生的指玄、儒家圣人的天象，在天上都难寻敌手。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/imgs/hello-world/0df431adcbef76091bf6bb1c23dda3cc7dd99eb7.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;初始版&quot;&gt;&lt;a href=&quot;#初始版&quot; class=&quot;headerlink&quot; title=&quot;初始版&quot;&gt;&lt;/a&gt;初始版&lt;/h3&gt;&lt;p&gt;有个白狐脸儿，佩双刀绣冬春雷，要做那天下第一；&lt;/p&gt;
&lt;p&gt;湖底有白发老魁爱吃荤；&lt;/p&gt;
&lt;p&gt;缺门牙老仆背剑匣；&lt;/p&gt;
&lt;p&gt;山上有个骑青牛的年轻师叔祖，不敢下山；&lt;/p&gt;
&lt;p&gt;有个骑大猫扛向日葵不太冷的少女杀手；&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://wyf195075595.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://wyf195075595.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>h5播放rtsp格式视频</title>
    <link href="https://wyf195075595.github.io/2023/03/27/programming/jsplugin/rtsp/"/>
    <id>https://wyf195075595.github.io/2023/03/27/programming/jsplugin/rtsp/</id>
    <published>2023-03-27T10:53:10.000Z</published>
    <updated>2023-04-18T04:00:52.387Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.jianshu.com/p/e16a453bbfcc">Linux下载和安装yasm、FFmpeg、流媒体服务SRS4.0</a></p><p><a href="http://www.ffmpeg.org/releases/">FFmpeg下载</a></p></blockquote><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>前端：</p><ul><li>jsmpeg.js (连接wbesocket，绘制视频图像)</li></ul><p>服务端（node）：</p><ul><li>express（静态服务，接口处理）</li><li>body-parser（处理接口接收数据）</li><li>node-rtsp-stream-jsmpeg （下发FFmpeg指令，创建websocke服务端）</li><li>child_process（启动shell脚本指令）</li></ul><p>其他：</p><ul><li>FFmpeg(视频流转码)</li><li>pm2(node进程守护)</li><li>云台控制程序（通过视频厂家提供的sdk二次开发，通过ajax调用）</li></ul><blockquote><p><a href="https://juejin.cn/post/6844903949309313037">参考链接</a></p></blockquote><hr><span id="more"></span><h3 id="zlmediakit搭建和配合ffmpeg使用"><a href="#zlmediakit搭建和配合ffmpeg使用" class="headerlink" title="zlmediakit搭建和配合ffmpeg使用"></a>zlmediakit搭建和配合ffmpeg使用</h3><blockquote><p><a href="https://github.com/ZLMediaKit/ZLMediaKit">zlmediakit</a> 是一个基于C++11的高性能运营级流媒体服务框架，可以推送各种视频，音频流。</p><p>ffmpeg 推流视频，zlmediakit 流媒体服务器经行转发，转发后的地址有多种视频格式</p></blockquote><ul><li>zlmediakit linux 环境搭建：<br>  <a href="https://zhuanlan.zhihu.com/p/366774975">这篇文章</a>写得已经非常详细了，就不再拾人牙慧了</li><li>ffmpeg安装：<br>  虽然上面的搭建文档说不用安装ffmpeg，但是如果使用命令的话，肯定还是要安装的(不安装指的是在项目中调用api)，这种方式只能安装低版本，高版本参考上面<br>  1).sudo apt-get update<br>  2).sudo apt-get install ffmpeg</li><li>测试(；推流路径格式是：rtsp://ip/…（后面可随意命名）)：<br>  例：把test文件推到某个rtsp地址上去<br>  ffmpeg -re -i test.mp4 -vcodec h264 -acodec aac -f rtsp -rtsp_transport tcp rtsp://ip/live/test<br>  注意事项：<br>  1）要推的视频路径写绝对路径；<br>  2）推流地址格式为: rtsp://ip/…（后面可随意定义）<br>  3）zlmediakit的默认路径是554，如果改了端口号，ip后要加上。<br>  4）如果使用docker安装zlmediakit，那么要注意映射的端口不是554的话，端口号也得写上</li><li><a href="https://github.com/ZLMediaKit/ZLMediaKit/wiki/ZLMediaKit%E6%8E%A8%E6%B5%81%E6%B5%8B%E8%AF%95">附带推流测试地址(附带右边列表很多相关资料)：</a></li></ul><blockquote><p><a href="https://blog.csdn.net/weixin_43248279/article/details/124734505">参考地址</a></p></blockquote><p><a href="https://qiteecom/xia-chu/ZIMediaKit">ZIMediaKit源地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// rtsp推流(文件推流)</span><br><span class="line">ffmpeg -re -i test.mp4 -rtsp transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line">// rtsp推流(文件循环推流)</span><br><span class="line">ffmpeg -re -stream_loop -1 -i test.mp4 -rtsp_transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line">// rtmp推流(文件推流)</span><br><span class="line">Ffmpeg -re -i test.mp4 -vcodec h264_nvenc -acodec aac -f flv rtmp://127.0.0.1:1935/live/test</span><br><span class="line">// rtmp推流(文件循环推流)</span><br><span class="line">ffmpeg -re -stream_loop -1 -i test.mp4 -vcodec h264 -acodec aac -f flv rtmp://127.0.0.1:1935/live/test</span><br><span class="line"></span><br><span class="line">// 推流笔记本摄像头</span><br><span class="line">ffmpeg -i /dev/video0 -vcodec libx264 -acodec copy -preset:v ultrafast -tune:v zerolatency -f flv rtmp://192.168.94.128:1935/live/test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ZIMediaKit支持多种流媒体协议的转换，协议转换后的播放地址</span></span><br><span class="line">// rtsp播放</span><br><span class="line">rtsp://127.0.0.1:554/live/test</span><br><span class="line"></span><br><span class="line">//rtmp播放</span><br><span class="line">rtmp://127.0.0.1:1935/live/test</span><br><span class="line"></span><br><span class="line">// hls播放</span><br><span class="line">http://127.0.0.1:80/live/test/hls.m3u8</span><br><span class="line"></span><br><span class="line">// http-flv播放</span><br><span class="line">http://127.0.0.1:80/live/test.live.flv</span><br><span class="line"></span><br><span class="line">// http-ts播放</span><br><span class="line">http://127.0.0.1:80/live/test.live.ts</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_37429313/article/details/116201062">ffplay ffmpeg快速检验摄像头</a></p><p><a href="https://blog.csdn.net/YellowShite/article/details/120367738">ZLMediaKit 推/拉流</a></p></blockquote><h3 id="ffmpeg-基础"><a href="#ffmpeg-基础" class="headerlink" title="ffmpeg 基础"></a>ffmpeg 基础</h3><blockquote><p>Fmpeg 是领先的多媒体框架，能够解码、编码、转码、混合、解密、流媒体、过滤和播放人类和机器创造的几乎所有东西。它支持最晦涩的古老格式，直到最尖端的格式。</p><p>简单来说可以将浏览器不支持的流转换为支持的流供页面展示.</p><p>除了视频文件，还能处理 摄像头，声卡，网络直播，电脑桌面进行数据采集</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i 表示输入a.mov</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c 表示为输出文件指定编码格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">copy 表示从输入文件a.mov中直接拷贝音频和视频数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将输入的 a.mov 转化为 mp4 格式 输出 a.mp4</span></span><br><span class="line">ffmpeg -i a.mov -c copy a.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c:v  code video 指定视频编码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c:a  code audio 指定音频编码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 video.avi 输出为 视频编码246，音频编码 acc 格式 的mp4文件</span></span><br><span class="line">ffmpeg -i video.avi -c:v h246 -c:a aac video.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看支持的格式</span></span><br><span class="line">ffmpeg -c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数选项</span></span><br><span class="line">ffmpeg -h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示一些高级参数</span></span><br><span class="line">ffmpeg -h -long</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示更多</span></span><br><span class="line">ffmpeg -h full</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出参数</span></span><br><span class="line"></span><br><span class="line">-r 24 # 指定输出视频帧率 24</span><br><span class="line">-s 1920X1080 # 指定输出视频分辨率</span><br><span class="line">-vb 5000k 将输出文件视频码率限制在 5000k左右</span><br><span class="line">-ab 320k 将输出音频码率设置限制在320k左右</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将视频音频拆分，输出生成多个文件</span></span><br><span class="line">ffmpeg -i hello.avi -c:v h264 video.map -c:a aac audio.acc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将4k视频同时生成 不同分辨率视频输出</span></span><br><span class="line">ffmpeg -i video4k.avi -c:v h264 -s 1280x720 720p.map -c:v h264 -s 1920x1080 1080p.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要参数</span></span><br><span class="line">-i 设定输入流 </span><br><span class="line">-f 设定输出格式 </span><br><span class="line">-ss 开始时间 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">视频参数：</span></span><br><span class="line">-b 设定视频流量(码率)，默认为200Kbit/s </span><br><span class="line">-r 设定帧速率，默认为25 </span><br><span class="line">-s 设定画面的宽与高 </span><br><span class="line">-aspect 设定画面的比例 </span><br><span class="line">-vn 不处理视频 </span><br><span class="line">-vcodec 设定视频编解码器，未设定时则使用与输入流相同的编解码器</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">音频参数：</span></span><br><span class="line">-ar 设定采样率 </span><br><span class="line">-ac 设定声音的Channel数 </span><br><span class="line">-acodec 设定声音编解码器，未设定时则使用与输入流相同的编解码器 </span><br><span class="line">-an 不处理音频</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.jianshu.com/p/ddafe46827b7">基础使用参考链接</a></p><p><a href="https://zhuanlan.zhihu.com/p/67878761">简单示例</a></p></blockquote><h3 id="ffplay"><a href="#ffplay" class="headerlink" title="ffplay"></a>ffplay</h3><blockquote><p>继承了 ffmpeg 的编解码能力，支持格式最全的播放器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">播放文件，左右方向键控制快进快退，q退出</span></span><br><span class="line">ffplay video.mp4</span><br></pre></td></tr></table></figure><p>在安装 ffmpeg 时 本来时默认会 安装好 ffplay,ffprobe。 但是如果缺少依赖会导致安装不成功</p><p>ffplay 依赖 <a href="https://github.com/libsdl-org/SDL/releases/tag/release-2.26.4">SDL2</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 设置 ffmpeg   --enable-libx264，此设置依赖x264。不然报错 libx264 not found</span><br><span class="line">./configure --enable-shared --enable-libx264 --enable-gpl --prefix=/usr/local/ffmpeg</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>5. 安装x264</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://www.videolan.org/developers/x264.html，下载</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">git clone https://code.videolan.org/videolan/x264.git</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">git clone http://git.videolan.org/git/x264.git</span><br><span class="line"></span><br><span class="line">cd x264</span><br><span class="line"></span><br><span class="line">./configure --enable-shared</span><br><span class="line"></span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><p><strong>libx264 not found</strong></p><blockquote><ol><li>将使用到的库路径添加至环境变量中</li></ol><p>export PATH=/usr/local/x264/bin:$PATH</p><p>export PATH=/usr/local/x264/include:$PATH</p><p>export PATH=/usr/local/x264/lib:$PATH</p></blockquote><p><strong>手动编译安装ffmpeg会出现的问题</strong></p><blockquote><p>在跑视频流程序或命令时出现这个问题。<br> 跟这个报错：ffmpeg: error while loading shared libraries: libx264.so.164: cannot open shared object file: No such file or directory</p><p> ffmpeg 时使用到了 libx264，而在实际的编译式安装过程中没有指定编译 libx264 参数，从而产生报错。</p></blockquote><p><strong>缺失依赖</strong></p><p>ffmpeg 命令报错 xxxx =&gt; not found</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ffmpeg bin名录下</span></span><br><span class="line">ldd ffmpeg</span><br></pre></td></tr></table></figure><p>查找目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr -name &#x27;libavdevice.so.58&#x27;</span><br></pre></td></tr></table></figure><p>将 目录export 出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/usr/local/lib/</span><br></pre></td></tr></table></figure><h3 id="AKStream"><a href="#AKStream" class="headerlink" title="AKStream"></a>AKStream</h3><blockquote><p>​    AKStream是一套全功能的软NVR接口平台，软NVR指的是软件定义的NVR（Network Video Recoder）。</p><p>​    AKStream集成了ZLMediaKit作为其流媒体服务器，AKStream支持对ZLMediaKit的集群管理（通过AKStreamKeeper-流媒体治理组件），可以将分布在不同服务器的多个ZLMediaKit集群起来，统一管理，统一调度。</p></blockquote><p><strong>AKStream生态圈开源Web管理平台</strong></p><ul><li><p>基于React的纯前端AKStream Web UI</p></li><li><p>非常简单的部署方式，非常简单的运行方式</p></li><li><p><a href="https://gitee.com/sscboshi/AKStreamNVR">https://gitee.com/sscboshi/AKStreamNVR</a></p></li><li><p><a href="https://github.com/langmansh/AKStreamNVR">https://github.com/langmansh/AKStreamNVR</a></p></li><li><p>基于.net 5和vue2</p></li><li><p><a href="https://github.com/langmansh/AKStreamUI">https://github.com/langmansh/AKStreamUI</a></p></li><li><p><a href="https://gitee.com/sscboshi/AKStreamUI">https://gitee.com/sscboshi/AKStreamUI</a></p></li></ul><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote><p>安装 Nginx,nginx-http-flv-module插件</p></blockquote><p>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80; #http-flv的拉流端口</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        # http-flv的相关配置</span><br><span class="line">        location /test &#123;</span><br><span class="line">            flv_live on; #打开HTTP播放FLV直播流功能</span><br><span class="line">            chunked_transfer_encoding on; #支持&#x27;Transfer-Encoding: chunked&#x27;方式回复</span><br><span class="line"> </span><br><span class="line">            add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;; #添加额外的HTTP头</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; #添加额外的HTTP头</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp_auto_push_reconnect 1s;</span><br><span class="line">rtmp_socket_dir /tmp;</span><br><span class="line"> </span><br><span class="line">rtmp &#123;</span><br><span class="line">    out_queue           4096;</span><br><span class="line">    out_cork            8;</span><br><span class="line">    max_streams         128;</span><br><span class="line">    timeout             15s;</span><br><span class="line">    drop_idle_publisher 15s;</span><br><span class="line"> </span><br><span class="line">    log_interval 5s; #log模块在access.log中记录日志的间隔时间，对调试非常有用</span><br><span class="line">    log_size     1m; #log模块用来记录日志的缓冲区大小</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        chunk_size: 4096;</span><br><span class="line">        # server_name www.test.*; #用于虚拟主机名后缀通配</span><br><span class="line"> </span><br><span class="line">        #ffmpeg推流的application </span><br><span class="line">        application live &#123;</span><br><span class="line">            live on; # 启用实时流应用程序监听</span><br><span class="line">            allow publish 127.0.0.1;</span><br><span class="line">            allow play all;</span><br><span class="line">            record off; # 不要录制流</span><br><span class="line">            meta copy; # 复制传出元数据的传入元数据</span><br><span class="line">            gop_cache on; #打开GOP缓存，减少首屏等待时间 on时第一帧加载快，off时第一帧加载慢 </span><br><span class="line">            # @StringKai 在博客https://blog.csdn.net/string_kai/article/details/100598268提到on时延高，off时延低，不过我在测试时并没有感觉出时延的差别</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 ffmpeg 推流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f v4l2 -framerate 10 -i /dev/video0 -g 10 -f flv rtmp://127.0.0.1/live/wei</span><br></pre></td></tr></table></figure><p>播放：</p><p>RTMP协议拉流:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp:192.168.94.128/live/wei</span><br></pre></td></tr></table></figure><p>HTTL FLV 协议拉流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.94.128/test?app=live&amp;stream=wei</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230409153038364.png" alt="image-20230409153038364"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/e16a453bbfcc&quot;&gt;Linux下载和安装yasm、FFmpeg、流媒体服务SRS4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ffmpeg.org/releases/&quot;&gt;FFmpeg下载&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h3&gt;&lt;p&gt;前端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jsmpeg.js (连接wbesocket，绘制视频图像)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务端（node）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;express（静态服务，接口处理）&lt;/li&gt;
&lt;li&gt;body-parser（处理接口接收数据）&lt;/li&gt;
&lt;li&gt;node-rtsp-stream-jsmpeg （下发FFmpeg指令，创建websocke服务端）&lt;/li&gt;
&lt;li&gt;child_process（启动shell脚本指令）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FFmpeg(视频流转码)&lt;/li&gt;
&lt;li&gt;pm2(node进程守护)&lt;/li&gt;
&lt;li&gt;云台控制程序（通过视频厂家提供的sdk二次开发，通过ajax调用）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844903949309313037&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="rtsp" scheme="https://wyf195075595.github.io/tags/rtsp/"/>
    
  </entry>
  
  <entry>
    <title>开发自己的js plugin</title>
    <link href="https://wyf195075595.github.io/2023/03/22/programming/jsplugin/newnpm/"/>
    <id>https://wyf195075595.github.io/2023/03/22/programming/jsplugin/newnpm/</id>
    <published>2023-03-22T10:53:10.000Z</published>
    <updated>2023-03-31T03:56:49.554Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器。首先去找适合写插件的项目包管理工具。对比了webpack,rollup,gulp,parcel</p><p>经过一通对比就选中了 <strong>rollup</strong>，具体请自行了解。简单说一下我们熟知的<strong>vue</strong>,<strong>react</strong>,<strong>taro-ui</strong> 等 就是使用的 rolluojs 打包的</p><p>自己写了一个很简单的插件上传发布到npm。具体步骤如下：</p></blockquote><span id="more"></span><ol><li><p>首先 新建一个文件夹 npm init 初始化 得到package.json</p></li><li><p>引入 rollup</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用了 yarn 因为 yarn 打包 可以自己找到 (yarn rollup) 命令可执行文件</span></span><br><span class="line">yarn add rollup -D</span><br></pre></td></tr></table></figure></li><li><p>增加配置文件 rollup.config.js, 跟package.json 同级</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持 导入 josn 文件</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-json&#x27;</span></span><br><span class="line"><span class="comment">// 支持导入 npm 第三方模块</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="comment">// 兼容 commonJs 模块</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-commonjs&#x27;</span></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="keyword">import</span> changeCase <span class="keyword">from</span> <span class="string">&#x27;change-case&#x27;</span></span><br><span class="line"><span class="comment">// 创建作者，日期，库名等注释</span></span><br><span class="line"><span class="keyword">import</span> createBanner <span class="keyword">from</span> <span class="string">&#x27;create-banner&#x27;</span></span><br><span class="line"><span class="comment">// 语法降级,@babel/preset-env,@babel/core</span></span><br><span class="line"><span class="keyword">import</span> &#123; babel &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-babel&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span> assert &#123; <span class="attr">type</span>: <span class="string">&quot;json&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = changeCase.<span class="title function_">pascalCase</span>(pkg.<span class="property">name</span>)</span><br><span class="line"><span class="keyword">const</span> banner = <span class="title function_">createBanner</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">`<span class="subst">$&#123;name&#125;</span>.js`</span>,</span><br><span class="line">      <span class="attr">year</span>: <span class="string">&#x27;2023-present&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    <span class="attr">input</span>: <span class="string">&quot;src/index.js&quot;</span>,</span><br><span class="line">    <span class="comment">// input: [&quot;src/index.js&quot;, &quot;src/album.js&quot;],</span></span><br><span class="line">    <span class="comment">// input: &#123;</span></span><br><span class="line">    <span class="comment">//     foo: &quot;src/index.js&quot;,</span></span><br><span class="line">    <span class="comment">//     bar: &quot;src/album.js&quot;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="attr">output</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.amd.js`</span>,</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&quot;amd&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            name,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.common.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">            <span class="attr">exports</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.esm.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.iife.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;iife&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">json</span>(),</span><br><span class="line">        <span class="comment">// resolve(),</span></span><br><span class="line">        <span class="title function_">babel</span>(&#123;</span><br><span class="line">            <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">            <span class="attr">babelHelpers</span>: <span class="string">&#x27;bundled&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;test&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;istanbul&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">commonjs</span>(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建 src 文件夹放置源码，dist 文件夹放置打包文件，src/index.js</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Progress</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用超类的构造器</span></span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// 创建一个影子 DOM 树并将其附加到这个元素</span></span><br><span class="line">        <span class="comment">// 设置为 this.shadowRoot 的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>:<span class="string">&#x27;open&#x27;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 克隆模板，定义自定义组件的后代及样式</span></span><br><span class="line">        <span class="comment">// 然后把内容追加到影子根节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createTemplate</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">template</span>.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 内容模板</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">contentTemplate</span> = <span class="string">`正在安装 #percentage %`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取得对影子DOM中重要元素的引用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progress</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressContent</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress-content&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressWrapper</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress-wrapper&#x27;</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化进度</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">max</span> = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 钩子函数： 自定义元素增加、删除、修改属性时 ，调用。</span></span><br><span class="line">    <span class="comment">// 触发此回调函数，必须监听变化的属性static get observedAttributes() ,返回监听的属性。</span></span><br><span class="line">    <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name, oldValue, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个 template 元素，用于保存样式和元素树,可以在每个 元素的实例中使用它门</span></span><br><span class="line">    <span class="title function_">createTemplate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> template = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">        template.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;style&gt;</span></span><br><span class="line"><span class="string">              .progress-wrapper &#123;</span></span><br><span class="line"><span class="string">                position: relative;</span></span><br><span class="line"><span class="string">                overflow: hidden;</span></span><br><span class="line"><span class="string">                width: 300px;</span></span><br><span class="line"><span class="string">                height: 20px;</span></span><br><span class="line"><span class="string">                text-align: center;</span></span><br><span class="line"><span class="string">                border-radius: 10px;</span></span><br><span class="line"><span class="string">                background-color: #cdeee3;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">              .progress &#123;</span></span><br><span class="line"><span class="string">                width: 0%;</span></span><br><span class="line"><span class="string">                height: 100%;</span></span><br><span class="line"><span class="string">                transition: all 200ms;</span></span><br><span class="line"><span class="string">                background-color: #3da985;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">              p &#123;</span></span><br><span class="line"><span class="string">                font-size: 12px;</span></span><br><span class="line"><span class="string">                font-weight: bolder;</span></span><br><span class="line"><span class="string">                position: absolute;</span></span><br><span class="line"><span class="string">                z-index: 10;</span></span><br><span class="line"><span class="string">                top: 0;</span></span><br><span class="line"><span class="string">                left: 0;</span></span><br><span class="line"><span class="string">                width: 100%;</span></span><br><span class="line"><span class="string">                height: 100%;</span></span><br><span class="line"><span class="string">                margin: 0;</span></span><br><span class="line"><span class="string">                transition: all 200ms;</span></span><br><span class="line"><span class="string">                background-image: linear-gradient(to right, #cdeee3 0%, #3da985 0%);</span></span><br><span class="line"><span class="string">                -webkit-background-clip: text;</span></span><br><span class="line"><span class="string">                -webkit-text-fill-color: transparent;</span></span><br><span class="line"><span class="string">                display: flex;</span></span><br><span class="line"><span class="string">                align-items: center;</span></span><br><span class="line"><span class="string">                justify-content: center;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &lt;/style&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;progress-wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;progress&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;p class=&quot;progress-content&quot;&gt;正在安装 0%&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">template</span> = template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新进度条</span></span><br><span class="line">    <span class="title function_">updateProgress</span>(<span class="params">percentage</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progress</span>.<span class="property">style</span>.<span class="property">width</span> = percentage + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">contentTemplate</span>.<span class="title function_">replace</span>(<span class="string">&quot;#percentage&quot;</span>, percentage);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`linear-gradient(to right, #cdeee3 <span class="subst">$&#123;percentage&#125;</span>%, #3da985 <span class="subst">$&#123;percentage&#125;</span>%)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 常用属性读写</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">percentage</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">start</span> &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">width</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">width</span> &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">height</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">height</span> &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">fontSize</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">style</span>.<span class="property">fontSize</span> &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">percentage</span>(<span class="params">pt</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">String</span>(pt).<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pt &gt;= <span class="variable language_">this</span>.<span class="property">max</span>) pt = <span class="variable language_">this</span>.<span class="property">max</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">start</span> = pt;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">updateProgress</span>(pt);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-percentage&quot;</span>, pt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">height</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">height</span> = val;</span><br><span class="line">            <span class="keyword">let</span> fontSize = <span class="built_in">parseInt</span>(<span class="number">1</span>/<span class="number">3</span> * (+<span class="title class_">String</span>(val).<span class="title function_">replace</span>(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>)))</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fontSize</span> = fontSize + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">width</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">width</span> = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">fontSize</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">style</span>.<span class="property">fontSize</span> = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个静态属性对 attributeChangedCallback 方法是必须的，只有在这个数组中列出的属性名才会触发对该方法的调用</span></span><br><span class="line"><span class="title class_">Progress</span>.<span class="property">observedAttributes</span> = [<span class="string">&#x27;innerText&#x27;</span>, <span class="string">&#x27;value&#x27;</span>,<span class="string">&#x27;data-percentage&#x27;</span>];</span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-progress&#x27;</span>, <span class="title class_">Progress</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Progress</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行打包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c 表示使用配置文件，不加默认不使用</span></span><br><span class="line">yarn rollup -c</span><br></pre></td></tr></table></figure></li><li><p>上传至npm</p><blockquote><p>准备：注册npm账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消淘宝镜像，设置npm官方地址，否则发布不了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看npm配置</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设置了淘宝镜像，执行以下命令,一定要是https 否则会报错</span></span><br><span class="line">npm config set registry=https://registry.npmjs.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录 npm 账户，提示🔗跳转至网页登录</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否登录，登录成功会显示你的用户名</span></span><br><span class="line">npm who am i</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布, 此处如果报错403，重名错误。修改package.json name 属性。应为全网name不能重复。提交时可以增加 忽略文件 .gitignore</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>结语： 插件写的很拉，主要是体验一把过程</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。首先去找适合写插件的项目包管理工具。对比了webpack,rollup,gulp,parcel&lt;/p&gt;
&lt;p&gt;经过一通对比就选中了 &lt;strong&gt;rollup&lt;/strong&gt;，具体请自行了解。简单说一下我们熟知的&lt;strong&gt;vue&lt;/strong&gt;,&lt;strong&gt;react&lt;/strong&gt;,&lt;strong&gt;taro-ui&lt;/strong&gt; 等 就是使用的 rolluojs 打包的&lt;/p&gt;
&lt;p&gt;自己写了一个很简单的插件上传发布到npm。具体步骤如下：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="npm" scheme="https://wyf195075595.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>打包工具对比</title>
    <link href="https://wyf195075595.github.io/2023/03/21/programming/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/%E6%8B%93%E5%B1%95/"/>
    <id>https://wyf195075595.github.io/2023/03/21/programming/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/%E6%8B%93%E5%B1%95/</id>
    <published>2023-03-21T08:10:10.000Z</published>
    <updated>2023-03-26T06:13:06.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack、gulp、rollup-使用对比和适用场景"><a href="#webpack、gulp、rollup-使用对比和适用场景" class="headerlink" title="webpack、gulp、rollup 使用对比和适用场景"></a><a href="https://my.oschina.net/nieyao/blog/5506339">webpack、gulp、rollup 使用对比和适用场景</a></h3><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><blockquote><p>打包工具，根据我们的资源依赖树，分不同类型打包成静态资源，支持热更新，代码模块切分，three-shaking、异步加载等、</p></blockquote><p><strong>特性：</strong></p><blockquote><p>不同资源的模块打包 热更新 代码分割 静态资源压缩 异步加载 three-shaking</p></blockquote><p><strong>适用场景</strong></p><blockquote><p>应用程序打包</p></blockquote><h4 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a><a href="https://www.oschina.net/action/GoToLink?url=https://www.rollupjs.com/guide/faqs">rollup</a></h4><blockquote><p>Rollup 是一个<strong>模块</strong>打包工具，可以将我们按照 ESM (ES2015 Module) 规范编写的源码构建输出如下格式:</p></blockquote><ul><li>IIFE: 自执行函数，可通过 &lt;script&gt; 标签加载</li><li>AMD: 通过 RequireJS 加载</li><li>CommonJS: Node 默认的模块规范，可通过 Webpack 加载</li><li>UMD: 兼容 IIFE, AMD, CJS 三种模块规范</li><li>ESM: ES2015 Module 规范，可用 Webpack, Rollup 加载 -</li></ul><p><strong>特性：</strong></p><blockquote><p>支持动态导入。</p><p>支持 tree shaking。仅加载模块里用得到的函数以减小文件大小。</p><p>Scope Hoisting。 rollup 可以将所有小文件生成到一个大文件中，所有代码都在同一个函数作用域里:， 不会像 Webpack 那样用很多函数来包装模块。</p><p>没有其他冗余代码，执行很快。除了必要的 cjs, umd 头外，bundle 代码基本和源码差不多，也没有奇怪的 <strong>webpack_require</strong>, Object.defineProperty 之类的东西，</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>不支持热更新功能；对于 commonjs 模块，需要额外的插件将其转化为 es2015 供 rollup 处理；无法进行公共代码拆分。 运行时态的动态导入 dynamic imports at runtime.</p><p>rollup 通过插件来编译处理各类静态资源：</p></blockquote><ul><li>rollup-plugin-typescript2</li><li>rollup-plugin-babel</li><li>rollup-plugin-uglify</li><li>rollup-plugin-commonjs</li><li>rollup-plugin-postcss</li><li>rollup-plugin-img</li><li>rollup-plugin-json</li></ul><p><strong>适用场景：</strong></p><blockquote><p>由纯 js 开发的第三方库； 需要生成单一的 umd 文件的场景</p></blockquote><h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a><a href="https://www.oschina.net/action/GoToLink?url=https://www.gulpjs.com.cn/docs/getting-started/quick-start/">gulp</a></h4><blockquote><p>自动化构建工具，把项目工作抽象成自动化任务 用 gulp 构建自动化工作流，处理项目中的资源，基于流式操作。</p></blockquote><p><strong>特性</strong> </p><blockquote><p>gulp 文档简单，学习成本低，使用简单；对大量源文件可以进行流式处理，借助插件，可以对文件类型进行多种操作处理。</p></blockquote><p><strong>适用场景</strong> </p><blockquote><p>静态资源密集操作型场景，主要用于 css、图片等静态资源的处理操作。 文件处理：</p></blockquote><p>gulp 通过各种中间件处理静态资源的编译：</p><ul><li>gulp-load-plugins：自动加载 package.json 中的 gulp 插件</li><li>gulp-rename： 重命名</li><li>gulp-uglify：文件压缩</li><li>gulp-concat：文件合并</li><li>gulp-less：编译 less</li><li>gulp-sass：编译 sass</li><li>gulp-clean-css：压缩 CSS 文件</li><li>gulp-htmlmin：压缩 HTML 文件</li><li>gulp-babel: 使用 babel 编译 JS 文件</li><li>gulp-jshint：jshint 检查</li><li>gulp-imagemin：压缩 jpg、png、gif 等图片</li><li>gulp-livereload：当代码变化时，它可以帮我们自动刷新页面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;webpack、gulp、rollup-使用对比和适用场景&quot;&gt;&lt;a href=&quot;#webpack、gulp、rollup-使用对比和适用场景&quot; class=&quot;headerlink&quot; title=&quot;webpack、gulp、rollup 使用对比和适用场景&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="webpack" scheme="https://wyf195075595.github.io/categories/webpack/"/>
    
    
    <category term="eslint" scheme="https://wyf195075595.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 redis</title>
    <link href="https://wyf195075595.github.io/2023/03/09/programming/linux/redis/"/>
    <id>https://wyf195075595.github.io/2023/03/09/programming/linux/redis/</id>
    <published>2023-03-09T00:23:10.000Z</published>
    <updated>2023-03-09T01:25:43.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux-安装-redis"><a href="#linux-安装-redis" class="headerlink" title="linux 安装 redis"></a>linux 安装 redis</h3><p>1、去<a href="redis.io">官网</a>下载 redis ,上传解压。</p><p>然后会发现 文件夹中有 MakeFile 文件，这是编译所需文件</p><p>2、编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>3、安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>安装后得命令在 /usr/local/bin 目录下</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;linux-安装-redis&quot;&gt;&lt;a href=&quot;#linux-安装-redis&quot; class=&quot;headerlink&quot; title=&quot;linux 安装 redis&quot;&gt;&lt;/a&gt;linux 安装 redis&lt;/h3&gt;&lt;p&gt;1、去&lt;a href=&quot;redis.io&quot;&gt;</summary>
      
    
    
    
    <category term="linux" scheme="https://wyf195075595.github.io/categories/linux/"/>
    
    
    <category term="redis" scheme="https://wyf195075595.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>浏览器知识</title>
    <link href="https://wyf195075595.github.io/2023/03/08/computer/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://wyf195075595.github.io/2023/03/08/computer/%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2023-03-08T05:23:10.000Z</published>
    <updated>2023-03-08T05:29:33.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在浏览器中找到拓展程序位置"><a href="#在浏览器中找到拓展程序位置" class="headerlink" title="在浏览器中找到拓展程序位置"></a>在浏览器中找到拓展程序位置</h3><blockquote><p>地址栏输入chrome:version 回车，用资源管理器打开”个人资料路径”栏的路径,该路径下的Extensions文件夹即默认的扩展安装路径</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;在浏览器中找到拓展程序位置&quot;&gt;&lt;a href=&quot;#在浏览器中找到拓展程序位置&quot; class=&quot;headerlink&quot; title=&quot;在浏览器中找到拓展程序位置&quot;&gt;&lt;/a&gt;在浏览器中找到拓展程序位置&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;地址栏输入chrome:v</summary>
      
    
    
    
    <category term="computer" scheme="https://wyf195075595.github.io/categories/computer/"/>
    
    
    <category term="浏览器" scheme="https://wyf195075595.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>springboot基础</title>
    <link href="https://wyf195075595.github.io/2023/03/02/programming/java/springboot/"/>
    <id>https://wyf195075595.github.io/2023/03/02/programming/java/springboot/</id>
    <published>2023-03-02T08:40:00.000Z</published>
    <updated>2023-03-21T06:52:26.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置容器"><a href="#配置容器" class="headerlink" title="配置容器"></a>配置容器</h3><ul><li><p>xml配置容器</p><p>  就是spring 的 xml文件中那样的写法</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">&quot;createStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>javaConfig配置容器</p><p>  采用java类的方式来配置</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 表示当前类是作为配置文件使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建方法，方法的返回值是对象。在方法上加上@Bean</span></span><br><span class="line"><span class="comment">    方法的返回值对象就注入到容器中。方法名是默认的Bean id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">createStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  把XML文件住的的Bean导入到容器</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  引入外部属性配置文件</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:comfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  扫描组件注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackage=&quot;com.xxx.service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h3><blockquote><p>它是spring中的一个成员，可以简化Spring MVC的使用，他的核心还是IOC容器。</p></blockquote><p>特点：</p><ol><li>内嵌 tomcat，jetty，Undertow</li><li>提供起步依赖，简化配置</li><li>自动配置spring和第三方库</li><li>健康检查，统计，外部化配置</li><li>不同生成代码，不用使用xml做配置</li></ol><span id="more"></span><h3 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h3><ul><li><p>通过 IDEA 方式</p></li><li><p>浏览器访问 start.springboot.io</p></li><li><p>创建一个普通maven项目然后在<strong>pom</strong>文件中加入parent</p></li></ul><h3 id="spring注解"><a href="#spring注解" class="headerlink" title="spring注解"></a>spring注解</h3><p>@SpringBootApplication</p><blockquote><p>此注解由 3 个注解组成</p><ul><li><p>@SpringBootConfiguration 注解标注类 可作为配置文件使用，注册Bean</p><ul><li>@Configuration  </li></ul></li><li><p>@EnableAutoConfiguration 启用自动配置</p></li><li><p>@ComponentScan  组件扫描器，从主文件位置扫描</p></li></ul></blockquote><h3 id="spring-boot-的配置文件"><a href="#spring-boot-的配置文件" class="headerlink" title="spring boot 的配置文件"></a>spring boot 的配置文件</h3><blockquote><p>配置文件名： application</p><p>拓展名：（properties(k:v), yml(k: v)）</p><p>两种格式同时存在系统默认读取 application.properties</p></blockquote><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18080</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span>  <span class="string">UTF-8</span></span><br><span class="line">  <span class="attr">dzi:</span></span><br><span class="line">    <span class="attr">install:</span></span><br><span class="line">      <span class="attr">path:</span>  <span class="string">/home/image2dzi/</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">gpu:</span>  <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">force:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10240MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">11000MB</span></span><br><span class="line">      <span class="attr">file-size-threshold:</span> <span class="string">512KB</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">labelSystem</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">dbajydw1234</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.232:3306/labelsystem_test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">driver-class-name:</span>  <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initial-size:</span>  <span class="number">5</span></span><br><span class="line">  <span class="comment">#devtools:</span></span><br><span class="line">  <span class="comment">#  restart:</span></span><br><span class="line">  <span class="comment">#    enabled: true  #设置开启热部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.pcl.pojo</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">labelsystem.log</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">logs/</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://192.168.1.245:9000/</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">password:</span>  <span class="string">minioadmin</span></span><br><span class="line"><span class="comment">#  存储上传的zip文件以供备份/label-zip/xx.zip</span></span><br><span class="line">  <span class="attr">zipBucketName:</span> <span class="string">label-zip</span></span><br><span class="line"><span class="comment">#  存储解压的图片/label-img/datasetName/xx.jpg</span></span><br><span class="line">  <span class="attr">imgBucketName:</span> <span class="string">label-img</span></span><br><span class="line"><span class="comment">#  存储自动标注后的xml文件/label-xml/datasetName/xx.xml</span></span><br><span class="line">  <span class="attr">xmlBucketName:</span> <span class="string">label-xml</span></span><br><span class="line"><span class="comment">#  存储自动标注后的预览图片base64编码/label-baseCode/datasetName/xx.txt</span></span><br><span class="line">  <span class="attr">baseCodeBucketName:</span> <span class="string">label-basecode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#算法有关参数配置</span></span><br><span class="line"><span class="attr">alogrithom:</span></span><br><span class="line">  <span class="comment">#算法访问链接</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://36.7.72.75:9148/Upload</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接访问的minio存储位置/home</span></span><br><span class="line"><span class="attr">pictureURL:</span> <span class="string">http://192.168.1.245:18088</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程访问服务器配置</span></span><br><span class="line"><span class="attr">sftp:</span></span><br><span class="line">  <span class="comment">#服务器ip</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">  <span class="comment">#ssh端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">  <span class="comment">#用户名</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">zkrd</span></span><br><span class="line">  <span class="comment">#密码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">zkrd12#$</span></span><br><span class="line">  <span class="comment"># 上传标注文件服务器路径</span></span><br><span class="line">  <span class="comment">#  uploadAnnotateFile: /home/zkrd/label_system/</span></span><br><span class="line">  <span class="attr">uploadAnnotateFile:</span> <span class="string">F:/sampleManagement/</span></span><br><span class="line">  <span class="comment">#连接池参数</span></span><br><span class="line">  <span class="attr">pool:</span></span><br><span class="line">    <span class="comment">#对象池中管理的最多对象个数。默认值是8</span></span><br><span class="line">    <span class="attr">max-total:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#对象池中最大的空闲对象个数。默认值是8</span></span><br><span class="line">    <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#对象池中最小的空闲对象个数。默认值是0</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 分页配置</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helper-dialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">support-methods-arguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countsql</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置文件多环境配置"><a href="#配置文件多环境配置" class="headerlink" title="配置文件多环境配置"></a>配置文件多环境配置</h4><p>application-dev.yml    开发环境</p><p>application-prod.yml    生产环境</p><p>application.properties/application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活使用按个配置文件</span></span><br><span class="line"><span class="string">spring.profiles.active=dev</span></span><br></pre></td></tr></table></figure><h4 id="配置文件数据映射为Java对象"><a href="#配置文件数据映射为Java对象" class="headerlink" title="配置文件数据映射为Java对象"></a>配置文件数据映射为Java对象</h4><p>自定义属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sftp:</span></span><br><span class="line">  <span class="comment">#服务器ip</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">  <span class="comment">#ssh端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">  <span class="comment">#用户名</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">zkrd</span></span><br><span class="line">  <span class="comment">#密码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">zkrd12#$</span></span><br></pre></td></tr></table></figure><p>Java对象中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;sftp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SftpConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring-中获取容器"><a href="#spring-中获取容器" class="headerlink" title="spring 中获取容器"></a>spring 中获取容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> SpringApplication.run(SpringbootTestApplication.class, args);</span><br><span class="line"></span><br><span class="line">app.getBean(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h4><blockquote><p>开发中可能会有这样的情景。需要在容器启动后执行一些内容。比如读取配置文件，数据库连接之类的。SpringBoot 给我们提供了两个接口来帮助我们实现这种需求。这两个接口分别为 <strong>CommandLineRunner</strong> 和 <strong>ApplicationRunner</strong>。他们的执行时机为容器启动完成的时候这两个接口中有一个 run 方法，我们只需要实现这个方法即可。这两个接口的不同之处而在于:ApplicationRunner 中 run 方法的参数为 ApplicationArguments，CommandLineRunner<br>接口中run 方法的参数为 String 数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的 Runner run 方法调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此组件会在主方法之前调用</p><h3 id="web组件"><a href="#web组件" class="headerlink" title="web组件"></a>web组件</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><blockquote><p>能拦截 Control 的接口请求</p></blockquote><p>创建 MyInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"><span class="comment">// 返回 true 放行，返回false 拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// 添加拦截器对象，注入到容器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//        WebMvcConfigurer.super.addInterceptors(registry);</span></span><br><span class="line">        <span class="comment">// 创建过滤器，使用自己的 Filter</span></span><br><span class="line">        <span class="type">MyInterceptor</span> <span class="variable">myInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterceptor</span>();</span><br><span class="line">        <span class="type">InterceptorRegistration</span> <span class="variable">interceptor</span> <span class="operator">=</span> registry.addInterceptor(myInterceptor);</span><br><span class="line">        <span class="comment">// 指定拦截的URL地址</span></span><br><span class="line">        String[] path  = &#123;<span class="string">&quot;/*&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 指定不拦截的地址</span></span><br><span class="line">        String[] excludePath  = &#123;<span class="string">&quot;/login&quot;</span>&#125;;</span><br><span class="line">        interceptor.addPathPatterns()</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="springboot-中使用-servlet"><a href="#springboot-中使用-servlet" class="headerlink" title="springboot 中使用 servlet"></a>springboot 中使用 servlet</h4><p>新建servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html;charset=utf-8;&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;servlet 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegistorServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">ServletRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ServletRegistrationBean bean = new ServletRegistrationBean&lt;&gt;(new TestService(), &quot;/servlet&quot;);</span></span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>());</span><br><span class="line">        bean.setServlet(<span class="keyword">new</span> <span class="title class_">TestService</span>());</span><br><span class="line">        bean.setUrlMappings(<span class="string">&quot;/servlet1&quot;</span>,<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>创建 MyFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器启动&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册 Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegisterBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">        bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加字符集过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterEncoding</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">    <span class="comment">// 框架内置的过滤器 CharacterEncodingFilter</span></span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    <span class="comment">// 指定编码方式</span></span><br><span class="line">    filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 让 req,res 对象都使用 utf-8</span></span><br><span class="line">    filter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line">    bean.setFilter(filter);</span><br><span class="line">    bean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用字符集过滤器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">encoding:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># springboot 默认启用配置了字符集 IOS-8859-1</span></span><br></pre></td></tr></table></figure><p>其实我没可以使用spring boot默认的字符集配置，只需要改变默认字符集</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servlet:</span></span><br><span class="line">  <span class="attr">encoding:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># springboot 默认配置了字符集 IOS-8859-1</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="attr">force:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="集成mybatis"><a href="#集成mybatis" class="headerlink" title="集成mybatis"></a>集成mybatis</h3><p>依赖：创建项目时选择 springWeb, MybaatisFragment, Mysql-Driver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123465</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mydb01?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initial-size:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>创建 model，control，service, mapper</p><h4 id="Mapper-注解"><a href="#Mapper-注解" class="headerlink" title="@Mapper 注解"></a>@Mapper 注解</h4><blockquote><p>放在 mapper 接口上。每个mapper 都要加。它会自动生成 实现类</p></blockquote><h4 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h4><blockquote><p>配置扫描，可以给指定目录下文件添加 @Mapper注解。通常配置在项目主类上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.xxx.mapper&quot;, &quot;com.xxx.dao&quot;&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="指定-xml-文件所在文件目录位置"><a href="#指定-xml-文件所在文件目录位置" class="headerlink" title="指定 xml 文件所在文件目录位置"></a>指定 xml 文件所在文件目录位置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定mapper文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="指定日志输出格式"><a href="#指定日志输出格式" class="headerlink" title="指定日志输出格式"></a>指定日志输出格式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.log4j.Log4jImpl</span></span><br></pre></td></tr></table></figure><h3 id="springboot事务管理"><a href="#springboot事务管理" class="headerlink" title="springboot事务管理"></a>springboot事务管理</h3><blockquote><p>在入口类使用注解 @EnableTransactionManagement 开启事务支持</p><p>在业务方法中 加入 @transactional 表示事务支持。</p></blockquote><h3 id="接口架构风格"><a href="#接口架构风格" class="headerlink" title="接口架构风格"></a>接口架构风格</h3><blockquote><p>API：可以指访问servlet，controller的url，调用其他程序的函数</p></blockquote><p>RESTful 风格</p><blockquote><p>Representational State Trasfer 【表现层状态转移】</p><p>它是一种架构风格和设计的理念，不是标准</p><p>优点：更简洁，更又层次</p><p><strong>使用url表示资源，使用http动作操作资源</strong></p></blockquote><p>相关注解：</p><p>@PathVariable: 从url中获取数据</p><p>@GetMapper: 支持get请求</p><p>@PostMapping：支持post请求方式’</p><p>@PutMapper: 支持put请求</p><p>@DeleteMapping：支持delete请求</p><p>@RestController: 符合注解，是@Controller和@ResponseBody组合</p><p>​    表示当前类的所有方法都加入 @ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PathVariable</span> 获取url中数据</span></span><br><span class="line"><span class="comment"> &#123;id&#125; 定义路径变量</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/queryStudent/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryStudent</span><span class="params">(<span class="meta">@PathVariable(value=&quot;id&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id=&quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解总结"><a href="#注解总结" class="headerlink" title="注解总结"></a>注解总结</h3><h4 id="Spring-SpringMVC-SpringBoot"><a href="#Spring-SpringMVC-SpringBoot" class="headerlink" title="Spring + SpringMVC + SpringBoot"></a>Spring + SpringMVC + SpringBoot</h4><p><strong>创建对象的:</strong><br>@Contro1ler: 放在类的上面，创建控制器对象，注入到容器中</p><p>@RestContro11er: 放在类的上面，创建控制器对象，注入到容器中。<br>作用: 复合注解是</p><p>@Contro1ler ，@ResponseBody，使用这个注解类的，里面的控制器方法的返回值都是数据</p><p>@Service :放在业务层的实现类上面，创建service对象，注入到容器</p><p>@Repository : 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用MyBatis梅架，dao对象是MyBatis通过代理生成的。 不需要使用</p><p>@Component: 所以没有使用。放在类的上面，创建此类的对象，放入到容器中。</p><p><strong>赋值的:</strong></p><p>@Value: 简单类型的赋值， 例如 在属性的上面使用@Value(“李四”) private string name@vaTue :还可以使用@Value,获取配置文件者的数据(properties或ym])。@Value(“sfserver .port}”) private Integer port</p><p>@Autowired: 引用类型赋值自动注入的，支持byName，byType.默认是byType 。放在属性的上面，也可以放在构造方法的上面。 推荐是放在构造方法的上面给引用类型赋值，使用byName方式。</p><p>@Qualifer: @Qualifer都是Spring框架提供的。</p><p>@Resource :来自idk中的定义， javax.annotation。 实现引用类型的自动注入， 支持byName，byType.黑认是byWame，如果byName失败， 再使用byType注入。 在属性上面使用</p><p><strong>其他</strong></p><p>@Configuration :放在类的上面，表示这是个配置类，相当于xml配置文件</p><p>@Bean: 放在方法的上面， 把方法的返回值对象，注入到spring容器中。</p><p>@ImportResource :加载其他的xm配置文件， 把文件中的对象注入到spring容器中</p><p>@PropertySource :读取其他的properties属性配置文件</p><p>@ComponentScan :扫描器，指定包名，扫描注解的</p><p>@ResponseBody: 放在方法的上面，表示方法的返回值是数据，不是视图</p><p>@RequestBody : 把请求体中的数据，读取出来， 转为iava对象使用。</p><p>@ControlTerAdvice:控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。</p><p>@ExceptionHandler : 处理异常的，放在方法的上面</p><p><strong>SpringBoot中使用的注解</strong></p><p>@SpringBootConfiguration: 放在启动类上面， 包含了@SpringBootApplication :@EnabTeAutoConfiguration, @ComponentScan</p><p><strong>MyBatis相关的注解</strong></p><p>@Mapper : 放在类的上面 ， 让MyBatis找到接口，创建他的代理对象(MapperScan :放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中</p><p>@Param :放在dao接口的方法的形参前面，作为命名参数使用的。</p><p><strong>Dubbo注解</strong></p><p>@Dubboservice: 在提供者端使用的，暴露服务的， 放在接口的实现类上面@DubboReference: 在消费者端使用的， 引用远程服务， 放在属性上面使用。@EnableDubbo : 放在主类上面， 表示当前引用启用Dubbo功能。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;配置容器&quot;&gt;&lt;a href=&quot;#配置容器&quot; class=&quot;headerlink&quot; title=&quot;配置容器&quot;&gt;&lt;/a&gt;配置容器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;xml配置容器&lt;/p&gt;
&lt;p&gt;  就是spring 的 xml文件中那样的写法&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;createStudent&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;com.xxx.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;javaConfig配置容器&lt;/p&gt;
&lt;p&gt;  采用java类的方式来配置&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 表示当前类是作为配置文件使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SpringConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    	创建方法，方法的返回值是对象。在方法上加上@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    	方法的返回值对象就注入到容器中。方法名是默认的Bean id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Student &lt;span class=&quot;title function_&quot;&gt;createStudent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Student&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stu.setName(&lt;span class=&quot;string&quot;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; stu;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  把XML文件住的的Bean导入到容器&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ImportResource(&amp;quot;classpath:applicationContext.xml&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SpringConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  引入外部属性配置文件&lt;/p&gt;
  &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PropertySource(&amp;quot;classpath:comfig.properties&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SpringConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;  扫描组件注解&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ComponentScan(basePackage=&amp;quot;com.xxx.service&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SpringConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;spring-boot&quot;&gt;&lt;a href=&quot;#spring-boot&quot; class=&quot;headerlink&quot; title=&quot;spring boot&quot;&gt;&lt;/a&gt;spring boot&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;它是spring中的一个成员，可以简化Spring MVC的使用，他的核心还是IOC容器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内嵌 tomcat，jetty，Undertow&lt;/li&gt;
&lt;li&gt;提供起步依赖，简化配置&lt;/li&gt;
&lt;li&gt;自动配置spring和第三方库&lt;/li&gt;
&lt;li&gt;健康检查，统计，外部化配置&lt;/li&gt;
&lt;li&gt;不同生成代码，不用使用xml做配置&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="springboot基础" scheme="https://wyf195075595.github.io/tags/springboot%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>拓展</title>
    <link href="https://wyf195075595.github.io/2023/02/22/programming/java/other/"/>
    <id>https://wyf195075595.github.io/2023/02/22/programming/java/other/</id>
    <published>2023-02-22T08:00:00.000Z</published>
    <updated>2023-03-08T07:55:05.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="扫描远程文件"><a href="#扫描远程文件" class="headerlink" title="扫描远程文件"></a>扫描远程文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接sftp服务器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host     主机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port     端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChannelSftp <span class="title function_">connect</span><span class="params">(String host, <span class="type">int</span> port, String username,String password)</span> &#123;</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">sftp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">JSch</span> <span class="variable">jsch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSch</span>();</span><br><span class="line">            <span class="comment">//jsch.getSession(username, host, port);</span></span><br><span class="line">            <span class="type">Session</span> <span class="variable">sshSession</span> <span class="operator">=</span> jsch.getSession(username, host, port);</span><br><span class="line">            System.out.println(<span class="string">&quot;Session created.&quot;</span>);</span><br><span class="line">            sshSession.setPassword(password);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">sshConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            sshConfig.put(<span class="string">&quot;StrictHostKeyChecking&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">            sshSession.setConfig(sshConfig);</span><br><span class="line">            sshSession.connect();</span><br><span class="line">            System.out.println(<span class="string">&quot;Session connected.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Opening Channel.&quot;</span>);</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> sshSession.openChannel(<span class="string">&quot;sftp&quot;</span>);</span><br><span class="line">            channel.connect();</span><br><span class="line">            sftp = (ChannelSftp) channel;</span><br><span class="line">            System.out.println(<span class="string">&quot;Connected to &quot;</span> + host + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sftp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出目录下的文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directory 要列出的目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sftp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SftpException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector <span class="title function_">listFiles</span><span class="params">(String directory, ChannelSftp sftp)</span> <span class="keyword">throws</span> SftpException &#123;</span><br><span class="line">        <span class="keyword">return</span> sftp.ls(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：</span></span><br><span class="line"></span><br><span class="line"><span class="type">ChannelSftp</span> <span class="variable">sftp</span> <span class="operator">=</span> connect(HOST, PORT, USER, PWD);</span><br></pre></td></tr></table></figure><h3 id="本地文件扫描"><a href="#本地文件扫描" class="headerlink" title="本地文件扫描"></a>本地文件扫描</h3><blockquote><p><a href="https://blog.csdn.net/codeLife1993/article/details/81906996">参考</a></p></blockquote><span id="more"></span><h3 id="解析JSON文件"><a href="#解析JSON文件" class="headerlink" title="解析JSON文件"></a>解析JSON文件</h3><blockquote><p>我们用来解析json格式的jar包有很多，jackson，<a href="https://so.csdn.net/so/search?q=fastjson&spm=1001.2101.3001.7020">fastjson</a>，gson都行。但本人喜欢用fastjson。所以本篇都是以fastjson来解析json文件。</p><p><a href="https://blog.csdn.net/Jeck_wu/article/details/118755971">参考</a></p></blockquote><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:18080/api/upload-test&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">webkitdirectory</span> <span class="attr">mozdirectory</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件夹&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:18080/api/upload-test&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="保存到本地"><a href="#保存到本地" class="headerlink" title="保存到本地"></a>保存到本地</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/upload-test&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadTest</span><span class="params">(<span class="meta">@RequestParam(&quot;files&quot;)</span> MultipartFile[] files)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file: files) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/Download/&quot;</span> + file.getOriginalFilename()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="保存至远程服务器"><a href="#保存至远程服务器" class="headerlink" title="保存至远程服务器"></a>保存至远程服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/upload-test&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadTest</span><span class="params">(<span class="meta">@RequestParam(&quot;files&quot;)</span> MultipartFile[] files)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file: files) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] strings = file.getOriginalFilename().split(<span class="string">&quot;\\/&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> strings[strings.length - <span class="number">1</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">newPath</span> <span class="operator">=</span> file.getOriginalFilename().replace(fileName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            sftpUtil.upload(uploadAnnotateFile + newPath, fileName , file.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;上传结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="远程连接配置"><a href="#远程连接配置" class="headerlink" title="远程连接配置"></a>远程连接配置</h4><blockquote><p><a href="https://github.com/fengfangithub/study-sftp">参考</a></p></blockquote><ol><li><p>pom.xml 引入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sftp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application-xxx.yml 文件配置参数</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程访问服务器配置</span></span><br><span class="line"><span class="attr">sftp:</span></span><br><span class="line">  <span class="comment">#服务器ip</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">  <span class="comment">#ssh端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">  <span class="comment">#用户名</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">zkrd</span></span><br><span class="line">  <span class="comment">#密码</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">zkrd12#$</span></span><br><span class="line">  <span class="comment"># 上传标注文件服务器路径</span></span><br><span class="line">  <span class="attr">uploadAnnotateFile:</span> <span class="string">/home/zkrd/label_system/</span></span><br><span class="line">  <span class="comment">#连接池参数</span></span><br><span class="line">  <span class="attr">pool:</span></span><br><span class="line">    <span class="comment">#对象池中管理的最多对象个数。默认值是8</span></span><br><span class="line">    <span class="attr">max-total:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#对象池中最大的空闲对象个数。默认值是8</span></span><br><span class="line">    <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#对象池中最小的空闲对象个数。默认值是0</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>封装类</p><p> SftpFactory.java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.ChannelSftp;</span><br><span class="line"><span class="keyword">import</span> com.jcraft.jsch.JSch;</span><br><span class="line"><span class="keyword">import</span> com.jcraft.jsch.JSchException;</span><br><span class="line"><span class="keyword">import</span> com.jcraft.jsch.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.BasePooledObjectFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.PooledObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.DefaultPooledObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SftpFactory</span> <span class="keyword">extends</span> <span class="title class_">BasePooledObjectFactory</span>&lt;ChannelSftp&gt; &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sftp.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sftp.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sftp.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sftp.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ChannelSftp <span class="title function_">create</span><span class="params">()</span> <span class="keyword">throws</span> JSchException &#123;</span><br><span class="line">        <span class="type">JSch</span> <span class="variable">jsch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSch</span>();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">sshSession</span> <span class="operator">=</span> jsch.getSession(username, host, port);</span><br><span class="line">        sshSession.setPassword(password);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">sshConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        sshConfig.put(<span class="string">&quot;StrictHostKeyChecking&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">        sshSession.setConfig(sshConfig);</span><br><span class="line">        sshSession.connect();</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">channel</span> <span class="operator">=</span> (ChannelSftp) sshSession.openChannel(<span class="string">&quot;sftp&quot;</span>);</span><br><span class="line">        channel.connect();</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PooledObject&lt;ChannelSftp&gt; <span class="title function_">wrap</span><span class="params">(ChannelSftp channelSftp)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultPooledObject</span>&lt;&gt;(channelSftp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> fengfan</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/1/14 15:26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyObject</span><span class="params">(PooledObject&lt;ChannelSftp&gt; p)</span> &#123;</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">channelSftp</span> <span class="operator">=</span> p.getObject();</span><br><span class="line">        channelSftp.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 激活连接池里面的sftp连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">activateObject</span><span class="params">(PooledObject&lt;ChannelSftp&gt; p)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">channelSftp</span> <span class="operator">=</span> p.getObject();</span><br><span class="line">        <span class="keyword">if</span>(!channelSftp.isConnected())&#123;</span><br><span class="line">            channelSftp.connect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> SftpGenericObjectPool.java </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.ChannelSftp;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SftpGenericObjectPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GenericObjectPool&lt;ChannelSftp&gt; genericObjectPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SftpGenericObjectPool</span><span class="params">(SftpFactory sftpFactory, GenericObjectPoolConfig&lt;ChannelSftp&gt; sftpPoolConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.genericObjectPool = <span class="keyword">new</span> <span class="title class_">GenericObjectPool</span>&lt;&gt;(sftpFactory, sftpPoolConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ChannelSftp <span class="title function_">borrowObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> genericObjectPool.borrowObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnObject</span><span class="params">(ChannelSftp obj)</span> &#123;</span><br><span class="line">        genericObjectPool.returnObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> SftpUtil.java</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.ChannelSftp;</span><br><span class="line"><span class="keyword">import</span> com.jcraft.jsch.SftpException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SftpUtil</span> &#123;</span><br><span class="line">    <span class="comment">//连接池</span></span><br><span class="line">    <span class="keyword">private</span> SftpGenericObjectPool pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SftpUtil</span><span class="params">(SftpGenericObjectPool pool)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pool = pool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir  远程目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 远程文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件字节数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">download</span><span class="params">(String dir, String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">sftp</span> <span class="operator">=</span> pool.borrowObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sftp.cd(dir);</span><br><span class="line">            <span class="keyword">return</span> sftp.get(name);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.returnObject(sftp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir  远程目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 远程文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in   输入流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String dir, String name, InputStream in)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">sftp</span> <span class="operator">=</span> pool.borrowObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mkdirs(sftp, dir);</span><br><span class="line">            sftp.cd(dir);</span><br><span class="line">            sftp.put(in, name);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.returnObject(sftp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir  远程目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 远程文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String dir, String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelSftp</span> <span class="variable">sftp</span> <span class="operator">=</span> pool.borrowObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sftp.cd(dir);</span><br><span class="line">            sftp.rm(name);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.returnObject(sftp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归创建多级目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 多级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mkdirs</span><span class="params">(ChannelSftp sftp, String dir)</span> <span class="keyword">throws</span> SftpException &#123;</span><br><span class="line">        String[] folders = dir.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        sftp.cd(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String folder : folders) &#123;</span><br><span class="line">            <span class="keyword">if</span> (folder.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sftp.cd(folder);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    sftp.mkdir(folder);</span><br><span class="line">                    sftp.cd(folder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SftpGenericObjectPool <span class="title function_">getPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPool</span><span class="params">(SftpGenericObjectPool pool)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pool = pool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册实例化 sftpUtil</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> SftpUtil sftpUtil;</span><br></pre></td></tr></table></figure></li></ol><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><blockquote><p>java在response中设置文件流，在浏览器中直接显示或直接下载</p><p>在浏览器地址栏输入文件请求url，能在浏览器上直接显示文件，而不直接下载</p><p>解决方式设置文件ContentType类型</p><p>当设置了ContentType为“image/jpg”时，浏览器可以直接显示图片；</p><p>没设置ContentType时，浏览器会直接下载图片到本地。</p><p>备注：不能设置<a href="https://so.csdn.net/so/search?q=header&spm=1001.2101.3001.7020">header</a>，否则当设置了ContentType时也是直接下载图片</p><p><a href="https://blog.csdn.net/q289658763/article/details/125928198">参考</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应体加入文件流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath文件从盘符开始的完整路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">responseFileStream</span><span class="params">(HttpServletResponse response, String filePath)</span>&#123;</span><br><span class="line">logger.debug(<span class="string">&quot;responseFileStream imgPath:&quot;</span>+filePath);</span><br><span class="line"><span class="keyword">if</span>(filePath.contains(<span class="string">&quot;%&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">filePath = URLDecoder.decode(filePath,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;responseFileStream decode error:&quot;</span>+e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(filePath.contains(<span class="string">&quot;%&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">filePath = URLDecoder.decode(filePath,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;responseFileStream decode error:&quot;</span>+e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">String[] dir = filePath.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> dir[dir.length-<span class="number">1</span>];</span><br><span class="line">String[] array = fileName.split(<span class="string">&quot;[.]&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> array[array.length-<span class="number">1</span>].toLowerCase();</span><br><span class="line"><span class="comment">//设置文件ContentType类型</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;jpg,jepg,gif,png&quot;</span>.contains(fileType))&#123;<span class="comment">//图片类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;image/&quot;</span>+fileType);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;pdf&quot;</span>.contains(fileType))&#123;<span class="comment">//pdf类型</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/pdf&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//自动判断下载文件类型 </span></span><br><span class="line">response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置文件头：最后一个参数是设置下载文件名</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot;+fileName);   </span></span><br><span class="line">out = response.getOutputStream();</span><br><span class="line"><span class="comment">// 读取文件流</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;responseFileStream error:FileNotFoundException&quot;</span> + e.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;responseFileStream error:&quot;</span> + e.toString());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.close();</span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;responseFileStream stream close() error:NullPointerException&quot;</span> + e.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;responseFileStream stream close() error:&quot;</span> + e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端图片预览"><a href="#前端图片预览" class="headerlink" title="前端图片预览"></a>前端图片预览</h3><blockquote><p>通过访问地址，在img 标签 src中 渲染</p></blockquote><p>后端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">viewPicture</span><span class="params">(HttpServletResponse response, String filePath)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> filePath.substring(filePath.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>( filePath);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">            <span class="comment">//读取图片文件流</span></span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">            <span class="comment">//将图片写到输出流</span></span><br><span class="line">            ImageIO.write(image, format, response.getOutputStream());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;文件不存在&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;预览失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uploadAnnotateFile 是上传根路径</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/viewPicture&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> ResponseBean <span class="title function_">viewPicture</span><span class="params">(HttpServletResponse res,String path)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> FolderUtil.viewPicture(res, uploadAnnotateFile + path);</span><br><span class="line">    <span class="keyword">return</span> ResponseBean.success(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http:xxx:xxx/api/viewPicture?path=/xxx.jpg&quot; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;扫描远程文件&quot;&gt;&lt;a href=&quot;#扫描远程文件&quot; class=&quot;headerlink&quot; title=&quot;扫描远程文件&quot;&gt;&lt;/a&gt;扫描远程文件&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 连接sftp服务器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; host     主机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; port     端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; username 用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; password 密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ChannelSftp &lt;span class=&quot;title function_&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String host, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; port, String username,String password)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ChannelSftp&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sftp&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;JSch&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;jsch&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;JSch&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//jsch.getSession(username, host, port);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sshSession&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; jsch.getSession(username, host, port);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Session created.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sshSession.setPassword(password);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sshConfig&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Properties&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sshConfig.put(&lt;span class=&quot;string&quot;&gt;&amp;quot;StrictHostKeyChecking&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;no&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sshSession.setConfig(sshConfig);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sshSession.connect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Session connected.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Opening Channel.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; sshSession.openChannel(&lt;span class=&quot;string&quot;&gt;&amp;quot;sftp&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            channel.connect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sftp = (ChannelSftp) channel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;Connected to &amp;quot;&lt;/span&gt; + host + &lt;span class=&quot;string&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sftp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 列出目录下的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; directory 要列出的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; sftp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; SftpException&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Vector &lt;span class=&quot;title function_&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String directory, ChannelSftp sftp)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SftpException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sftp.ls(directory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 测试：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;ChannelSftp&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sftp&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; connect(HOST, PORT, USER, PWD);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;本地文件扫描&quot;&gt;&lt;a href=&quot;#本地文件扫描&quot; class=&quot;headerlink&quot; title=&quot;本地文件扫描&quot;&gt;&lt;/a&gt;本地文件扫描&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/codeLife1993/article/details/81906996&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="拓展" scheme="https://wyf195075595.github.io/tags/%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>redis 基础</title>
    <link href="https://wyf195075595.github.io/2023/02/22/programming/java/redis/"/>
    <id>https://wyf195075595.github.io/2023/02/22/programming/java/redis/</id>
    <published>2023-02-22T08:00:00.000Z</published>
    <updated>2023-03-13T03:17:26.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>非关系型数据库。</p></blockquote><p>缓存数据分类：</p><ol><li><p>实时同步数据：要求缓存中数据与DB中欧给一致</p><p> 如何保证一致？只要DB数据发送改变，清除缓存</p></li><li><p>阶段性同步：没必要与DB实时同步，大差不差就行</p><p> 如何实现？设置缓存数据得生存时长</p></li></ol><span id="more"></span><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>redis.conf, 运行时指定配置文件(从当前目录)</p><p>配置项查看文档<a href="https://www.redis.net.cn/tutorial/3504.html">中文文档</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /redis.conf</span><br></pre></td></tr></table></figure><p>连接到主机为 127.0.0.1，端口为 6379 ，密码为 mypass 的 redis 服务上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;</span><br></pre></td></tr></table></figure><p>命令行方式 查看/配置 配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET key</span><br><span class="line">CONFIG SET key value</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p></blockquote><ol><li><p>字符串</p><p> string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET name zs</span><br><span class="line">GET name</span><br></pre></td></tr></table></figure></li><li><p>Hash</p><p> 是一个string类型的field和value的映射表，hash特别适合用于存储对象。<strong>HMSET, HEGTALL</strong> 命令</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HMSET user:1 username redis.net.cn password redis.net.cn points 200</span><br><span class="line">HGETALL user:1</span><br></pre></td></tr></table></figure></li><li><p>List</p><p> 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush redis.net.cn rabitmq</span><br><span class="line">lrange redis.net.cn 0 10</span><br></pre></td></tr></table></figure></li><li><p>Set</p><p> Set是string类型的无序集合。通过hash表实现的，添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd key member</span><br><span class="line">smembers key</span><br></pre></td></tr></table></figure></li><li><p>zset</p><p> zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member</span><br><span class="line">ZRANGEBYSCORE key 0 1000</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;非关系型数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缓存数据分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;实时同步数据：要求缓存中数据与DB中欧给一致&lt;/p&gt;
&lt;p&gt; 如何保证一致？只要DB数据发送改变，清除缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阶段性同步：没必要与DB实时同步，大差不差就行&lt;/p&gt;
&lt;p&gt; 如何实现？设置缓存数据得生存时长&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="数据库" scheme="https://wyf195075595.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>spring基础</title>
    <link href="https://wyf195075595.github.io/2023/02/17/programming/java/spring/"/>
    <id>https://wyf195075595.github.io/2023/02/17/programming/java/spring/</id>
    <published>2023-02-17T08:00:00.000Z</published>
    <updated>2023-03-08T13:44:40.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>什么是OCP？</strong></p><p>OCP是软件开发的七大开发原则：开闭原则</p><p>核心：其他6个原则的基础</p></blockquote><blockquote><p><strong>OCP开闭原则核心是什么？</strong></p><p>只要你在扩展功能的时候，没有修改以前写好的代码，那么就是符合OCP原则的，反之则违背了OCP原则    </p><p>当系统功能拓展时，如果动了之前稳定的程序，修改了之前的程序。之前所有程序都需要测试，这是不想看到的</p></blockquote><blockquote><p><strong>违背依赖倒置原则（DIP原则）</strong></p><p><strong>上依赖下就是违背</strong>：如：表示层依赖服务层，服务层依赖持久层</p></blockquote><blockquote><p><strong>控制反转</strong></p><p>一种编程思想。或设计模式</p><ul><li>不在程序中采用硬编码方式来 new 对象</li><li>不在程序中采用硬编码方式来 维护对象关系</li></ul></blockquote><h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><ul><li>Spring框架实现了控制反转IoC这种思想<ul><li>spring帮你new对象</li><li>spring帮你维护对象关系</li></ul></li><li>Spring 时一个实现了IoC思想的容器<ul><li>依赖注入的两种方式（依赖注入时现实IoC的具体实现: XML解析+工厂模式+反射机制）<ul><li>set 注入(执行set给属性赋值)</li><li>构造方法 注入(执行构造方法给属性赋值)</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230217170739281.png" alt="image-20230217170739281"></p><span id="more"></span><h3 id="创建一个spring6项目"><a href="#创建一个spring6项目" class="headerlink" title="创建一个spring6项目"></a>创建一个spring6项目</h3><ol><li><p>创建一个普通maven项目</p></li><li><p>添加spring6的依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--  当你引入 Spring Context依赖后，表示将Spring的基础依赖引入  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置spring 配置文件 xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  IDE工具提供了这个模板  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置bean,这样spring会帮我们管理这个对象</span></span><br><span class="line"><span class="comment">        bean标签的两个重要属性</span></span><br><span class="line"><span class="comment">        id: 全局唯一</span></span><br><span class="line"><span class="comment">        class: 需要关系的类的全路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bran.User&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建 com.spring.bran.User 类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.bran;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 第一步：获取spring 容器对象</span></span><br><span class="line">    <span class="comment">// ApplicationContext 有很多实现类 ClassPathXmlApplicationContext用来专门加载spring 配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：根据bean id 从 spring 容器中获取这个对象</span></span><br><span class="line">    <span class="comment">// 返回值是一个对象，可以传第二个参数设置类型</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">userBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, <span class="string">&quot;User.class&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;userBean = &quot;</span> + userBean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非类路径下获取配置文件</span></span><br><span class="line"><span class="type">FileSystemXmlApplicationContext</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;d://xxx.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="spring-启用-Log42-日志框架"><a href="#spring-启用-Log42-日志框架" class="headerlink" title="spring 启用 Log42 日志框架"></a>spring 启用 Log42 日志框架</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    log4j依赖    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件名字必须是-log4j2-xml"><a href="#配置文件名字必须是-log4j2-xml" class="headerlink" title="配置文件名字必须是 log4j2.xml"></a>配置文件名字必须是 log4j2.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    输出日志信息到控制台  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 控制台日志输出格式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:SSS&#125; [t%] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时已经启用</p><h4 id="自己怎么使用log4j2记录日志？"><a href="#自己怎么使用log4j2记录日志？" class="headerlink" title="自己怎么使用log4j2记录日志？"></a>自己怎么使用log4j2记录日志？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">useLog4j2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserTest.class);</span><br><span class="line">    logger.info(<span class="string">&quot;我是一条信息&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;我是一条调试信息&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;我是一条错误信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote><p>service 层引用了 Dao层对象，怎么配置让spring自动生成</p></blockquote><h4 id="基于set方法的依赖注入"><a href="#基于set方法的依赖注入" class="headerlink" title="基于set方法的依赖注入"></a>基于set方法的依赖注入</h4><p>dao.UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserDao.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;数据库正在保存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service.UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">// 此处为要注入Dao层 的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.UserService&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- userServiceBean 中注入 UserDao  ，</span></span><br><span class="line"><span class="comment">name其实是根据 set方法的名字来生成的，eg:setuserDao</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app 为spring容器对象</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">uerService</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;userServiceBean&quot;</span>, UserService.class);</span><br><span class="line">uerService.saveUser();</span><br></pre></td></tr></table></figure><h4 id="基于构造方法的依赖注入"><a href="#基于构造方法的依赖注入" class="headerlink" title="基于构造方法的依赖注入"></a>基于构造方法的依赖注入</h4><p>service.UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">// 此处为要注入Dao层 的构造方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.UserService&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- userServiceBean 中注入 UserDao  ，</span></span><br><span class="line"><span class="comment">可以是</span></span><br><span class="line"><span class="comment">-index:其是参数的位置，从0开始 eg: 0</span></span><br><span class="line"><span class="comment">-name: 参数的名字eg: userDao</span></span><br><span class="line"><span class="comment">-不指定 ：自动匹配，实际是根据参数类型来判断</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内-外部注入-bean"><a href="#内-外部注入-bean" class="headerlink" title="内/外部注入 bean"></a>内/外部注入 bean</h4><blockquote><p>内部 bean 就是在 property 里面使用 bean标签的方式，效果跟上面一样, 一般不用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.UserService&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="简单类型注入"><a href="#简单类型注入" class="headerlink" title="简单类型注入"></a>简单类型注入</h4><blockquote><p>UserDao 中提供成员属性 username,password 的set,get方法</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>哪些类型被认为是简单类型？</p><p>BeanTuils.java 中的isSimpleValueType 方法 中经行了描述</p><ol><li>8中基本类型及其包装类</li><li>字符串</li><li>枚举</li><li>class</li><li>日期 Date,Temporal</li><li></li></ol></blockquote><p>日期直接传字符串会导致报错，它要求指定的日期格式字符串。比较麻烦，一般不把它当作简单类型处理</p><p><strong>经典应用场景</strong></p><blockquote><p>数据源 都实现了 DAtaSource 接口，其中的获取 connection 对象时要传入 driver,url,username,password 时可以采用配置 注入</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password &quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="级联属性赋值"><a href="#级联属性赋值" class="headerlink" title="级联属性赋值"></a>级联属性赋值</h4><blockquote><p>使用级联属性必须要有 get方法，在一个bean中给另一个bean赋值属性</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 学生bean中给班级类注入数据</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.Student&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;16&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clazzBean&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高二1班&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.clazz&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组注入"><a href="#数组注入" class="headerlink" title="数组注入"></a>数组注入</h4><ol><li><p>数组简单数组</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strArray&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组 引用类型</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;girlFriends&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;girlFriend1&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;girlFriend2&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;girlFriend3&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;girlFriend1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.Woman&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;girlFriend2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.Woman&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小丽&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;girlFriend3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.Woman&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小婉&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h4><blockquote><p>list 集合有序可重复，无需不可重复。元素时基本类型用value,引用类型用&lt;ref bean=”” /&gt;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List集合有序可重复--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vaLue</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vaLue</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set集合无序不可重复--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vaLue</span>&gt;</span>北京大兴区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>北京大兴区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>北京海淀区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">vaLue</span>&gt;</span>北京海淀区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>北京大兴区<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>map 集合</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map集合简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;110&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;130&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--map集合引用类型</span></span><br><span class="line"><span class="comment">&lt;entry key-ref=&quot;3&quot; value-ref=&quot;130&quot; /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入Properties俩性类对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addrs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql:// ocalhost:3306/spring6<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入一个-null-空字符串"><a href="#注入一个-null-空字符串" class="headerlink" title="注入一个 null, 空字符串"></a>注入一个 null, 空字符串</h4><blockquote><p>要注入一个 null. 要不就不写这条属性注入，要不就如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 注入空字符串</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注入-特殊字符"><a href="#注入-特殊字符" class="headerlink" title="注入 特殊字符"></a>注入 特殊字符</h4><blockquote><p>使用实体符号：如 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 报错</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2 &lt; 3&quot;</span> /&gt;</span></span><br><span class="line">// 正常</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2 <span class="symbol">&amp;lt;</span> 3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 &lt;![CDATA[]]&gt;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rs&quot;</span>&gt;</span></span><br><span class="line">// 只能使用 value 标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[2 &lt; 3]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于p命名空间的注入"><a href="#基于p命名空间的注入" class="headerlink" title="基于p命名空间的注入"></a>基于p命名空间的注入</h4><blockquote><p>p命名空间注入基于 set 方法，用来简化传值操作</p><p>c命名空间注入基于构造 方法，用来简化传值操作</p><p>1、在spring 的配置文件头部添加p命名空间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><p>2、使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dogBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.Dog&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">p:birth-ref</span>=<span class="string">&quot;birthBean&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 将日期对象作为引用类型传入</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;birthBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Ddate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="util-命名空间注入"><a href="#util-命名空间注入" class="headerlink" title="util 命名空间注入"></a>util 命名空间注入</h4><blockquote><p>让配置复用，主要针对集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 引入 util 命名空间</span><br><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line"></span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;ml&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;anyList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="基于XML自动装配"><a href="#基于XML自动装配" class="headerlink" title="基于XML自动装配"></a>基于XML自动装配</h4><ul><li><p>根据名字自动装配</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 之前写法</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.UserService&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoBean&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">// 自动装配</span><br><span class="line">// 此处bean的名字应是set方法名不带set的小驼峰，此外自动装配是set注入，不要重写有参构造方法</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.UserService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据类型自动装配</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.dao.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">// 这也是 set注入的方式，同种类型参数不要超过两个</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.UserService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="spring-引入外部属性文件"><a href="#spring-引入外部属性文件" class="headerlink" title="spring 引入外部属性文件"></a>spring 引入外部属性文件</h4><blockquote><p>以前 mybatis 通过 配置文件 设置properties.resource引入外部属性文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>现在spring中：</p></blockquote><p>1、先引入 context 命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line"></span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>2、使用标签引入</p><blockquote><p>注意，xxx.properties 文件的属性在命名时 加上前缀 如：jdbc.username=root. 否则可能会优先读取电脑全局属性username:结果是 Administrator</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">$&#123;变量名&#125;</span><br></pre></td></tr></table></figure><h3 id="bean-作用域"><a href="#bean-作用域" class="headerlink" title="bean 作用域"></a>bean 作用域</h3><blockquote><p>spring 默认情况下如何管理这个Bean的？</p><p>默认情况下 Bean是单例的，在Spring初始化的时候实例化，所以每次调用getBean(),都返回那个单例对象</p></blockquote><p>我们可以通过设置Bean标签的属性scope来改变Bean是否为单例（singleton）/多例（prototype）。web项目会有更多配置</p><p><strong>自定义 scope</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置我们自定义的作用城--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomScopeConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scopes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;threadScope&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这个Scope接口的实现类使用的是Spring框架内置的。也可以自定义。--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.SimpleThreadScope&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;threadScope&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>效果：在不同线程下，getBean 获取的对象不一样。是线程安全的</p><h3 id="Bean-的实例化（获取）方式"><a href="#Bean-的实例化（获取）方式" class="headerlink" title="Bean 的实例化（获取）方式"></a>Bean 的实例化（获取）方式</h3><ol><li><p>通过构造方法实例化</p><p> 在文件中写 Bean 标签，spring 会自动调用该类构造函数实例化 Bean</p></li><li><p>通过简单工厂模式实例化</p><p> 通过简单工厂模式。spring会到 StarFactory 类中 调用 get 获取实例对象</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;startBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.bean.StarFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;get&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回Star 对象实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过factory-bean实例化</p><p> 通过工厂方法模式。通过 factory-bean,factory-method 属性共同完成</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;gunFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.bean.GunFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;gun&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;gunFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;get&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> GunFactory</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GunFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> Gun <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实际上 new 这个对象还是我们程序员自己 new 的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Gun</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Gun</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gun</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Gun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Gun的无参构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 FactoryBean 接口实例化</p><p> 实际上是第三种方法的简化</p><p> PersonFactory</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 是否单例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> Person</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行构造函数！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> spring.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.PersonFactory&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>FactoryBean与BeanFactory区别？</p><p>FactoryBean 是 Bean 它是辅助spring创建其他bean的，而BeanFactory 是创建Bean的工厂，负责创建Bean对象</p></blockquote><h4 id="FeatoryBean-注入-Date-类型"><a href="#FeatoryBean-注入-Date-类型" class="headerlink" title="FeatoryBean 注入 Date 类型"></a>FeatoryBean 注入 Date 类型</h4><blockquote><p>Date 在 spring中被当作简单类型，</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Date&gt; &#123;</span><br><span class="line">    String strDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateFactory</span><span class="params">(String strDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strDate = strDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> format.parse(strDate);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dateBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.DateFactory&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1970-10-12&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.bean.service.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dateBean&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean-的声明周期"><a href="#Bean-的声明周期" class="headerlink" title="Bean 的声明周期"></a>Bean 的声明周期</h3><blockquote><p>​    粗略的五步走</p><ol><li>实例化Bean，调用无参构造方法</li><li>给Bean属性赋值，set方法</li><li>初始化Bean。会调用Bean的init方法，这个方法需要自己写</li><li>使用Bean</li><li>销毁Bean，调用Bean的destroy 方法，这个方法也需要自己写</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 指定生命周期函数</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dateBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xx.DateFactory&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zs&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>生命周期的七步。就是在第三步增加 before，after。怎么加呢？</p><p>编写一个类实现 BeanPostProcessor 类并重写 after，before方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SevenStep</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessBeforeInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> BeanPostProcessor.<span class="built_in">super</span>.postProcessAfterInitialization(bean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 作用域配置文件中所有Bean</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.SevenStep&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>生命周期十步走</p><p>在BeanBefore 前后增加，和销毁之前增加</p><ul><li><p>before前检查Bean是否实现了Aware相关接口，并设置相关依赖</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可获取Bean 名字，Bean这个类的加载器，生产这个Bean的工厂对象</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>,BeanClassLoaderAware, BeanFactoryAware</span><br></pre></td></tr></table></figure></li><li><p>before后检查Bean是否实现了InitialzingBean接口，并调用方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implements</span> <span class="title class_">InitializingBean</span></span><br></pre></td></tr></table></figure></li><li><p>销毁前检查Bean是否实现了DisposableBean接口，并调用方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implements</span> <span class="title class_">DisposableBean</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p><strong>Spring容器只对singLeton的Bean进行完整的生命周期管理</strong><br>如果是scope = <strong>porototype 作用域的Bean，Spring容器只负责将bean初始化完</strong>，等客户端程序一旦获取到Bean之后，Spring容器就不再营理该对象的生命周期了.</p></blockquote><h3 id="将自己new的对象纳入spring容器管理"><a href="#将自己new的对象纳入spring容器管理" class="headerlink" title="将自己new的对象纳入spring容器管理"></a>将自己new的对象纳入spring容器管理</h3><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己 new 的对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">// 注册管理</span></span><br><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">factory.registerSingleton(<span class="string">&quot;stuBean&quot;</span>,stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从容器获取 Bean</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">stuBean</span> <span class="operator">=</span> factory.getBean(<span class="string">&quot;stuBean&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Bean-的循环依赖"><a href="#Bean-的循环依赖" class="headerlink" title="Bean 的循环依赖"></a>Bean 的循环依赖</h3><blockquote><p>A对象引用B属性，B对象引用A属性。相互引用</p></blockquote><p>singleton + setter模式下的循环依赖是没有问题的。</p><p>本质原因：任意一个Bean实例化时，马上经行曝光，其他Bean可以引用它了，此时属性可能还没有注入。因为是单例，全局只有一个</p><p><strong>prototype + setter 模式下循环依赖出现问题</strong>。当其中一个类型是 singleton 时就没问题</p><p><strong>基于构造方法的注入模式下循环依赖会出现问题</strong></p><h3 id="spring-IoC注解式开发"><a href="#spring-IoC注解式开发" class="headerlink" title="spring IoC注解式开发"></a>spring IoC注解式开发</h3><blockquote><p>用来简写配置，避免编写xml文件</p></blockquote><h4 id="声明Bean的注解"><a href="#声明Bean的注解" class="headerlink" title="声明Bean的注解"></a>声明Bean的注解</h4><blockquote><p>1、使用注解需要AOP的依赖</p><p>2、配置<strong>context命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>3、给spring框架开启扫描哪些包中的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xxx.bean&quot;</span> /&gt;</span></span><br><span class="line">多个包用,隔开。也可以使用父包名</span><br></pre></td></tr></table></figure><p>4、在bean上使用注解</p></blockquote><ol><li>@Component</li><li>@Controller</li><li>@Service</li><li>@Repository</li></ol><h4 id="选择性实例化"><a href="#选择性实例化" class="headerlink" title="选择性实例化"></a>选择性实例化</h4><p>方式1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 让所有属性失效</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xxx.bean&quot;</span>  <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">// 只让Component注解生效</span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xxx.bean&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 除了Component注解其他都生效</span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="负责注入的注解"><a href="#负责注入的注解" class="headerlink" title="负责注入的注解"></a>负责注入的注解</h3><ol><li>@Value</li><li>@Autowired</li><li>@Qualifier</li><li>@Resource</li></ol><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><blockquote><p>要注入属性类型是简单类型时，可以使用。</p><p>此方式注入不依赖set方法。可以用在属性上，构造方法形参上，set方法上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="meta">@Value(&quot;张三&quot;)</span> String name, <span class="meta">@Value(&quot;42&quot;)</span><span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Autowired-与-Qualifier"><a href="#Autowired-与-Qualifier" class="headerlink" title="@Autowired 与 @Qualifier"></a>@Autowired 与 @Qualifier</h4><blockquote><p>@Autowired 可以注入<strong>非简单类型</strong>， 自动装配【默认是ByType】</p><p>如需按 名字注入需和  @Qualifier一起使用</p><p>此方式注入也不依赖set方法。可以使用在 <strong>成员属性</strong>，<strong>构造方法</strong>，<strong>构造方法形参</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OrderDao.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderDaoImpl.java</span></span><br><span class="line"><span class="meta">@Component(&quot;orderDaoImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在插入...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTest</span> &#123;</span><br><span class="line">    <span class="comment">// 自动将 OrderDao 实现类 OrderDaoImpl 注入， 但是如果有多个类实现OrderDao就不能自动类型装配需要联合@Qualifier一起使用</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;orderDaoImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        orderDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果此时还有一个类实现了 OrderDao</span></span><br><span class="line"><span class="comment">// OrderDaoImpl.java</span></span><br><span class="line"><span class="meta">@Component(&quot;orderDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl1</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在插入1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><blockquote><p>可以完成非简单类型注入。存在于<strong>jdk拓展包中（所以使用时需要额外引入）</strong>，可理解为标准注解。而@Autowired 是spring框架自己的。</p><p>Resource注解可用在 属性上，setter方法上。</p><p>现根据类型装配，找不到就根据名字</p></blockquote><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// spring5</span><br><span class="line">javax.annotation-api</span><br><span class="line"></span><br><span class="line">// spring6</span><br><span class="line">jakarta.annotation-api</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;orderDaoImpl&quot;)</span></span><br><span class="line"><span class="keyword">private</span> OrderDao orderDao;</span><br></pre></td></tr></table></figure><h3 id="全注解开发"><a href="#全注解开发" class="headerlink" title="全注解开发"></a>全注解开发</h3><blockquote><p>不使用配置文件，通过其他方式获取XML返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 现在 用一个java配置类代替xml</span></span><br><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConf.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringConf.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.xxx.dao&quot;,&quot;com.xxx.service&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConf</span> () &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><blockquote><p>@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p><p><strong>注意</strong>：@Configuration注解的配置类有如下要求：</p><ol><li>@Configuration不可以是final类型；</li><li>@Configuration不可以是匿名类；</li><li>嵌套的configuration必须是静态类。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MyBean <span class="title function_">myBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// instantiate, configure and return bean ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论:</p><p>@Configuation等价于&lt;Beans&gt;&lt;/Beans&gt;</p><p>@Bean等价于&lt;Bean&gt;&lt;/Bean&gt;</p><p>@ComponentScan等价于&lt;context:component-scan base-package=”com.ahies.ija.management”/&gt;</p></blockquote><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><blockquote><p>spring内置的对jdbc的简化操作方式。但实际项目中一般会使用mybatis</p></blockquote><p>配置 JdbcTemplate</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    德鲁伊连接池    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置数据源  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb01&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 jdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">selectByActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select actno,balance from t_act where actno = ?&quot;</span>;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Account.class), actno);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_act set balance = ? where actno = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.update(sql, act.getBalance(), act.getActno());</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GoF之代理模式"><a href="#GoF之代理模式" class="headerlink" title="GoF之代理模式"></a>GoF之代理模式</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><blockquote><p>需求：检测出所有Service业务方法的耗时时间</p><p>-硬编码：每个业务方法中直接添加计时代码</p><p>​    违背OCP开闭原则</p><p>-编写业务子类，继承业务类，对每个业务方法重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SubService <span class="keyword">extends</span> <span class="title class_">FatherService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteXXX</span><span class="params">(id)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启计时</span></span><br><span class="line">        <span class="built_in">super</span>(id);</span><br><span class="line">        <span class="comment">// 结束计时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    代码耦合度高，没有复用</p><p>-代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FatherServiceProxy <span class="keyword">implements</span> <span class="title class_">FatherService</span> &#123;</span><br><span class="line">    <span class="comment">// 代理目标,代理接口，不要代理实现类</span></span><br><span class="line">    <span class="keyword">private</span> FatherService target;</span><br><span class="line">    <span class="comment">// 构造赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FatherServiceProxy</span><span class="params">(FatherService targrt)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = targrt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteXXX</span><span class="params">(id)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启计时</span></span><br><span class="line">        target.deleteXXX(id);</span><br><span class="line">        <span class="comment">// 结束计时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目标</span></span><br><span class="line"><span class="type">FatherService</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FatherServiceImpl</span>();</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="type">FatherServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FatherServiceProxy</span>(target);</span><br><span class="line"><span class="comment">// 调用代理方法</span></span><br><span class="line">proxy.deleteXXX(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>​    符合OCP原则，耦合度低.但是没有复用每个类都要新增一个代理类，类多</p></blockquote><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><blockquote><p>还是代理模式，只是新增了字节码生成技术，动态生成代理对象。减少代理类的数量</p></blockquote><p>动态代理技术：</p><ul><li>jdk内置动态代理 Proxy,只能代理接口</li><li>CGLIB动态代理技术，是一个开源库，底层是继承方式继承。性能比jdk动态代理好（底层有个小儿快的字节码处理框架 ASM）</li><li>javassist </li></ul><h5 id="jdk-动态代理"><a href="#jdk-动态代理" class="headerlink" title="jdk 动态代理"></a>jdk 动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要代理的接口 OrderService</span></span><br><span class="line"><span class="comment">// 实现类 OrderServiceImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="type">OrderService</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderServiceImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="comment">// 参数1：类加载器，和目标加载器一致</span></span><br><span class="line"><span class="comment">// 参数2：代理类要实现的接口</span></span><br><span class="line"><span class="comment">// 参数3：调用处理器，传入要增强的程序</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass.getInterfaces(), <span class="keyword">new</span> <span class="title class_">TimerInvocationHandle</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代理对象方法</span></span><br><span class="line">proxy.xxx();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerInvocationHandle</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 参数1：代理对象</span></span><br><span class="line">    <span class="comment">// 参数2：代理目标对象方法</span></span><br><span class="line">    <span class="comment">// 参数3：代理目标对象方法接收的参数</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> <span class="title function_">Throwable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">retValue</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节码增强对象</span></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhacer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"><span class="comment">// 设置目标类</span></span><br><span class="line">enhacer.setSuperclass(UserService.class);</span><br><span class="line"><span class="comment">// 设置回调</span></span><br><span class="line">enhacer.setCallback(<span class="keyword">new</span> <span class="title class_">TimerMethodInterceptor</span>());</span><br><span class="line"><span class="comment">// 创建代理</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line"><span class="comment">// 调用代理方法</span></span><br><span class="line">proxy.login();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object targrt, Method method, Object[] objcts, MethodProxy methodProxy)</span> <span class="keyword">throw</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">retValue</span> <span class="operator">=</span> methodProxy.invokeSuper(target, objects);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h3><blockquote><p>切面编程（AOP）底层就是通过动态代理来实现的，是OOP的补充和延申。</p><p>spring 的AOP 使用的代理是：jdk 的动态代理是+CGLIB动态代理技术。jdk代理接口，CGLIB代理类，自由切换，也可以设置只是用 CGLIB</p><p>具体使用场景，项目中日志模块，安全模块，事务模块，这些服务被称为交叉业务。它们都使用面向切面来实现</p></blockquote><h4 id="连接点-Joinpe"><a href="#连接点-Joinpe" class="headerlink" title="连接点 Joinpe"></a>连接点 Joinpe</h4><blockquote><p>在程序的整个执行流程中，可以织入切面的位置。方法的执行前后，异常抛出之后等位置</p></blockquote><h4 id="切点-Pointcut"><a href="#切点-Pointcut" class="headerlink" title="切点 Pointcut"></a>切点 Pointcut</h4><blockquote><p>在程序执行流程中，真正织入切面的方法。本质就是方法。一个切点对应多个连接点</p></blockquote><h4 id="通知-Advice"><a href="#通知-Advice" class="headerlink" title="通知 Advice"></a>通知 Advice</h4><blockquote><p>通知就是增强代码，就是具体要织入的代码。根据放置的位置有不同名字</p><ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知</li></ul></blockquote><h4 id="切面-Aspect"><a href="#切面-Aspect" class="headerlink" title="切面 Aspect"></a>切面 Aspect</h4><blockquote><p>切点 + 通知 就是 切面</p></blockquote><h4 id="织入"><a href="#织入" class="headerlink" title="织入"></a>织入</h4><blockquote><p>把通知应用到目标对象的过程</p></blockquote><h4 id="代理对象-proxy"><a href="#代理对象-proxy" class="headerlink" title="代理对象 proxy"></a>代理对象 proxy</h4><blockquote><p>一个目标对象被织入通知后产生的新对象</p></blockquote><h3 id="目标对象-Target"><a href="#目标对象-Target" class="headerlink" title="目标对象 Target"></a>目标对象 Target</h3><blockquote><p>被织入通知的对象</p></blockquote><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><blockquote><p>切点表达式用来定义通知往哪些方法上切入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])</span><br></pre></td></tr></table></figure><p><strong>访问控制权限修饰符</strong></p><ul><li>可选项</li><li>没写，就是4个权限都包括。</li><li>写public就表示只包括公开的方法</li></ul><p><strong>返回值类型</strong></p><ul><li>必填项。</li><li>*表示返回值类型任意</li></ul><p><strong>全限定类名</strong>:</p><ul><li>可选项</li><li>两个点”..”代表当前包以及子包下的所有类</li><li>省略时表示所有的类</li></ul><p><strong>方法名</strong></p><ul><li>必填项。</li><li>*表示所有方法</li><li>set*表示所有的set方法</li></ul><p><strong>形式参数列表</strong></p><ul><li>必填项</li><li>0表示没有参数的方法</li><li>(..)参数类型和个数随意的方法</li><li>(*)只有一个参数的方法</li><li>(*,String)第一个参数类型随意，第二个参数是String的。</li></ul><p><strong>异常</strong></p><ul><li>可选项。</li><li>省略时表示任意异常类型</li></ul><p><strong>service包下所有的类以delete开始的所有方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> * com.xxx.service.*.delete*(..))</span><br></pre></td></tr></table></figure><h4 id="使用spring-的AOP"><a href="#使用spring-的AOP" class="headerlink" title="使用spring 的AOP"></a>使用spring 的AOP</h4><ol><li>spring 框架结合Aspectj 框架 实现的AOP，基于注解方式</li><li>spring 框架结合Aspectj 框架 实现的AOP，基于XML方式</li><li>spring 框架自己实现的AOP（基本不用）</li></ol><blockquote><p>准备依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring-context</span><br><span class="line">spring-aop</span><br><span class="line">spring-aspects</span><br></pre></td></tr></table></figure><p>spring 配置context，aop命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line"></span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/context/spring-context.xsd</span><br><span class="line">http://www.springframework.org/schema/aop http://www.springframework.org/aop/spring-aop.xsd</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring.bean.service&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  开启aspectj 的自动代理</span></span><br><span class="line"><span class="comment">    proxy-target-class: true 表示CGLIB动态代理，反之jdk动态代理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>目标对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在登录！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 切面 = 通知 + 切点</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.spring.bean.service.LoginService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">LoginService</span> <span class="variable">loginService</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;loginService&quot;</span>, LoginService.class);</span><br><span class="line">loginService.login();</span><br></pre></td></tr></table></figure></blockquote><p>前置通知: @Before 目标方法执行之前的通知</p><p>后置通知:@AfterReturning 目标方法执行之后的通知</p><p>环绕通知: @Around 目标方法之前添加通知，同时目标方法执行之后添加通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.powernode.spring6.service..*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;前环绕&quot;</span>);</span><br><span class="line">joinPoint.proceed();</span><br><span class="line">System.out.println(<span class="string">&quot;后环绕&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常通知:@AfterThrowing 发生异常之后执行的通知</p><p>最终通知: @After 放在finally语句块中的通知</p><h4 id="多个切面的执行顺序"><a href="#多个切面的执行顺序" class="headerlink" title="多个切面的执行顺序"></a>多个切面的执行顺序</h4><blockquote><p>给切面类添加注解 @Order(1)。 其中数字越小，执行越靠前</p></blockquote><h4 id="通用切点"><a href="#通用切点" class="headerlink" title="通用切点"></a>通用切点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commomPoint</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 代码复用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;commomPoint()&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="AOP-之连接点"><a href="#AOP-之连接点" class="headerlink" title="AOP 之连接点"></a>AOP 之连接点</h4><blockquote><p>除了 环绕通知外，其他通知都可以接受 ( JoinPoint joinPoint ){}.\</p><p>通过 joinPoint 可以拿到 joinPoint签名 获取目标方法的信息</p></blockquote><h4 id="全注解方式开发"><a href="#全注解方式开发" class="headerlink" title="全注解方式开发"></a>全注解方式开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.powernode.spring6.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于XML的方式开发"><a href="#基于XML的方式开发" class="headerlink" title="基于XML的方式开发"></a>基于XML的方式开发</h4><blockquote><p>了解一下配置文件方式开发</p></blockquote><p>配置文件：添加 aop,context 命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.LoginService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xxx.LogAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--切点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mypointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.powernode.spring6.service..*(..))&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切面： 通知+切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAspect&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeLogin&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;mypointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目标对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在登录！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 切面 = 通知 + 切点</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.spring.bean.service.LoginService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编程式事务解决方法"><a href="#编程式事务解决方法" class="headerlink" title="编程式事务解决方法"></a>编程式事务解决方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.spring.bean.service.LoginService.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arroundAdvice</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 前环绕</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标</span></span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        <span class="comment">// 后环绕</span></span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;回滚事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AOP的实际案例：安全日志"><a href="#AOP的实际案例：安全日志" class="headerlink" title="AOP的实际案例：安全日志"></a>AOP的实际案例：安全日志</h4><blockquote><p>项目开发结束，上线了。运行正常。客户提出新需求，凡是在系统中经行增删改操作的，都要把这个人的记录下来。因为这几个操作是危险的</p></blockquote><p>切面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.log.service.UserService.save*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savePointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.log.service.UserService.delete*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deletePointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.log.service.UserService.modify*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyPointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;savePointcut()||deletePointcut()||modifyPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">nowTime</span> <span class="operator">=</span> format.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(nowTime + <span class="string">&quot;张三&quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUSer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增用户信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUSer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyUSer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改用户信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUSer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取用户信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring事务"><a href="#spring事务" class="headerlink" title="spring事务"></a>spring事务</h3><p>编程式事务：通过编写代码的方式来实现</p><p>声明式事务：基于注解，基于XML两种方式</p><blockquote><p>spring 底层通过AOP方式对事务进行了封装。所以spring专门针对事务开发了一套API</p><p>spring6中有他的两个实现</p><ul><li>DataSourceTransactionManager： 支持jdbcTemplate,Mybatis,Hibenate等事务管理</li><li>JtaTransactionManager: 支持分布式事务管理</li></ul></blockquote><h4 id="基于注解的事务管理："><a href="#基于注解的事务管理：" class="headerlink" title="基于注解的事务管理："></a>基于注解的事务管理：</h4><p>配置任务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<strong>tx</strong>命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span><br></pre></td></tr></table></figure><p>开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类上，方法上使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfor</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解参数详情（声明式事务管理参数配置）</p><p>1、propagation：事务的传播行为<br>    当一个事务方法被另一个事务方法调用的时候，这个事务方法如何进行<br>    事务的传播行为可以由传播属性指定，spring定义了7种类传播行为</p><ul><li>REQUIRED: 支持当前事务，如果不存在就新建一个默认)[<strong>没有就新建，有就加入</strong>]</li><li>SUPPORTS: 支持当前事务，如果当前没有事务，就以非事务方式执行[<strong>有就加入，没有就不管了</strong>]</li><li>MANDATORY:必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常[<strong>有就加入，没有就抛异常</strong>]</li><li>REQUIRES NEW:开启一个的务，如果一个事务已经存在，则将这存在的事务挂起[<strong>不营有没有，直接开启一新务，开启的新事务和之前的事务不存在套关系，之前事务按起</strong>]</li><li>NOT_SUPPORTED: 以非事务方式运行，如果有事务存在，挂起当前事务[<strong>不支持事务，存在就挂起</strong>]</li><li>NEVER: 以非事务方式运行，如果有事务存在，抛出异常[<strong>不支持事务，存在就抛异常]如果外层事务不存在，行为就像REQUIRED一样</strong>]</li><li>NESTED:如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。样。[<strong>有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。</strong>]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><p>2、ioslation:事务隔离级别<br>    （1）事务有特性称为隔离性，多事务操作之间不会产生影响，不考虑隔离性产生很多问题<br>    （2）不考虑隔离性则存在三个问题：脏读、不可重复读、虚（幻）读<br>    （3）脏读：一个未提交事务读取到另一个未提交事务的数据<br>    （4）不可重复读：一个未提交事务读取到另一个提交事务修改数据<br>    （5）幻读：一个未提交事务读取到另一提交事务添加数据<br>    （6）通过设置事务隔离性，解决读问题</p><p>3、timeout：超时时间<br>    （1）事务需要在一定时间内（<strong>代码最后一条DML方法执行完加上之前的时间</strong>）进行提交，如果不提交则进行回滚<br>    （2）默认值是-1，设定时间以秒为单位计算</p><p>4、readOnly：是否只读【里面不会执行增删改操作，设置后spring会启动优化策略，提高select语句执行效率】<br>    （1）读：查询操作，写：添加修改删除操作<br>    （2）readOnly默认设置为false，表示可以查询，可以添加修改删除操作<br>    （3）设置为true后，只能查询</p><p>5、rollbackFor：回滚<br>    （1）设置出现哪些异常进行事务回滚</p><p>6、norollbackFor：不回滚<br>    （1）设置出现哪些异常不进行事务回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出现 RuntimeException 异常或子类异常不回滚</span></span><br><span class="line"><span class="meta">@Transaction(norollbackFor = RuntimeException.clas)</span></span><br></pre></td></tr></table></figure><h4 id="全注解式事务开发"><a href="#全注解式事务开发" class="headerlink" title="全注解式事务开发"></a>全注解式事务开发</h4><p>xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--  开启aspectj 的自动代理</span></span><br><span class="line"><span class="comment">        proxy-target-class: true 表示CGLIB动态代理，反之jdk动态代理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 主要下面配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  开启bean自动扫描注册  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bank&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--  配置数据源  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb01&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 jdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动器 对应注解 EnableTransactionManagement--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 代spring.xml配置文件，在这个类当中完成配置</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.powernode.bank&quot;)</span> <span class="comment">// 组件打描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;</span><br><span class="line"><span class="comment">// Spring框架，看到这个Bean注解后，会调用这个被标注的方法，这个方法的返回值是一个java对象，这个java对象会自动的入IOC容器管理返回的对象就是Spring容器当中的一个Bean 了。并且这个bean的名字是: dataSource</span></span><br><span class="line">    <span class="meta">@Bean(name =&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverclassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring6&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="meta">@Bean(name=&quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;<span class="comment">// spring 在调用此方法时会自动注入</span></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jt.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> tj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(name=&quot;transactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> &#123;<span class="comment">// spring 在调用此方法时会自动注入</span></span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dt.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dj;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Config.class):</span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">jt</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br></pre></td></tr></table></figure><h4 id="基于XML的事务管理"><a href="#基于XML的事务管理" class="headerlink" title="基于XML的事务管理"></a>基于XML的事务管理</h4><blockquote><p>但实际开发一般都是注解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  开启aspectj 的自动代理</span></span><br><span class="line"><span class="comment">    proxy-target-class: true 表示CGLIB动态代理，反之jdk动态代理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主要下面配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  开启bean自动扫描注册  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bank&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置数据源  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb01&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 jdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManagen&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc .datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置通知，具体的增强代码。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManagen&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知的相关属件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--之前所讲的所有的事务属性都可以在以下标签中配置。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;uodate*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切面--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.powernode.bank.service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面 = 通知 + 切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring对Junit4-的支持"><a href="#Spring对Junit4-的支持" class="headerlink" title="Spring对Junit4 的支持"></a>Spring对Junit4 的支持</h3><h4 id="注解加载指定spring-xml"><a href="#注解加载指定spring-xml" class="headerlink" title="注解加载指定spring.xml"></a>注解加载指定spring.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从类路径加载</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTestJUnit4</span>() &#123;</span><br><span class="line">    <span class="comment">// 自动从配置文件注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代替下面代码</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br></pre></td></tr></table></figure><p>Spring对Junit5 的支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// spring 对junit支持的依赖</span><br><span class="line">spring-test</span><br><span class="line"></span><br><span class="line">// junit5</span><br><span class="line">junit-jupiter</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从类路径加载</span></span><br><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTestJUnit4</span>() &#123;</span><br><span class="line">    <span class="comment">// 自动从配置文件注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-集成-myBatis"><a href="#spring-集成-myBatis" class="headerlink" title="spring 集成 myBatis"></a>spring 集成 myBatis</h3><p>1、依赖</p><ul><li>spring-context</li><li>spring-jdbc</li><li>mysq驱动</li><li>mybatis</li><li>mybatis-spring: mybatis提供的与spring框架集成的依赖</li><li>德鲁伊连接池</li><li>junit</li></ul><p>2、建包</p><ul><li>service <ul><li>AccountService</li></ul></li><li>service .impl<ul><li>AccountServiceImpl</li></ul></li><li>mapper<ul><li>AccountMapper</li></ul></li><li>pojo<ul><li>Account</li></ul></li></ul><p>3、配置 spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  开启bean自动扫描注册  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;bank1.service&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  开启aspectj 的自动代理</span></span><br><span class="line"><span class="comment">        proxy-target-class: true 表示CGLIB动态代理，反之jdk动态代理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  引入外部属性文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置数据源  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置 SqlSessionFactoryBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mybatis 核心配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bank1.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  开启Mapper 扫描配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bank1.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    注解驱动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb01</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>mybatis.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AccountMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;bank1.mapper.AccountMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update t_act set  balance=#&#123;balance&#125; where actno=#&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByActno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_act where actno = #&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="XML配置文件中引入外部XML"><a href="#XML配置文件中引入外部XML" class="headerlink" title="XML配置文件中引入外部XML"></a>XML配置文件中引入外部XML</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;common.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是OCP？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OCP是软件开发的七大开发原则：开闭原则&lt;/p&gt;
&lt;p&gt;核心：其他6个原则的基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OCP开闭原则核心是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要你在扩展功能的时候，没有修改以前写好的代码，那么就是符合OCP原则的，反之则违背了OCP原则    &lt;/p&gt;
&lt;p&gt;当系统功能拓展时，如果动了之前稳定的程序，修改了之前的程序。之前所有程序都需要测试，这是不想看到的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;违背依赖倒置原则（DIP原则）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上依赖下就是违背&lt;/strong&gt;：如：表示层依赖服务层，服务层依赖持久层&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;控制反转&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一种编程思想。或设计模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不在程序中采用硬编码方式来 new 对象&lt;/li&gt;
&lt;li&gt;不在程序中采用硬编码方式来 维护对象关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Spring框架&quot;&gt;&lt;a href=&quot;#Spring框架&quot; class=&quot;headerlink&quot; title=&quot;Spring框架&quot;&gt;&lt;/a&gt;Spring框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Spring框架实现了控制反转IoC这种思想&lt;ul&gt;
&lt;li&gt;spring帮你new对象&lt;/li&gt;
&lt;li&gt;spring帮你维护对象关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring 时一个实现了IoC思想的容器&lt;ul&gt;
&lt;li&gt;依赖注入的两种方式（依赖注入时现实IoC的具体实现: XML解析+工厂模式+反射机制）&lt;ul&gt;
&lt;li&gt;set 注入(执行set给属性赋值)&lt;/li&gt;
&lt;li&gt;构造方法 注入(执行构造方法给属性赋值)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230217170739281.png&quot; alt=&quot;image-20230217170739281&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="spring基础" scheme="https://wyf195075595.github.io/tags/spring%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>maven基础</title>
    <link href="https://wyf195075595.github.io/2023/02/14/programming/java/maven/"/>
    <id>https://wyf195075595.github.io/2023/02/14/programming/java/maven/</id>
    <published>2023-02-14T03:20:00.000Z</published>
    <updated>2023-03-08T13:43:44.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目管理器，可以帮我们做什么？"><a href="#项目管理器，可以帮我们做什么？" class="headerlink" title="项目管理器，可以帮我们做什么？"></a>项目管理器，可以帮我们做什么？</h3><blockquote><ul><li>管理jar 文件</li><li>自动下载jar和他的文档源码</li><li>管理jar直接的依赖，a.jar 依赖b.jar 他会自动下载b.jar</li><li>帮你管理jar的版本</li><li>帮你编译程序： java-&gt; class</li><li>帮你测试代码</li><li>帮你打包，形成jar/war 文件</li><li>帮你部署项目</li></ul></blockquote><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ol><li><p>POM</p><p> 把一个项目当作模型使用。控制maven构建项目的过程</p></li><li><p>约定的目录结构</p><p> maven项目的目录和文件和位置都是规范的</p></li><li><p>依赖仓库</p><p> 管理项目可以使用的jar</p></li><li><p>仓库管理</p><p> 资源存放的位置</p></li><li><p>生命周期</p></li><li><p>插件和木比爱哦</p></li><li><p>继承</p></li><li><p>聚合</p></li></ol><h3 id="修改本机资源存放目录位置"><a href="#修改本机资源存放目录位置" class="headerlink" title="修改本机资源存放目录位置"></a>修改本机资源存放目录位置</h3><p>修改maven的配置文件，maven的安装目录/conf/settings.xml</p><p>为啥要改？因为默认放在C盘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D://maven//localSpace&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><blockquote><p>本地仓库：就是存放maven使用的jar和我们项目使用的jar</p><p>远程仓库：</p><p>中央仓库【mvenrepository.com】：所有开发人员共享的    集中仓库，为了避免服务器压力过大，出现了很多镜像仓库，分布在世界各个位置。我们最好访问离自己近的仓库，访问会比较快</p><p>私服：</p><p>在公司内部，局域网中使用，不对外使用</p></blockquote><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><blockquote><p>项目对象模型</p></blockquote><ol><li><p>坐标：唯一值，标识项目唯一</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>公司域名倒写<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>自定义项目名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>自定义版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>dependencies 依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 里面存放所有依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>公司域名倒写<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>自定义项目名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>自定义版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>properties: 设置属性</p></li><li><p>build: 构建相关</p></li></ol><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ol><li>mvn clean 清理打包文件</li><li>mvn package  打包</li><li>mvn install   安装主程序</li><li>mvn deploy  部署主程序</li><li>mvn compile  编译主程序</li></ol><h3 id="编译插件配置"><a href="#编译插件配置" class="headerlink" title="编译插件配置"></a>编译插件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        // 插件名</span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        // 插件版本</span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            // jdk1.8 环境写的代码</span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            // 运行环境 jdk 1.8</span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;项目管理器，可以帮我们做什么？&quot;&gt;&lt;a href=&quot;#项目管理器，可以帮我们做什么？&quot; class=&quot;headerlink&quot; title=&quot;项目管理器，可以帮我们做什么？&quot;&gt;&lt;/a&gt;项目管理器，可以帮我们做什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;管理jar 文件&lt;/li&gt;
&lt;li&gt;自动下载jar和他的文档源码&lt;/li&gt;
&lt;li&gt;管理jar直接的依赖，a.jar 依赖b.jar 他会自动下载b.jar&lt;/li&gt;
&lt;li&gt;帮你管理jar的版本&lt;/li&gt;
&lt;li&gt;帮你编译程序： java-&amp;gt; class&lt;/li&gt;
&lt;li&gt;帮你测试代码&lt;/li&gt;
&lt;li&gt;帮你打包，形成jar/war 文件&lt;/li&gt;
&lt;li&gt;帮你部署项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;POM&lt;/p&gt;
&lt;p&gt; 把一个项目当作模型使用。控制maven构建项目的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;约定的目录结构&lt;/p&gt;
&lt;p&gt; maven项目的目录和文件和位置都是规范的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依赖仓库&lt;/p&gt;
&lt;p&gt; 管理项目可以使用的jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;仓库管理&lt;/p&gt;
&lt;p&gt; 资源存放的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生命周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件和木比爱哦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;聚合&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;修改本机资源存放目录位置&quot;&gt;&lt;a href=&quot;#修改本机资源存放目录位置&quot; class=&quot;headerlink&quot; title=&quot;修改本机资源存放目录位置&quot;&gt;&lt;/a&gt;修改本机资源存放目录位置&lt;/h3&gt;&lt;p&gt;修改maven的配置文件，maven的安装目录/conf/settings.xml&lt;/p&gt;
&lt;p&gt;为啥要改？因为默认放在C盘&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;localRepository&amp;gt;D://maven//localSpace&amp;lt;/localRepository&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="maven基础" scheme="https://wyf195075595.github.io/tags/maven%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mybatis 基础</title>
    <link href="https://wyf195075595.github.io/2023/02/14/programming/java/myBatis/"/>
    <id>https://wyf195075595.github.io/2023/02/14/programming/java/myBatis/</id>
    <published>2023-02-13T17:20:00.000Z</published>
    <updated>2023-03-08T00:17:00.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><blockquote><p>O (Object) jvm中的对象</p><p>R (Relational) 关系型数据库</p><p>M (Mapping) 映射</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230214134743208.png" alt="image-20230214134743208"></p><ol><li>支持定制化 SQL、存储过程、基本映射以及高级映射</li><li>避免了几乎所有的JDBC代码中手动设置参数以及获取结果集</li><li>支持XML开发，也支持注解式开发。[为了保证sql语句的灵活，所以mybatis大部分是采用XML方式开发。]</li><li>将接口和Java 的 POJOs(Plain rdinary Java Object，简单普通的Java对象)映射成数据库中的记录体积小好学: </li><li>两个jar包，两个XML配置文件。</li><li>完全做到sal解耦合</li><li>提供了基本映射标签</li><li>提供了高级映射标签</li><li>提供了XML标签，支持动态SQL的编写</li></ol><span id="more"></span><h3 id="开发第一个-Mybatis-程序"><a href="#开发第一个-Mybatis-程序" class="headerlink" title="开发第一个 Mybatis 程序"></a>开发第一个 Mybatis 程序</h3><ol><li><p>resources目录:<br> 放在这个目录当中的，一般都是资源文件，配置文件，直接放到resources目录下的资源，等同于放到了类的根路径下。</p></li><li><p>开发步骤</p><ul><li><p>第一步:打包方式jar</p></li><li><p>第二步:引入依赖</p><ul><li>mybatis依赖</li><li>mysgl驱动依赖</li></ul></li><li><p>第三步:编写mybatis核心配置文件: mybatis-config.xml大</p><blockquote><p>注意:</p><ul><li>第一: 这个文件名不是必须叫做mybatis-config.xml，可以用其他的名字。只是大家都采用这个名字.</li><li>第二:这个文件存放的位置也不是固定的，可以随意，但一般情况下，会放到类的根路径下。</li></ul></blockquote></li></ul></li><li><p>从XML 中构建 SglSessionFactory通过官方的这句话，</p><blockquote><p>你能想到什么呢?</p><p>​    第一:在MyBatis中一定是有一个很重要的对象，这个对象是: SqlSessionFactory对象。</p><p>​    第二: SqlSessionFactory对象的创建需要XML。XML是什么?<br>它一定是一个配置文件</p></blockquote></li><li><p>mybatis中有两个主要的配置文件:</p><blockquote><p>其中一个是: <strong>mybatis-config.xml</strong>，这是核心配置文件，主要配置连接数据库的信息等。（一个）</p><p>另一个是: <strong>XxxxMapper.xml</strong>，这个文件是专门用来编写SQL语句的配置文件。（每个表一个）</p><p>在resources 目录下新建，前者引用后者</p></blockquote></li></ol><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a><strong>mybatis-config.xml</strong></h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>), <span class="string">&quot;指定的环境&quot;</span>);</span><br></pre></td></tr></table></figure><p>事务管理：transactionManager.type = “JDBC” / “MANAGED”</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mydb01&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   resource从类的根路径查找     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CatMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据源-dataSource"><a href="#数据源-dataSource" class="headerlink" title="数据源(dataSource)"></a>数据源(dataSource)</h4><blockquote><p>为程序提供 Connection 对象。此规范是jdk规定的（要实现 javax.sql.DataSource）</p><p>​        dataSource.type=”POOLED” 实际是在指定数据库的连接池。 此外还有（druid,c3p0,dbcp…）</p><p><a href="https://mybatis.net.cn/configuration.html#environments">官方中文文档</a></p></blockquote><h4 id="mybatis-自带的数据源："><a href="#mybatis-自带的数据源：" class="headerlink" title="mybatis 自带的数据源："></a><strong>mybatis 自带的数据源</strong>：</h4><ul><li>UNPOOLED：不使用数据库连接池技术，每次请求都是创建新的Connection对象</li><li>POOLED：使用mybatis自己实现的数据库连接池</li><li>JNDI：集成其他第三方数据库连接池</li></ul><h4 id="JNDI-是一套规范，谁实现了它？"><a href="#JNDI-是一套规范，谁实现了它？" class="headerlink" title="JNDI 是一套规范，谁实现了它？"></a>JNDI 是一套规范，谁实现了它？</h4><blockquote><p>大部分web容器都实现了它，如 tomcat, webLogic, Jetty, WebSphare</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initial_context&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;data_source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="连接池的配置"><a href="#连接池的配置" class="headerlink" title="连接池的配置"></a>连接池的配置</h4><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li><li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 <code>poolMaximumIdleConnections</code> 与 <code>poolMaximumLocalBadConnectionTolerance</code> 之和。 默认值：3（新增于 3.4.5）</li><li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li><li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置 <code>poolPingQuery</code> 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li><li><code>poolPingConnectionsNotUsedFor</code> – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 配置最大连接数</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolMaximumActiveConnections&quot;</span> <span class="attr">calue</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">// 每隔两秒打印日志，并尝试获取连接对象</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolTimeToWait&quot;</span> <span class="attr">calue</span>=<span class="string">&quot;2000&quot;</span>/&gt;</span></span><br><span class="line">// 强行让某个连接空闲，超时10s设置为空闲状态</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolMaximumCheckoutTime&quot;</span> <span class="attr">calue</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">空闲连接数5, 如果有6个空闲连接，会真正关闭一个空闲连接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolMaximumIdleConnections&quot;</span> <span class="attr">calue</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="properties-属性配置"><a href="#properties-属性配置" class="headerlink" title="properties 属性配置"></a>properties 属性配置</h4><blockquote></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 设置</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;home&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D://mybatis/resource/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   resource从类的根路径查找     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">path</span>=<span class="string">&quot;$&#123;home&#125;CatMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 properties 文件方式配置</p><p>在resource 目录下新建 jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb01</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>映射到 mybatis-config.xml 中 property 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;123456&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CatMapper-xml"><a href="#CatMapper-xml" class="headerlink" title="CatMapper.xml"></a><strong>CatMapper.xml</strong></h3><blockquote><p>namespace 指定命名空间，那么多个mapper 文件出现相同的id也不会冲突了</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line">        insert into t_car(id, car_num,brand,guide_price, produce_time, car_type)</span><br><span class="line">        values(null, &#x27;1003&#x27;, &#x27;丰田霸道&#x27;,30.0,&#x27;2000-10-11&#x27;,&#x27;燃油车&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="程序-CatMapper-xml-中的-insert-语句"><a href="#程序-CatMapper-xml-中的-insert-语句" class="headerlink" title="程序 CatMapper.xml 中的 insert 语句"></a>程序 CatMapper.xml 中的 insert 语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span>  <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 sqlSessionFactoryBuilder</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">// 获取 SqlSessionFactory</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory1</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    <span class="comment">// 获取 SqlSession 对象</span></span><br><span class="line">    sqlSession = sqlSessionFactory1.openSession();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">    <span class="comment">// 手动提交</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    sqlSession.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>细节：</p><p>mybatis 中sql语句可以省略 ”；“</p><p>Resource.getResourceAsStream() 是从 类路径下查找，大部分resource都是这样的</p><p>Resource.getResourceAsStream 底层实际上调用的是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Classloader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;xxx.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>核心配置文件名字不一定非的是 mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 类路径</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CatMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">// 绝对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">utl</span>=<span class="string">&quot;file:///d:/CatMapper.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="mybatis-事务管理机制"><a href="#mybatis-事务管理机制" class="headerlink" title="mybatis 事务管理机制"></a>mybatis 事务管理机制</h3><blockquote><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// mybatis自己采用原生JDBC方式管理事务</span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">// mybatis 不在负责事务，交给其他容器管理。如：spring</span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="封装-SqlSession-对象"><a href="#封装-SqlSession-对象" class="headerlink" title="封装 SqlSession 对象"></a>封装 SqlSession 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">// 防止 new 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SqlSessionUtil</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载时，解析mtbatis-config.xml 文件。创建 SqlSessionFactory 对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取会话对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">openSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Mybatis-日志"><a href="#Mybatis-日志" class="headerlink" title="Mybatis 日志"></a>Mybatis 日志</h3><blockquote><p>settings 标签要出现在 environments 标签之前，STDOUT_LOGGING 为 mybatis 自己实现的日志格式，其他格式需要引入第三方库 如 SLF4J</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="集成logback-日志框架"><a href="#集成logback-日志框架" class="headerlink" title="集成logback 日志框架"></a>集成logback 日志框架</h4><ol><li><p>pom 中引入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件 logback.xml/logback-test.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  控制台输出  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">        %msg: 日志消息，%n 换行符  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  mybatis log configure  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.apache.ibatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;TRACE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.Statement&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.PreparedStatement&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql.Connection&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  日志输出级别， TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-mybatis-完成CRUD"><a href="#使用-mybatis-完成CRUD" class="headerlink" title="使用 mybatis 完成CRUD"></a>使用 mybatis 完成CRUD</h3><blockquote></blockquote><ol><li><p>C：Create 增</p><p> 使用 #{} 代价 ？占位符。 执行 sqlSessqion.insert() 时可传入一个Map集合,此时 #{map集合的key}</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCar&quot;</span>&gt;</span></span><br><span class="line">    insert into t_car(id, car_num,brand,guide_price, produce_time, car_type)</span><br><span class="line">    values(null, #&#123;&#125;, #&#123;&#125;,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 建立 pojo类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 建议使用包装类，防止NULL问我呢提</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String carNum;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Double guidePrice;</span><br><span class="line">    <span class="keyword">private</span> String produceTime;</span><br><span class="line">    <span class="keyword">private</span> String carType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(Long id, String carNum, String brand, Double guidePrice, String produceTime, String carType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.carNum = carNum;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.guidePrice = guidePrice;</span><br><span class="line">        <span class="built_in">this</span>.produceTime = produceTime;</span><br><span class="line">        <span class="built_in">this</span>.carType = carType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, carNum=&#x27;&quot;</span> + carNum + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, guidePrice=&quot;</span> + guidePrice +</span><br><span class="line">                <span class="string">&quot;, produceTime=&#x27;&quot;</span> + produceTime + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, carType=&#x27;&quot;</span> + carType + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> carNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarNum</span><span class="params">(String carNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carNum = carNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getGuidePrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> guidePrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGuidePrice</span><span class="params">(Double guidePrice)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.guidePrice = guidePrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduceTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> produceTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProduceTime</span><span class="params">(String produceTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.produceTime = produceTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCarType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> carType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarType</span><span class="params">(String carType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carType = carType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> pojo 类实例化</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="literal">null</span>, <span class="string">&quot;3333&quot;</span>, <span class="string">&quot;保时捷&quot;</span>,<span class="number">40.0</span>,<span class="string">&quot;2020-10-12&quot;</span>,<span class="string">&quot;新能源&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行 sqlSessqion.insert() 时传入 car ,#&#123;&#125;中写pojo类的属性名</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>R:Retrieve 查</p><p> 单个查询</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCar&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    select * from t_car where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// sqlSession.selectOne(&quot;selectCar&quot;, 37)</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">老版本 mybatis 好像会有 字段对应问题 如 pojo 类中的小驼峰命名与数据库的下划线命名会导致查询不到字段的值， 查询时需要用 as 语法赋值别名与 pojo类中的一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p> 列表查询</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCarAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pojo.Car&quot;</span>&gt;</span></span><br><span class="line">    select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">List<span class="tag">&lt;<span class="name">Car</span>&gt;</span> rs = sqlSession.selectList(&quot;selectCarAll&quot;);</span><br></pre></td></tr></table></figure></li><li><p>U:Update 改</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateCar&quot;</span>&gt;</span></span><br><span class="line">update t_car set car_num=#&#123;carNum&#125;,brand=#&#123;brand&#125;,guide_price=#&#123;guidePrice&#125;,produce_time=#&#123;produceTime&#125;,car_type=#&#123;carType&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// sqlSession.update(&quot;updateCar&quot;, car)</span><br></pre></td></tr></table></figure></li><li><p>D：Delete 删</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteCar&quot;</span>&gt;</span></span><br><span class="line">    delete from t_car where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 如果#&#123;&#125; 只有一个，那么中间的属性可以随便写，最好见名知意</span><br><span class="line">sqlSession.delete(&quot;deleteCar&quot;, 37)</span><br></pre></td></tr></table></figure></li></ol><h3 id="dom4j-解析xml文件"><a href="#dom4j-解析xml文件" class="headerlink" title="dom4j 解析xml文件"></a>dom4j 解析xml文件</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   dom4j缺少的依赖包     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;settings&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;SLF4J&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/settings&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    一个环境对应一个 SqlSessionFactory 对象    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   resource从类的根路径查找     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CatMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解析xml配置文件"><a href="#解析xml配置文件" class="headerlink" title="解析xml配置文件"></a>解析xml配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadXMLTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title function_">getDocument</span><span class="params">(String url)</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">return</span>  reader.read(ClassLoader.getSystemClassLoader().getResourceAsStream(url));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parseXML</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> getDocument(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">environments</span> <span class="operator">=</span> (Element) document.selectSingleNode(<span class="string">&quot;/configuration/environments&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultId</span> <span class="operator">=</span> environments.attributeValue(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">xPath</span> <span class="operator">=</span> <span class="string">&quot;/configuration/environments/environment[@id=&#x27;&quot;</span>+defaultId+<span class="string">&quot;&#x27;]&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取 environments 中id == environments default 值 environment</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">environment</span> <span class="operator">=</span> (Element) document.selectSingleNode(xPath);</span><br><span class="line">        System.out.println(<span class="string">&quot;environment id = &quot;</span> + environment.attributeValue(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取事务类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">transactionType</span> <span class="operator">=</span> environment.element(<span class="string">&quot;transactionManager&quot;</span>).attributeValue(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;transactionType = &quot;</span> + transactionType);</span><br><span class="line">        <span class="comment">// 获取 dataSource</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">dataSource</span> <span class="operator">=</span> environment.element(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dataSourceType</span> <span class="operator">=</span> dataSource.attributeValue(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;dataSourceType = &quot;</span> + dataSourceType);</span><br><span class="line">        <span class="comment">// 获取所有 property</span></span><br><span class="line">        List&lt;Element&gt; properties = dataSource.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">        properties.forEach(property -&gt; &#123;</span><br><span class="line">            System.out.println(property.attributeValue(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;-&quot;</span>+property.attributeValue(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 获取所有 mapper</span></span><br><span class="line">        List&lt;Node&gt; nodes = document.selectNodes(<span class="string">&quot;//mapper&quot;</span>);</span><br><span class="line">        nodes.forEach(node -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> ((Element) node).attributeValue(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;resource = &quot;</span> + resource);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取某节点所有元素 某节点元素.elements();</span></span><br><span class="line">        <span class="comment">// 获取元素中的文本  element.getTextTrim();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="javassist"><a href="#javassist" class="headerlink" title="javassist"></a>javassist</h3><blockquote><p>可以在内存中生成类，接口，添加方法。。。</p><p>Dao 层的接口实现类 代码非常固定，简单。可以使用 javassist 生成实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取类池，用来生成class</span></span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="comment">// 制造类，传入类名</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;com.javassist.Test.Math&quot;</span>);</span><br><span class="line"><span class="comment">// 制造方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodCode</span> <span class="operator">=</span> <span class="string">&quot;public void insert() &#123;System.out.print(111);&#125;&quot;</span>;</span><br><span class="line"><span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtMethod.make(methodCode, ctClass);</span><br><span class="line"><span class="comment">// 将方法加入到类</span></span><br><span class="line">ctClass.addMethod(ctMethod);</span><br><span class="line"><span class="comment">// 内存中生产 class, 返回类加载</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">classMath</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类加载</span></span><br><span class="line"><span class="comment">// Class classMath = Class.forName(&quot;com.javassist.Test.Math&quot;);</span></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">cm</span> <span class="operator">=</span> classMath.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">md</span> <span class="operator">=</span> classMath.getDeclaredMethod(<span class="string">&quot;insert&quot;</span>);</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">md.invoke(cm,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>为 接口 Delete 添加 实现类 DeleteImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类池</span></span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="comment">// 制造类</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;com.javassist.impl,DeleteImpl&quot;</span>);</span><br><span class="line"><span class="comment">// 制造接口</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">anInterface</span> <span class="operator">=</span> classPool.makeInterface(<span class="string">&quot;com.javassist.Delete&quot;</span>);</span><br><span class="line"><span class="comment">// 添加接口到类  DeleteImpl implements Delete</span></span><br><span class="line">ctClass.addInterface(anInterface);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方法</span></span><br><span class="line"><span class="comment">// 制造方法</span></span><br><span class="line"><span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> CtMethod.make(<span class="string">&quot;public void delete()&#123;System.out.println(\&quot;delete\&quot;);&#125;&quot;</span>,ctClass);</span><br><span class="line"><span class="comment">// 将方法添加到类</span></span><br><span class="line">ctClass.addMethod(method);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在内存中生成类，加载到JVM</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">classzz</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line"><span class="type">Delete</span> <span class="variable">deleteDao</span> <span class="operator">=</span> (Delete)classzz.newInstance();</span><br><span class="line">deleteDao.delete();</span><br></pre></td></tr></table></figure><p>mybatis 底层使用这个方式帮我们自动生成 DAO 接口的代理类，然后实现这个类的实现类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--要想使用mapper机制，namespace 必须是对应DAO接口的包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.bank.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  要想使用mapper 机制， 语句id 必须是DAO接口的方法名  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateByActno&quot;</span>&gt;</span></span><br><span class="line">        update t_act set balance=#&#123;balance&#125; where actno = #&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByActno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bank.pojo.Account&quot;</span>&gt;</span></span><br><span class="line">        select * from t_act where actno=#&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><blockquote><p>每一个线程都有属于自己的 SqlSession ,改造 SqlSessionUtils</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">// 全局的，服务器级别的，一个服务器当中定义一个即可</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; local = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 防止 new 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SqlSessionUtil</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载时，解析mtbatis-config.xml 文件。创建 SqlSessionFactory 对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取会话对象, 使用 ThreadLocal   全局唯一</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">openSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> local.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">// 绑定线程，同一线程拿到对象一样</span></span><br><span class="line">            local.set(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭SqlSession 对象，从当前线程移出SqlSession 对象</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">            <span class="comment">// 移出SqlSession 对象和当前线程的绑定， 因为mysql有线程池</span></span><br><span class="line">            local.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mybatis-小技巧"><a href="#mybatis-小技巧" class="headerlink" title="mybatis 小技巧"></a>mybatis 小技巧</h3><h4 id="，-区别"><a href="#，-区别" class="headerlink" title="#{}，${} 区别"></a>#{}，${} 区别</h4><blockquote><p>#{}：底层使用 PreparedStatement。先编译再给SQL语句？传值。避免SQL注入</p><p>${}：底层使用 Statement。先精选SQL语句拼接，然后再对SQL 语句进行白泥一。存在SQL注入风险</p></blockquote><p>查询排序时会用到 ${}</p><p>分表查询拼接表名查询，如：t_log20201012，前端传日期，后端拼接</p><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><ol><li><p>or</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>int</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> deleteBatch(String ids);<span class="operator">/</span><span class="operator">/</span> 多id,分割</span><br></pre></td></tr></table></figure></li></ol><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> brand <span class="keyword">like</span> <span class="string">&#x27;%比亚迪%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、</span><br><span class="line"><span class="string">&#x27;%#&#123;brand&#125;%&#x27;</span></span><br><span class="line"><span class="number">2</span>、concat函数，mysql 数据库中的函数，专门字符拼接</span><br><span class="line">concat(<span class="string">&#x27;%&#x27;</span>,#&#123;brand&#125;, <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="number">3</span>、</span><br><span class="line">brand <span class="keyword">like</span> concat(<span class="string">&#x27;%&#x27;</span>,#&#123;brand&#125;, <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="number">4</span>、</span><br><span class="line">&quot;%&quot;#&#123;brand&#125;&quot;%&quot;</span><br><span class="line"></span><br><span class="line">List<span class="operator">&lt;</span>Car<span class="operator">&gt;</span> selectByBrandLike(Sreing brand);</span><br></pre></td></tr></table></figure><h4 id="别名配置"><a href="#别名配置" class="headerlink" title="别名配置"></a>别名配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    mybatis-config.xml</span></span><br><span class="line"><span class="comment">别名不区分大小写， namespace不能使用别名</span></span><br><span class="line"><span class="comment">type: 指定给哪个类型起别名</span></span><br><span class="line"><span class="comment"> alias：指定别名，省略这个属性，别名就是类的简明</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如：下面这个简明 Car</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    // package可以将此包下所有类自动起别名，默认都是类简名</span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.java.bank&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.java.bank.Car&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;aaa&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用</span></span><br><span class="line"><span class="comment">CaeMapper.xml</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCarType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Aaa&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mapper配置"><a href="#mapper配置" class="headerlink" title="mapper配置"></a>mapper配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 类的根路径下查找资源</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;xxx.xml&quot;</span> /&gt;</span></span><br><span class="line">// 绝对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///xxx.xml&quot;</span> /&gt;</span></span><br><span class="line">// 全限定接口名，必须带有包名。然后从接口名同路径查找,并且和接口名一致 (Transfer.xml)</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.java.bank.Transfer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// 将包下所有xml文件自动配置。【xml文件与接口同包下且名字相同】</span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.java.bank.mapper&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置模板文件"><a href="#配置模板文件" class="headerlink" title="配置模板文件"></a>配置模板文件</h4><blockquote><p>去 settings -》 FIle and code Template 新增模板</p><p>alt+insert 新建快捷键</p></blockquote><h4 id="使用自动生成的主键"><a href="#使用自动生成的主键" class="headerlink" title="使用自动生成的主键"></a>使用自动生成的主键</h4><blockquote><p>自动生成一条自增数据，id自增我们就不知道生成的是多少。如果我们要用到id，难道还要再查一次么？</p></blockquote><p>配置生成主键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// useGeneratedKeys: 开启使用自动生成主键</span><br><span class="line">// keyProperty：将自增主键赋值给 id 属性</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCarUseGeneratedKeys&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_car values(null, #&#123;carNum&#125;, #&#123;brand&#125;, #&#123;guidePrice&#125;, #&#123;produceTime&#125;, #&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取主键值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"><span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(CarMapper.class);</span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="literal">null</span>, <span class="string">&quot;9911&quot;</span>, <span class="string">&quot;凯美瑞&quot;</span>, <span class="number">30.0</span>, <span class="string">&quot;2020-10-10&quot;</span>);</span><br><span class="line">mapper.insertCarUseGenneratedKey(car);</span><br><span class="line"></span><br><span class="line">System.out.println(car);<span class="comment">// 会输出id xxx</span></span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h4 id="mybatis-参数处理"><a href="#mybatis-参数处理" class="headerlink" title="mybatis 参数处理"></a>mybatis 参数处理</h4><h5 id="简单类型参数"><a href="#简单类型参数" class="headerlink" title="简单类型参数"></a>简单类型参数</h5><blockquote><p>7中基本类型＋包装类+String+两种时间类型</p><p>byte,short,int,long,float,double,char</p><p>Byte,Short,Integer,Long,Float,Double,Character</p><p>String</p><p>java,util.Date, java.sql.Date</p></blockquote><p>当接口中方法参数只有一个，并且都是简单类型时。此时mybatis 可以自动推断，不用指定参数类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectById</span><span class="params">(Long id)</span>;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectByName</span><span class="params">(String name)</span>;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectByTime</span><span class="params">(Date time)</span>;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectById</span><span class="params">(<span class="type">boolean</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.openSession();</span><br><span class="line"><span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(CarMapper.class);</span><br><span class="line">mapper.selectById(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">parameterType 指定参数类型，可以省略 mybatis可以自动推断。关于类型 mtbatis 内置了很多类型的别名，可以参考中文文档</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">select * from t_student where id= #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 可以这样写，指定参数类型和字段在数据库的类型</span><br><span class="line">id=#&#123;id, javaType=String,jdbcType=VARCHAR&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="参数是-Map-类型"><a href="#参数是-Map-类型" class="headerlink" title="参数是 Map 类型"></a>参数是 Map 类型</h5><blockquote><p>mybatis 也能自动类型推断</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list&lt;Map&gt; <span class="title function_">insertStudentByMap</span><span class="params">(Map map)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Map&lt;Stirng&gt; map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.add(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">mapper.insertStudentByMap(map);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudentByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> &gt;</span></span><br><span class="line">insert into t_student(id, name,age,sex,birth,height) values(null,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;,#&#123;&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="参数是实体"><a href="#参数是实体" class="headerlink" title="参数是实体"></a>参数是实体</h5><blockquote><p>参数是一个 pojo 实体类,此时mybatis 也可以自动类型推断</p></blockquote><h4 id="参数之多参数"><a href="#参数之多参数" class="headerlink" title="参数之多参数"></a>参数之多参数</h4><blockquote><p>mybatis 会创建一个数组把多个参数放进去</p><p>map.put(“arg0”, name);</p><p>map.put(“arg1”, sex);</p><p>map.put(“arg2”, xxx);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; <span class="title function_">selectByNameAndSex</span><span class="params">(String name, Chaecter sex)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByNameAndSex&quot;</span> <span class="attr">resultTpet</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    // param1,param2也行，低版本可能使用的是 #&#123;0&#125;#&#123;1&#125;</span><br><span class="line">select * from t_student where name=#&#123;arg0&#125; and sex=#&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参数之-params-注解"><a href="#参数之-params-注解" class="headerlink" title="参数之 @params 注解"></a>参数之 @params 注解</h4><blockquote><p>底层实现</p><p>map.put(“name”, “xxx”);</p><p>map.put(“sex”, “男”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; <span class="title function_">selectByNameAndSex</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;sex&quot;)</span> Chaecter sex)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByNameAndSex&quot;</span> <span class="attr">resultTpet</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">     // param1,param2也行</span><br><span class="line">select * from t_student where name=#&#123;name&#125; and sex=#&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis-查询专题"><a href="#Mybatis-查询专题" class="headerlink" title="Mybatis 查询专题"></a>Mybatis 查询专题</h3><h4 id="返回Car"><a href="#返回Car" class="headerlink" title="返回Car"></a>返回Car</h4><blockquote><p>查询返回pojo实体 Car。 模糊查询返回必须采用List 集合接收，因为可能返回多个结果。 如果单个查询用List 集合接收，这样是可以的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Car <span class="title function_">selectById</span><span class="params">(String id)</span>;</span><br><span class="line">List&lt;Car&gt;selectAll();</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 数据库的下划线命名与pojo类的小驼峰命名冲突可能返回null 值</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">select * from t_car where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回Map"><a href="#返回Map" class="headerlink" title="返回Map"></a>返回Map</h4><blockquote><p>返回map, key 是表字段名，值是对应属性值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个map</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">selectByIdRetMap</span><span class="params">(Long id)</span>;</span><br><span class="line"><span class="comment">// 返回多个map</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectByIdRetListMap</span><span class="params">(Long id)</span>;</span><br><span class="line"><span class="comment">// 返回map套map,大map键是小map的key</span></span><br><span class="line">Map&lt;Long,Map&lt;String, Object&gt;&gt; <span class="title function_">selectByIdRetBigMap</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdRetMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_car where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 这个resultType还是map</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdRetListMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIdRetBigMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h4><blockquote><p>当数据库的下划线命名与pojo类的小驼峰命名冲突可能返回null 值的情况，</p><p>普通就是在查询是添加别名，当时字段多时比较麻烦</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; <span class="title function_">selectAllByResultMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">专门定义一个结果映射指定数据库中字段名对应java pojo类的属性名对应关系</span></span><br><span class="line"><span class="comment">type: 用来指定pojo类类名</span></span><br><span class="line"><span class="comment">id: 指定resultMap的唯一标识。在select标签carResultMap中使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;carResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;car&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">// 如果有主键用此标签配置，可以提高mybatis执行效率</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">// property pojo类中字段名</span><br><span class="line">// column 数据库字段名</span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">     // 如果两个属性值相同可以省略</span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;carType&quot;</span> <span class="attr">column</span>=<span class="string">&quot;car_type&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllByResultMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;carResultMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启驼峰命名自动映射"><a href="#开启驼峰命名自动映射" class="headerlink" title="开启驼峰命名自动映射"></a><strong>开启驼峰命名自动映射</strong></h4><blockquote><p>java命名：小驼峰   eg: myMethodPost</p><p>mysql命名：将小驼峰改为 下划线：my_method_post</p></blockquote><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUndersourceToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回总记录条数"><a href="#返回总记录条数" class="headerlink" title="返回总记录条数"></a>返回总记录条数</h4><blockquote><p>查询所有，但是要返回总记录条数</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">select count(*) from t_car</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><blockquote><p>需要拼接sql  如批量删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> id 数组是动态的</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_car <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3.</span>..)</span><br></pre></td></tr></table></figure></blockquote><h4 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; <span class="title function_">selectByMultiCondition</span> <span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@Param(&quot;brand&quot;)</span> String brand, </span></span><br><span class="line"><span class="params">    <span class="meta">@Param(&quot;guidePrice&quot;)</span> Double guidePrice, </span></span><br><span class="line"><span class="params">    <span class="meta">@Param(&quot;carType&quot;)</span> String carType</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- test 属性是必须的， true拼接，false不拼接</span></span><br><span class="line"><span class="comment">不能使用 &amp;&amp; 使用 and </span></span><br><span class="line"><span class="comment">加上 1=1 为了防止where 后边没有东西sql报错</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    select * from t_car where 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand !=&#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">        and brand like &quot;%&quot;#&#123;brand&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">    and guide_price like &quot;%&quot;#&#123;guidePrice&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">        and car_type like &quot;%&quot;#&#123;carType&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="where-标签"><a href="#where-标签" class="headerlink" title="where 标签"></a>where 标签</h4><blockquote><p>where标签的作用: 让where子句更加动态智能所有条件都为空时，where标签保证不会生成where子句.<strong>自动去除某些条件前面多余的and或or</strong>。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    select * from t_car</span><br><span class="line">    <span class="comment">&lt;!-- 专门负责where子语句动态生成--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand !=&#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand like &quot;%&quot;#&#123;brand&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            and guide_price like &quot;%&quot;#&#123;guidePrice&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            and car_type like &quot;%&quot;#&#123;carType&#125;&quot;%&quot;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h4><blockquote><p>trim标签的属性</p><ul><li>prefix:在trim标签中的语句前添加前缀</li><li>suffix: 在trim标签中的语句后添加后缀</li><li>prefixOverrides: 去掉前缀</li><li>suffixOverrides: 去掉后缀</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByMultiCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    select * from t_car</span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">prefix=&quot;where&quot;：所有子语句加前缀 where</span></span><br><span class="line"><span class="comment">    suffixOverrides=&quot;and|or&quot;：所有子语句去掉后缀 and / or</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand !=&#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand like &quot;%&quot;#&#123;brand&#125;&quot;%&quot; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            guide_price = #&#123;guidePrice&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            car_type = #&#123;carType&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set-标签"><a href="#set-标签" class="headerlink" title="set 标签"></a>set 标签</h4><blockquote><p><strong>主要使用在update语句当中</strong>，用来生成set关键字，同时去掉最后多余的 “,” 比如我们只更新提交的不为空的字段，如果提交的数据是空或者 null，那么这个字段我们将不更新。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;updateid=&quot;updateWithSet&quot;</span><br><span class="line">    update t car</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carlum != null and carNum != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            car num = #&#123;carlum&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand != null and brand != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand = #&#123;fbrand&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;guidePrice != null and guidePrice != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            guide_price = #&#123;guidePrice&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;produceTime != null and produceTime != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            produce_time = #&#123;produceTimel&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;carType != null and carType != &#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            car_type = #&#123;fcarTypel&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose when otherwise"></a>choose when otherwise</h4><blockquote><p>三个标签通常一起使用，相当于if else, 只要有一个条件成立，就结束</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">select * from t_car</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        // 只会选择一个分支</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brand !=null and brand!=&#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand like &quot;%&quot;#&#123;brand&#125;&quot;%&quot;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;carType !=null and carType!=&#x27; &#x27;&quot;</span>&gt;</span></span><br><span class="line">            car_type like &quot;%&quot;#&#123;carType&#125;&quot;%&quot;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            produce_time = #&#123;produceTimel&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="批量删除-1"><a href="#批量删除-1" class="headerlink" title="批量删除"></a>批量删除</h4><blockquote><p>使用 foreach 标签 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String[] ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1</span></span><br><span class="line"><span class="comment">collection: 指定数组/集合</span></span><br><span class="line"><span class="comment">item: 数组活集合中的元素</span></span><br><span class="line"><span class="comment">separator: 循环之间的分隔符</span></span><br><span class="line"><span class="comment">直接使用 ids 会报错，提示可以使用 array/arg, 配置@Params可以使用别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">delete from t_car where id in(</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">    #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--2--&gt;</span></span><br><span class="line">    delete from t_car where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span></span></span><br><span class="line"><span class="tag">        #&#123;<span class="attr">id</span>&#125;</span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">foreach</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--3--&gt;</span></span><br><span class="line">    delete from t_car where id</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">#&#123;id&#125;</span></span></span><br><span class="line"><span class="tag">    &lt;/<span class="attr">foreach</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;cars&quot;)</span> List&lt;Car&gt; cars)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">insert into t_car(&quot;id&quot;, &quot;brand&quot;, &quot;product_price&quot;) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;cars&quot;</span> <span class="attr">item</span>=<span class="string">&quot;car&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> &gt;</span></span><br><span class="line">        (null, #&#123;car.brand&#125;, #&#123;car.productPrice&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="sql标签，include标签"><a href="#sql标签，include标签" class="headerlink" title="sql标签，include标签"></a>sql标签，include标签</h4><blockquote><p>sql标签用来声明sql片段，include标签用来将声明的sql片段包含到某个sql语句中</p><p>提高代码复用性</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;yy&quot;</span> &gt;</span></span><br><span class="line">brand,productPrice</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xx&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;yy&quot;</span>&gt;</span> from t_car where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据库高级映射"><a href="#数据库高级映射" class="headerlink" title="数据库高级映射"></a>数据库高级映射</h3><h4 id="多对一映射"><a href="#多对一映射" class="headerlink" title="多对一映射"></a>多对一映射</h4><p>t_stu</p><table><thead><tr><th>sid</th><th>sname</th><th>cid</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1000</td></tr><tr><td>2</td><td>李四</td><td>1000</td></tr><tr><td>3</td><td>王五</td><td>1001</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="keyword">private</span> Clazz clazz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>t_class</p><table><thead><tr><th>cid</th><th>cname</th></tr></thead><tbody><tr><td>1000</td><td>高三一班</td></tr><tr><td>1001</td><td>高三二班</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">查询学生带出对应的班级信息</span></span><br><span class="line"><span class="comment">1、一条SQL，级联属性映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuRsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;clazz.cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;clazz.cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuRsMap&quot;</span>&gt;</span></span><br><span class="line">select s.sid, s.sname, c.cid, c.cname</span><br><span class="line">    from t_stu</span><br><span class="line">    left join t_clazz c</span><br><span class="line">    on s.cid = c.cid</span><br><span class="line">    where s.sid = #&#123;sid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">查询学生带出对应的班级信息</span></span><br><span class="line"><span class="comment">2、一条SQL，association</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuAssociationRsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> &gt;</span></span><br><span class="line">    // sname同名省略</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">association:关联，一个student对象关联一个Clazz最小</span></span><br><span class="line"><span class="comment">property： 提供要映射的POJO类</span></span><br><span class="line"><span class="comment">javaType: 用来指定要映射的java类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;claszz&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuAssociationRsMap&quot;</span>&gt;</span></span><br><span class="line">select s.sid, s.sname, c.cid, c.cname</span><br><span class="line">    from t_stu</span><br><span class="line">    left join t_clazz c</span><br><span class="line">    on s.cid = c.cid</span><br><span class="line">    where s.sid = #&#123;sid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">查询学生带出对应的班级信息</span></span><br><span class="line"><span class="comment">3、两条SQL，多对一分布查询（可复用，支持懒加载）</span></span><br><span class="line"><span class="comment">开启懒加载：fetchType=&quot;lazy&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuStepRsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;claszz&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Clazz&quot;</span> <span class="attr">select</span>=<span class="string">&quot;xxx.selectStep2&quot;</span> <span class="attr">clumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStepById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuStepRsMap&quot;</span>&gt;</span></span><br><span class="line">select sid,sname,cid from t_stu where sid=#&#123;sid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 另一个xml文件中的 查询方法</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStep2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启用全局懒加载"><a href="#启用全局懒加载" class="headerlink" title="启用全局懒加载"></a>启用全局懒加载</h4><blockquote><p>信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><blockquote><p>一对多，一在前，一是主表，多是副表</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; stus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">查询班级带出对应的学生信息</span></span><br><span class="line"><span class="comment">1、</span></span><br><span class="line"><span class="comment">collection </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;clazzRsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Clazz&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">ofType: 指定集合当中的元素类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;stus&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCollection&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">select c.id,c.name,s.sid,s.sname </span><br><span class="line">    from t_clazz</span><br><span class="line">    left join t_stu s</span><br><span class="line">    on c.cid = s.cid</span><br><span class="line">    where c.cid = #&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">查询班级带出对应的学生信息</span></span><br><span class="line"><span class="comment">2、</span></span><br><span class="line"><span class="comment">分布查询</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stuStepRsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;stus&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectStep2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStepById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stuStepRsMap&quot;</span>&gt;</span></span><br><span class="line">select cname,cid from t_clazz where cid=#&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 另一个xml文件中的 查询方法</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStep2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from t_stu where cid=#&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mybatis-缓存"><a href="#mybatis-缓存" class="headerlink" title="mybatis 缓存"></a>mybatis 缓存</h3><blockquote><p>执行SQL 查询的时候，将查询结果放到缓存中。如果下次还是执行完全相同的sql语句。直接从缓存拿，不从硬盘找数据</p></blockquote><p>mybatis 缓存包括</p><ol><li><p>一级缓存：将查询数据存到SqlSession 对象 , 针对当前会话，默认开启</p><p> 只要两次调用相同sql查询。</p><p> <strong>啥时候以及缓存失败？</strong></p><p> 第一次DQL和第二次DQL之间做了下面任意一件事，都会清空一级缓存</p><ul><li>执行　sqlSession,cleanChache()</li><li>执行 insert,delete,update 任意一个语句</li></ul></li><li><p>二级缓存: 将查询数据存到SqlSessionFactory  针对所有会话</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1、 默认就是 true 无需全局配置</span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;chachceEnable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">//2、 使用二级缓存的mapper.xml文件需局部配置 <span class="tag">&lt;<span class="name">cache</span> /&gt;</span></span><br><span class="line">//3、 使用二级缓存的实体类必须是可序列化，既必须实现 java.io.Serializable</span><br><span class="line">//4、 Sqlsession 对象关闭或提交后，一级缓存数据在会被写到二级缓存</span><br></pre></td></tr></table></figure></li><li><p>第三方缓存，三级缓存：三级缓存是用来代替mybatis 自带的二级缓存</p><p> 常见：EhCache,Memcache</p></li></ol><h3 id="myBatis-逆向工程"><a href="#myBatis-逆向工程" class="headerlink" title="myBatis 逆向工程"></a>myBatis 逆向工程</h3><blockquote><p>所谓的逆向工程是: <strong>根据数据库表</strong>逆向生成<strong>Java的pojo类</strong>，<strong>SalMapperxml文件</strong>，以及<strong>Mapper接口类</strong>等.</p><p>要完成这个工作，需要借助别人写好的逆向工程插件。</p><p>思考:使用这个插件的话，需要给这个插件配置哪些信息?</p><ul><li>·pojo类名、包名以及生成位置.</li><li>SglMapper.xml文件名以及生成位置<br>  ·</li><li>Mapper接口名以及生成位置。</li><li>连接数据库的信息。</li><li>指定哪些表参与逆向工程</li></ul></blockquote><p>新建一个maven项目</p><p>修改 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定制构建过程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可配置多个插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--其中的一个插件: mybatis逆向工程插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--插件的GAV坐标--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--允许覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--插件的依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysgl驱动依赖--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysgl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新增 generatorConfig.xml，放在类的根路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0” encoding=&quot;</span>UTF-8<span class="string">&quot;?&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span></span><br><span class="line"><span class="string"><span class="meta">PUBLIC&quot;</span>-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">&quot;</span>http://mybatis.org/dtd/mybatis-generator-config 1 0.dtd<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;generatorConfiguration&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;!--</span></span></span><br><span class="line"><span class="string"><span class="meta">    targetRuntime有两个值 :</span></span></span><br><span class="line"><span class="string"><span class="meta">    MyBatis3simple:生成的是基础版，只有基本的增删改查。</span></span></span><br><span class="line"><span class="string"><span class="meta">    MyBatis3: 生成的是增强版，除了基本的增删改查之外还有复杂的增删改查。</span></span></span><br><span class="line"><span class="string"><span class="meta">--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;context id=&quot;</span>DB2Tables<span class="string">&quot; targetRuntime=&quot;</span>MyBatis3<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;!--防止生成重复代码--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;plugin type=&quot;</span>org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;commentGenerator&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;!--是否去掉生成日期--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;property name=&quot;</span>suppressDate<span class="string">&quot; value=&quot;</span>true<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;!--是否去除注释--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;property name=&quot;</span>suppressAl1Comments<span class="string">&quot; value=&quot;</span>true<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;/commentGenerator&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;!--连接数据库信息--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;jdbcConnection </span></span></span><br><span class="line"><span class="string"><span class="meta">            driverclass=&quot;</span>com.mysql.cj.jdbc.Driver<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            connectionURL=&quot;</span>jdbc:mysql://Tocathost:3306/powernode<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">             userId=&quot;</span>root<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">             password=&quot;</span>root<span class="string">&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;/jdbcConnection&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;!-- 生成pojo包名和位置 --&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">         &lt;javaModelGenerator </span></span></span><br><span class="line"><span class="string"><span class="meta">              targetPackage=&quot;</span>com.powernode.mybatis.pojo<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              targetProject=&quot;</span>src/main/java<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;!--是否开启子包--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;property name=&quot;</span>enableSubPackages<span class="string">&quot; value=&quot;</span>true<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;!--是否去除字段名的前后空白--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;property name=&quot;</span>trimStrings<span class="string">&quot; value=&quot;</span>true<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;/javaModelGenerator&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">          &lt;!-- 生成SQL映射文件的包名和位置 --&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">          &lt;sqlMapGenerator </span></span></span><br><span class="line"><span class="string"><span class="meta">              targetPackage=&quot;</span>com.powernode.mybatis.mappen<span class="string">&quot; </span></span></span><br><span class="line"><span class="string"><span class="meta">              targetProject=&quot;</span>src/main/resources<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">           &gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">               &lt;!--是否开启子包--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">               &lt;property name=&quot;</span>enableSubPackages<span class="string">&quot; value=&quot;</span>true<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">           &lt;/sqlMapGenerator&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;!-- 生成Mapper接口的包名和位置--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;javaClientGenerator</span></span></span><br><span class="line"><span class="string"><span class="meta">            type=&quot;</span>xmIMapper<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            targetPackage=&quot;</span>com.powernode.mybatis .mapper<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            targetProject=&quot;</span>src/main/java<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;property name=&quot;</span>enableSubPackages<span class="string">&quot; value=&quot;</span>true<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;/javaClientGenerator&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">        &lt;!-- 表名和对应的实体类名--&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">         &lt;table tableName=&quot;</span>t_car<span class="string">&quot; domainObjectName=&quot;</span>Car<span class="string">&quot;/&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &lt;/context&gt;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">&lt;/generatorConfiguration&gt;</span></span></span><br></pre></td></tr></table></figure><p>从maven找到插件 mybatis-generator,展开。 双击mybatis-generator:generate</p><blockquote><p>MyBatis逆向工程dao接口只生成两个方法，原因：<br>1.是你的mysql版本太高了，换成6一下的版本即可<br>2.看看你的表有没有设置主键，如果没有设置一下即可<br>3.如果想使用高版本的mysql在url后面加nullCatalogMeansCurrent=true</p></blockquote><h3 id="PAgeHelper-分页插件"><a href="#PAgeHelper-分页插件" class="headerlink" title="PAgeHelper 分页插件"></a>PAgeHelper 分页插件</h3><h4 id="limit-分页"><a href="#limit-分页" class="headerlink" title="limit 分页"></a>limit 分页</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">起始位置(从0开始),每页条数</span></span><br><span class="line"><span class="comment">1页n 页</span></span><br><span class="line"><span class="comment">startIndex 0(n-1)*page</span></span><br><span class="line"><span class="comment">page 10page</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> defect_alarm LIMIT <span class="number">0</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用-pageHelper"><a href="#使用-pageHelper" class="headerlink" title="使用 pageHelper"></a>使用 pageHelper</h4><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>mybatis-conf.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">intercepetor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解是开发"><a href="#注解是开发" class="headerlink" title="注解是开发"></a>注解是开发</h3><blockquote><p>可以不用写 mapper.xml 文件了。但只是针对简单的语句</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into t_car values(null, #&#123;carNum&#125;,#&#123;brand&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertCar</span><span class="params">(Car car)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete(&quot;delete from t_car where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update t_car set car_num=#&#123;carNum&#125;,brand=#&#123;brand&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span> <span class="params">(Car car)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有配置小驼峰匹配时，可以这样加映射</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from t_car where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(property=&quot;&quot;, column=&quot;&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">Car <span class="title function_">selectById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ORM&quot;&gt;&lt;a href=&quot;#ORM&quot; class=&quot;headerlink&quot; title=&quot;ORM&quot;&gt;&lt;/a&gt;ORM&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;O (Object) jvm中的对象&lt;/p&gt;
&lt;p&gt;R (Relational) 关系型数据库&lt;/p&gt;
&lt;p&gt;M (Mapping) 映射&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230214134743208.png&quot; alt=&quot;image-20230214134743208&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持定制化 SQL、存储过程、基本映射以及高级映射&lt;/li&gt;
&lt;li&gt;避免了几乎所有的JDBC代码中手动设置参数以及获取结果集&lt;/li&gt;
&lt;li&gt;支持XML开发，也支持注解式开发。[为了保证sql语句的灵活，所以mybatis大部分是采用XML方式开发。]&lt;/li&gt;
&lt;li&gt;将接口和Java 的 POJOs(Plain rdinary Java Object，简单普通的Java对象)映射成数据库中的记录体积小好学: &lt;/li&gt;
&lt;li&gt;两个jar包，两个XML配置文件。&lt;/li&gt;
&lt;li&gt;完全做到sal解耦合&lt;/li&gt;
&lt;li&gt;提供了基本映射标签&lt;/li&gt;
&lt;li&gt;提供了高级映射标签&lt;/li&gt;
&lt;li&gt;提供了XML标签，支持动态SQL的编写&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="mybatis 基础" scheme="https://wyf195075595.github.io/tags/mybatis-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>jdbc基础</title>
    <link href="https://wyf195075595.github.io/2023/02/10/programming/java/jdbc/"/>
    <id>https://wyf195075595.github.io/2023/02/10/programming/java/jdbc/</id>
    <published>2023-02-10T13:00:00.000Z</published>
    <updated>2023-02-17T08:35:05.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JDBC 是SUN公司制定的一套接口</p></blockquote><h3 id="JDBC-准备工作，加载jar-驱动包，然后配置到环境变量-classpath-当中"><a href="#JDBC-准备工作，加载jar-驱动包，然后配置到环境变量-classpath-当中" class="headerlink" title="JDBC 准备工作，加载jar 驱动包，然后配置到环境变量 classpath 当中"></a>JDBC 准备工作，加载jar 驱动包，然后配置到环境变量 classpath 当中</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath=.;xxx/mysql-connector-java-<span class="number">5.1</span><span class="number">.23</span>-bin.jar</span><br></pre></td></tr></table></figure><blockquote><p>其中配置了两个路径，一个是当前路径，一个是mysql驱动架包路径。这里的配置在集成工具中不需要配</p></blockquote><h3 id="jdbc-编程6步"><a href="#jdbc-编程6步" class="headerlink" title="jdbc 编程6步"></a>jdbc 编程6步</h3><ol><li><p>注册驱动　（连接哪个数据库）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二, 应为参数是字符串可以提出配置，类加载时自动执行静态代码 自动注册</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取连接　（JVM进程与数据库连接，重量级通信）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">coon</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pwd);</span><br><span class="line">System.out.println(<span class="string">&quot;数据库连接对象&quot;</span> + coon);</span><br></pre></td></tr></table></figure></li><li><p>获取数据库操作对象（专门执行SQL）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> coon.createStatement();</span><br></pre></td></tr></table></figure></li><li><p>执行SQL语句</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete * from tb_emp&quot;</span>;</span><br><span class="line">        <span class="comment">// executeUpdate 专门执行DML语句（insert、delete、update）,返回影响数据库中记录的条数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br></pre></td></tr></table></figure></li><li><p>处理查询结果集</p></li><li><p>释放资源（关闭连接）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从小到大关闭</span></span><br><span class="line">stmt.close();</span><br><span class="line">coon.close();</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><h3 id="使用资源绑定器绑定属性配置文件"><a href="#使用资源绑定器绑定属性配置文件" class="headerlink" title="使用资源绑定器绑定属性配置文件"></a>使用资源绑定器绑定属性配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">db</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;db&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">Class.forName(db);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">coon</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pwd);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> coon.createStatement();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from defect_alarm&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">list</span> <span class="operator">=</span>  stmt.executeQuery(sql);</span><br><span class="line">      <span class="keyword">while</span> (list.next()) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> list.getString(<span class="string">&quot;occurrence_time&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">alarmName</span> <span class="operator">=</span> list.getString(<span class="string">&quot;alarm_name&quot;</span>);</span><br><span class="line">        System.out.println(time+<span class="string">&quot;-&quot;</span>+alarmName);</span><br><span class="line">    &#125;</span><br><span class="line">stmt.close();</span><br><span class="line">coon.close();</span><br></pre></td></tr></table></figure><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><blockquote><p>例如：用户登录功能</p></blockquote><p>登录的 sql 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> loginName <span class="operator">=</span> #&#123;username&#125; <span class="keyword">and</span> password <span class="operator">=</span> #&#123;password&#125;</span><br></pre></td></tr></table></figure><p>sql 注入： 知道用户名 zs，但不知道密码。输入 用户名: zs</p><p>输入密码： zs’ or ‘1’ =’1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> loginName <span class="operator">=</span> <span class="string">&#x27;zs&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;zs&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="解决-sql-注入"><a href="#解决-sql-注入" class="headerlink" title="解决 sql 注入"></a>解决 sql 注入</h3><blockquote><p>只要是用户提供的信息不参与SQL语句的编译过程，问题就解决了。那么就必须使用 java.sql.Preparedstatement</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">db</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;db&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">Class.forName(db);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">coon</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pwd);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from defect_alarm where username=? and pwd=?&quot;</span>;</span><br><span class="line"><span class="comment">// 预编译的数据库操作对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> coon.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 传值</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">list</span> <span class="operator">=</span>  ps.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (list.next()) &#123;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br><span class="line">stmt.close();</span><br><span class="line">coon.close();</span><br></pre></td></tr></table></figure><blockquote><p>Preparedstatement 与 Statement 区别？</p><p>Statement  编译一个执行一次，只有在业务要求需要用到SQL注入时才用，例如列表升序降序，需要注入 desc asc 关键字（关键字不能用引号包裹）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 不行</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot;select ename from emp order by ename=?&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 可以</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot;select ename from emp order by ename&quot; <span class="operator">+</span> keyword;</span><br></pre></td></tr></table></figure><p>Preparedstatement 编译一次可执行N次，编译阶段进行类型检查，效率高于Statement  </p></blockquote><h3 id="jdbc-事务"><a href="#jdbc-事务" class="headerlink" title="jdbc 事务"></a>jdbc 事务</h3><blockquote><p>多个操作数据库动作，要么全部成功，要么全部失败</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(db);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">coon</span> <span class="operator">=</span> DriverManager.getConnection(url, user, pwd);</span><br><span class="line"><span class="comment">// 关闭事件自动提交</span></span><br><span class="line">coon.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 程序正常，提交事务</span></span><br><span class="line">coon.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="comment">// 程序出错，事务回滚</span></span><br><span class="line">    coon.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><blockquote><p>（悲观锁）：当我们查询某些数据时，为了得到真实数据，不允许其他线程对这些数据进项操作，可以加上行级锁</p><p>（乐观锁）：支持并发，事务也不需要排队，只不过需要一个版本号。如果在操作过程中有其他线程修改我访问的数据，那么我提交事务时会发现版本号根之前的不一样的，于是我回滚操作</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 此时这条 id<span class="operator">=</span><span class="number">111</span> 的数据，被锁定</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id<span class="operator">=</span><span class="number">111</span> <span class="keyword">for</span> <span class="keyword">update</span> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;JDBC 是SUN公司制定的一套接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JDBC-准备工作，加载jar-驱动包，然后配置到环境变量-classpath-当中&quot;&gt;&lt;a href=&quot;#JDBC-准备工作，加载jar-驱动包，然后配置到环境变量-classpath-当中&quot; class=&quot;headerlink&quot; title=&quot;JDBC 准备工作，加载jar 驱动包，然后配置到环境变量 classpath 当中&quot;&gt;&lt;/a&gt;JDBC 准备工作，加载jar 驱动包，然后配置到环境变量 classpath 当中&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;classpath=.;xxx/mysql-connector-java-&lt;span class=&quot;number&quot;&gt;5.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.23&lt;/span&gt;-bin.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;其中配置了两个路径，一个是当前路径，一个是mysql驱动架包路径。这里的配置在集成工具中不需要配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;jdbc-编程6步&quot;&gt;&lt;a href=&quot;#jdbc-编程6步&quot; class=&quot;headerlink&quot; title=&quot;jdbc 编程6步&quot;&gt;&lt;/a&gt;jdbc 编程6步&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册驱动　（连接哪个数据库）&lt;/p&gt;
 &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;com&lt;/span&gt;.mysql.jdbc.Driver();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DriverManager.registerDriver(driver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方式二, 应为参数是字符串可以提出配置，类加载时自动执行静态代码 自动注册&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class.forName(&lt;span class=&quot;string&quot;&gt;&amp;quot;com.mysql.jdbc.Driver&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取连接　（JVM进程与数据库连接，重量级通信）&lt;/p&gt;
 &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;coon&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; DriverManager.getConnection(url, user, pwd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;数据库连接对象&amp;quot;&lt;/span&gt; + coon);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取数据库操作对象（专门执行SQL）&lt;/p&gt;
 &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; coon.createStatement();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行SQL语句&lt;/p&gt;
 &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;delete * from tb_emp&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// executeUpdate 专门执行DML语句（insert、delete、update）,返回影响数据库中记录的条数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; stmt.executeUpdate(sql);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理查询结果集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;释放资源（关闭连接）&lt;/p&gt;
 &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从小到大关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stmt.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coon.close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="jdbc基础" scheme="https://wyf195075595.github.io/tags/jdbc%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>jdbcweb基础</title>
    <link href="https://wyf195075595.github.io/2023/02/10/programming/java/javaweb/"/>
    <id>https://wyf195075595.github.io/2023/02/10/programming/java/javaweb/</id>
    <published>2023-02-10T05:00:00.000Z</published>
    <updated>2023-02-17T08:34:52.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>servlet 是JavaEE 规范之一。</p><p>javaEE 目前最高版本时javaEE8,它被Oracle捐献给Apache。之后被改名为 Jakarta EE。从此没有javaEE 了</p><p>javaEE8中的Servlet类名：javax.servlet.Servlet</p><p>javaEE9中的Servlet类名：jakarta.servlet.Servlet</p></blockquote><h3 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h3><ol><li><p>系统架构包括</p><ul><li><p>C/S 架构</p><p>  就是需要安装的软件</p></li><li><p>B/S 架构</p><p>  就是运行在浏览器的页面</p></li></ul></li></ol><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><p>开源免费的轻量级ＷＥＢ服务器</p></blockquote><h4 id="tomcat-目录"><a href="#tomcat-目录" class="headerlink" title="tomcat 目录"></a>tomcat 目录</h4><ul><li>bin：存放命令文件<ul><li>.bat 文件，批量执行windows DOS命令</li><li>.sh 文件，批量执行 Linux 命令</li><li></li></ul></li><li>conf：配置文件</li><li>lib：tomcat核心程序目录</li><li>logs：日志目录</li><li>temp：临时目录</li><li>webapps：存放web应用</li><li>work：存放jsp文件翻译之后的Java文件以及编译之后的class文件</li></ul><p>配置tomcat环境</p><ol><li>CATALINA_HOME=D:\tomcat\apache-tomcat-10.0.27</li><li>JAVA＿HOME=C:\Program Files\Java\jdk1.8.0_321</li><li>JRE_HOME=%JAVA＿HOME%\jre</li></ol><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.bat</span><br></pre></td></tr></table></figure><p><strong>出现中文乱码</strong></p><blockquote><p>修改conf/logging.properties</p><p>java.util.logging.ConsoleHandler.encoding = GBK</p></blockquote><span id="more"></span><h3 id="开发一个带有servlet的webapp"><a href="#开发一个带有servlet的webapp" class="headerlink" title="开发一个带有servlet的webapp"></a>开发一个带有servlet的webapp</h3><ol><li><p>在webapps 目录下，创建一个目录project，这就是web根目录</p></li><li><p>根目录下新建 WEB-INF 文件夹</p></li><li><p>WEB-INF目录下传创建 classes 目录：放置字节码文件</p></li><li><p>WEB-INF下新建 lib文件夹：webapp需要第三方jar包时，就放置到此处</p></li><li><p>WEB-INF新建 web.xml 文件：配置文件，描述了路径与类的对应关系</p></li><li><p>编写Java程序，程序必须实现servlet接口。接口规范不在javaSE，javaEE文档可查看，在tomcat包中  /lib/servlet-api.jar. 解压后 /jakarta/servlet/Servlet.class 就是我们要实现的接口</p></li><li><p>编写 servlet 编译问题：</p><blockquote><p>jakarta包不存在，需要配置环境变量</p><p>classpath=.;…/tomcat/lib\servlet.jar</p></blockquote></li><li><p>将编译后的Java文件放到 classes 下</p></li><li><p>配置webxml 文件，让路径与类名关联（注册servlet类）</p></li></ol><h3 id="IDE中开发一个servlet"><a href="#IDE中开发一个servlet" class="headerlink" title="IDE中开发一个servlet"></a>IDE中开发一个servlet</h3><blockquote><p><strong>新建 maven webapp 项目不生成 sec目录？</strong></p><p>找到Build, Execution, Deployment，选中Build Tools–&gt;Maven–&gt;Runner，在右侧 VM Options框中写上 -Darchetype=Internal 即可。</p><p>建议使用 tomcat 9，10 可能出现问题</p></blockquote><ol><li><p>创建空项目 project</p></li><li><p>添加模块 servlet01</p></li><li><p>为模块添加框架支持</p></li><li><p>编写 servlet （studentServlet），发现Servlet 类不存在</p><p> 将tomcat lib 文件夹下的 servlet-api.jar 和 jsp-api.jar 加入。在 service方法中连接数据库</p></li><li><p>在WEB-INF 下新建 lib,并把 jdbc驱动架包放入</p></li><li><p>在web.xml 文件完成 servlet子类的注册</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>studentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>javaweb.StudentServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>studentServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/student<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>给一个HTML页面，在HTML页面中编写超链接，点击执行后台的servlet程序。文件放在WEB-INF 上一级目录</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   // 项目名无法动态获取 /project</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/project/servlet/student&quot;</span>&gt;</span> student list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>让IDE工具去关联Tomcat服务器，关联的过程中将webapp部署到Tomcat服务器当中</p><ul><li>IDEA工具右上角，绿色小锤子右边有一个: Add Configuration</li><li>左上角加号，点击Tomcat Server –&gt; local<br>  在弹出的界面中设置服务器Server的参数 (基本上不用动)</li><li>在当前窗口中有一个Deployment (点击这个用来部署webapp)，:继续点击加号，部署即可<br>  修改 Application context为: /project</li></ul></li><li><p>访问：<a href="http://localhost:8080/project/student.html">http://localhost:8080/project/student.html</a></p></li></ol><h3 id="servlet-对象生命周期"><a href="#servlet-对象生命周期" class="headerlink" title="servlet 对象生命周期"></a>servlet 对象生命周期</h3><blockquote><p>从创建到销毁的过程</p></blockquote><p>在Servlet中提供一个无参的构造函数，启动服务器的时候看构造函数是否执行。经过测试得出结论：<strong>默认情况下，服务器在启动Servlet对象并不会实例化</strong></p><p>如果我们在配置文件给 servlet 增加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时，这个我们自己编写的servlet会在启动服务时实例化</p><p><strong>用户第一次请求</strong></p><blockquote><p>此时路径对应的servlet对象会在被实例化，此时tomcat 调用 servlet 对象的 init 方法。servlet 构造函数会执行</p></blockquote><p><strong>用户第二次及n次请求</strong></p><blockquote><p>此时路径对应的servlet对象init方法没有调用，构造函数也没有调用</p></blockquote><p>用户发送一次请求，service方法就会被调用一次。</p><p>关闭服务器的时候，回调 distory 方法</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><blockquote><p>这个初始化操作指挥执行一次，这里我们看可以做：初始化数据库连接池，初始化线程池</p></blockquote><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><blockquote><p>用户每次请求都会调用一次</p></blockquote><h4 id="destory"><a href="#destory" class="headerlink" title="destory"></a>destory</h4><blockquote><p>进行资源关闭，马上要销毁对象时调用</p></blockquote><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><blockquote><p>由于Servlet 接口我们通常只要service 方法，其他方法用不到。但是又必须的重写。如果我们想省略那些用不着的代码，该怎么办？</p></blockquote><p>ServiceAdapter</p><p>这个适配器实现Servlet接口，并把service作为抽象方法.</p><p>但实际上这个适配器方法已经有现成的了：GenericServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javaweb.servlet.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ServiceAdapter</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">// 配置项</span></span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init execute&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.config = servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>StudentServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServlet</span> <span class="keyword">extends</span> <span class="title class_">ServiceAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet service start!&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span>  <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;欢迎访问本页面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="servletConfig"><a href="#servletConfig" class="headerlink" title="servletConfig"></a>servletConfig</h3><blockquote><p>ServletConfig 对象中封装了servlet 标签中的配置信息（web.xml 下的servlet配置）</p></blockquote><h3 id="servletContext"><a href="#servletContext" class="headerlink" title="servletContext"></a>servletContext</h3><blockquote><p>servletContext 接口时 Servlet 规范中的一员，对应其实就是整个Web.xml 文件。</p><p>servletContext 比作教室，servlet 就是学生</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取上下文对象的方式</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="type">ServletConfig</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line"><span class="type">servletContext</span> <span class="variable">application</span> <span class="operator">=</span> config.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、</span></span><br><span class="line"><span class="built_in">this</span>.getServletContext()</span><br></pre></td></tr></table></figure><h4 id="配置共有的参数"><a href="#配置共有的参数" class="headerlink" title="配置共有的参数"></a>配置共有的参数</h4><blockquote><p>在 web.xml 文件中，与servlet 平级,一般是公共的数据，数据量小且几乎不会再修改（应用域）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存 map.put(k, value)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>;</span><br><span class="line"><span class="comment">// 取 map.get(k)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAttribute</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 删 map.remove(k)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAttribute</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>public String getInitParameter(String name)  通过初始化参数的name获取value</li><li>public Enumeration&lt;String&gt; getInitparameterNames()  通过初始化参数的name</li><li>public ServletContext getServletContext()</li><li>public String getServletName()</li><li>getContextPath()  获取上下文的根</li><li>getRealPath()  获取文件的绝对路径</li><li>public void log(String message)</li><li>public void log(String message, Throawble t);</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取上下文初始化参数</span></span><br><span class="line">Enuumeration&lt;Stirng&gt; initParameterNames = application.getInitParameterNames();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> initParameterNames.getInitParameter(name);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> application.getInitparmeter(name);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> application.getRealPath(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录日志, 存储在 Tamcat 根目录下的 logs 文件夹下.如果用的时IDE，则实在IDE中的小猫咪文件夹下（IDE中可以有多个小猫咪服务）</span></span><br><span class="line">application.log(<span class="string">&quot;日志&quot;</span>);</span><br><span class="line">application.log(<span class="string">&quot;日志&quot;</span>,  Throawble t);</span><br></pre></td></tr></table></figure><blockquote><p>以后取编写 Servlet 类的时候，实际上不会直接继承 GenericServlet 类的，因为我们是B/S 架构。这种系统基于Http 超文本传输协议的，在Servlet规范中提供了一个类叫做 HttpServlet ，专门为Http协议准备的一个Servlet类，所以我们编写时要继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jakarta.servlet.Servlet(接口) 【爷爷】</span><br><span class="line">jakarte.servlet.GenaricServlet imlements  <span class="title function_">Servlet</span><span class="params">(抽象类)</span>【儿子】</span><br><span class="line">jakarta.servlet.HttpServelt <span class="keyword">extends</span> <span class="title class_">GenaricServlet</span>(抽象类)【孙子】</span><br><span class="line">    </span><br><span class="line">我们以后编写 Servlet 需要继承 HttpServlet</span><br></pre></td></tr></table></figure></blockquote><p><strong>接触到的缓存机制</strong></p><ol><li><p>常量池</p><p> ”abc“现在字符串常量池找，有，直接用，没有新建放入常量池</p></li><li><p>整数型常量池</p><p> [-127, 127] 共256个Integer类型引用可以直接使用</p></li><li><p>连接池</p><p> 连接数据库的连接对象，新建n个连接对象。每次用户连接时省去新建环节</p></li><li><p>线程池</p></li><li><p>redis</p></li><li><p>SerevletContext 应用域中存储数据</p></li></ol><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><h4 id="URL与URI"><a href="#URL与URI" class="headerlink" title="URL与URI"></a>URL与URI</h4><blockquote><p>URL：统一资源定位符</p><p>​    <a href="https://rank.kkj.cn/Phone74.shtml">https://rank.kkj.cn/Phone74.shtml</a></p><p>URI：统一资源标识符</p><p>​    /Phone74.shtml</p></blockquote><h4 id="get与post请求"><a href="#get与post请求" class="headerlink" title="get与post请求"></a>get与post请求</h4><ul><li><p>get 请求是绝对安全的，应为get是从服务器获取资源。</p><ul><li><p>get请求支持缓存</p></li><li><p>如果希望get请求有缓存怎么办？</p><p>  get请求路径不同即可，如路径添加系统毫秒数</p></li></ul></li><li><p>post 请求是危险的，因为post是向服务器发送数据</p><ul><li>post 响应结果不会被缓存</li></ul></li></ul><h3 id="HttpServlet-源码分析"><a href="#HttpServlet-源码分析" class="headerlink" title="HttpServlet 源码分析"></a>HttpServlet 源码分析</h3><h4 id="http-包下都有哪些类的接口"><a href="#http-包下都有哪些类的接口" class="headerlink" title="http 包下都有哪些类的接口"></a>http 包下都有哪些类的接口</h4><ul><li>jakarta.servlet.http.HttpServlet (Http协议专用的请求对象)</li><li>jakarta.servlet.http.HttpServletRequest (Http协议专用请求对象)</li><li>jakarta.servlet.http.HttpServletResPonse (Http协议专用响应对象)</li></ul><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p>HttpServletRequest </p><ul><li><p>getMethod() 获取请求方式</p></li><li><p>getRemoteAddr() 获取用户IP</p></li><li><p>setCharacterEncoding(String env)  设置请求体字符集，获取用户中文输入可能出现乱码，此时需要这个方法设置 “UTF-8”</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">res.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">res.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 方法请求乱码问题</span></span><br><span class="line">tomcat <span class="number">8</span>开始默认字符集是UTF-<span class="number">8</span></span><br><span class="line"> 修改 tomcathome/ conf/server.xml</span><br><span class="line">    Connector 增加 属性 URIEncoding=<span class="string">&quot;UTF-8&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>getContextPath  获取应用根路径</p></li><li><p>getRequestURL  获取请求方式</p></li><li><p>getServletPath  获取 servlet path</p></li><li><p>获取浏览器用户提交信息</p><ul><li>String getParameter(String name)【几乎不用】</li><li>Map&lt;String,string[]&gt;getParameterMap() 【几乎不用】</li><li>Enumeration&lt;String&gt;  getParameterNames() 【用的少】</li><li>String[] getParameterValues(String name) 【常用】</li></ul></li><li><p>如何存储用户提交的数据</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为避免键值重复</span></span><br><span class="line">Map&lt;String, String[]&gt;</span><br><span class="line"></span><br><span class="line">keyvalue</span><br><span class="line">-----------------</span><br><span class="line">username  &#123;<span class="string">&quot;abc&quot;</span>&#125;</span><br><span class="line">userpwd    &#123;<span class="string">&quot;111&quot;</span>&#125;</span><br><span class="line">aihao  &#123;<span class="string">&quot;s&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;w&quot;</span>&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="设置-javaweb-项目欢迎页面"><a href="#设置-javaweb-项目欢迎页面" class="headerlink" title="设置 javaweb 项目欢迎页面"></a>设置 javaweb 项目欢迎页面</h3><blockquote><p>就是相当于设置默认的主页面,路径不需要以/开始。如果不设置，默认找index.html</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="WEB-INF-目录"><a href="#WEB-INF-目录" class="headerlink" title="WEB-INF 目录"></a>WEB-INF 目录</h3><blockquote><p>此目录是受保护的，浏览器通过地址不能访问</p></blockquote><h3 id="请求域-对象"><a href="#请求域-对象" class="headerlink" title="请求域 对象"></a>请求域 对象</h3><blockquote><p>根应用域一样，也有这三个方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存 map.put(k, value)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object value)</span>;</span><br><span class="line"><span class="comment">// 取 map.get(k)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAttribute</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 删 map.remove(k)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAttribute</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="转发机制"><a href="#转发机制" class="headerlink" title="转发机制"></a>转发机制</h3><blockquote><p>执行了 A servlet 后跳转到 B servlet</p></blockquote><ol><li><p>获取请求转发器对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是 web.xml 配置的路径</span></span><br><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&#x27;/b&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>调用请求转发器的 forword 方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatcher.forword(request, response);</span><br></pre></td></tr></table></figure></li></ol><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><blockquote><p>重定向请求两次，转发请求一次</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/project/dept/list&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="两个Servlet-数据怎么共享？"><a href="#两个Servlet-数据怎么共享？" class="headerlink" title="两个Servlet 数据怎么共享？"></a>两个Servlet 数据怎么共享？</h3><ol><li>将数据放到ServletContext 应用域中</li><li>将数据放到 request域中，然后转发到另一个servlet</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dept;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">deptno <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">dname <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">loc <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">20</span>,<span class="string">&#x27;研发部&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">30</span>,<span class="string">&#x27;技术部&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>); </span><br><span class="line">  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, dname, loc) <span class="keyword">values</span>(<span class="number">40</span>,<span class="string">&#x27;媒体部&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><h3 id="使用注解方式注册-servlet"><a href="#使用注解方式注册-servlet" class="headerlink" title="使用注解方式注册 servlet"></a>使用注解方式注册 servlet</h3><blockquote><p>每次配置 web.xml 文件，过于繁琐。可以使用 @WebServlet 注解。</p><p>如果参数不需要变化的建议使用注解，如果参数需要频繁变更建议写在配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;studentServlet&quot;, urlPatterns = &quot;/servlet/student&quot;,</span></span><br><span class="line"><span class="meta">initParams = &#123; @WebInitParam(name = &quot;username&quot;, value=&quot;root&quot;), @WebInitParam(name = &quot;password&quot;, value=&quot;123456&quot;)&#125; ,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServlet</span> <span class="keyword">extends</span> <span class="title class_">ServiceAdapter</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取注解上的参数"><a href="#获取注解上的参数" class="headerlink" title="获取注解上的参数"></a>获取注解上的参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取Servlet Name</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> getServletName();</span><br><span class="line">    <span class="comment">// 获取Servlet path</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> resuest.getServletPath();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取初始化参数 initParams</span></span><br><span class="line">    Enumeration&lt;String&gt; names = getInitParameterNames();</span><br><span class="line">    <span class="keyword">while</span>(names.hasMoreElements()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> names.nextElement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> getInitParameter(name);</span><br><span class="line">        System.out.println(name + value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用反射获取类上的注解"><a href="#使用反射获取类上的注解" class="headerlink" title="使用反射获取类上的注解"></a>使用反射获取类上的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; welcomeServletClass = Class.forName(<span class="string">&quot;com.xxxxx.servlet.WelcomeServlet&quot;</span>);</span><br><span class="line"><span class="comment">// 判断类是否有注解对象，有就获取</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">annotationPresent</span> <span class="operator">=</span> welcomeServletClass.isAnnotationPresent(WebServlet.class);</span><br><span class="line"><span class="keyword">if</span>(annotationPresent) &#123;</span><br><span class="line">    <span class="type">WebServlet</span> <span class="variable">webServletAnnotation</span> <span class="operator">=</span> welcomeServletClass.getAnnitation(WebServlet.class);</span><br><span class="line">    Stirng[] value = webServletAnnotation.value();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i&lt; value.length; i++) &#123;</span><br><span class="line">        System.out.println(value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><blockquote><p>某个问题的固定解决方案（可以被重复使用）</p></blockquote><p><strong>什么是模板方法设计模式?</strong></p><blockquote><p>在模板类的模板方法当中定义核心算法骨架，具体的实现步骤可以延迟到子类当中完成。模板类通常是一个抽象类，模板类当中的模板方法定义核心算法，这个方法通常是final的(但也可以不是final的)</p><p>模板类当中的抽象方法就是不确定实现的方法，这个不确定怎么实现的事儿交给子类去做。</p></blockquote><p><strong>之前我们是一个请求一个Servlet ，这样会导致我们创建多个Servlet。我们想把多个Servlet 合并成一个Servlet，怎么做？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&#123;&quot;/list&quot;, &quot;/add&quot;, &quot;/save&quot;, &quot;/delete&quot;, &quot;/update&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//        super.service(req, resp);</span></span><br><span class="line">        <span class="comment">// 获取请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> req.getServletPath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/list&quot;</span>.equals(servletPath)) &#123;</span><br><span class="line">            doList(req, res);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/add&quot;</span>.equals(servletPath)) &#123;</span><br><span class="line">            doAdd(req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAdd</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span>  <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="built_in">this</span>.getWriter(res);</span><br><span class="line">        out.println(<span class="string">&quot;doAdd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doList</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span>  <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="built_in">this</span>.getWriter(res);</span><br><span class="line">        out.println(<span class="string">&quot;doList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> PrintWriter <span class="title function_">getWriter</span><span class="params">(ServletResponse res)</span> &#123;</span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = res.getWriter();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h3><blockquote><p>访问 index.jsp 文件实际上是访问 tomcat 翻译生成的 index_jsp.class</p></blockquote><blockquote><p><strong>]SP实际上就是一个Servlet。</strong><br><strong>i</strong>ndex.sp访问的时候，会自动翻译生成index isp.java，会自动编译生成index isp.cass，那么index isp 这就是一个类。</p><p>indexjsp类继承HttplspBase，而HttplspBase类继承的是HttpServlet。所以index jsp类就是一个Servlet类。isp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</p><p>普通servlet 对象注重业务，jsp 则更注重页面展示</p></blockquote><p><strong>在 jsp 文件中编写Java代码时就相当于在 Servlet 中的 service 方法中编写代码</strong></p><h4 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"> ... 这里的代码会被放到servlet 的service方法中渲染</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line"> ... 这里的代码会被放置到servlet 的类体中   </span><br><span class="line"> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=xxx%&gt; 翻译成 out.print(xxx);</span><br><span class="line"></span><br><span class="line">xzxz  普通字符串会被翻译到out.print(<span class="string">&quot;xzxz&quot;</span>) 参数中</span><br></pre></td></tr></table></figure><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><blockquote><p>只能在 &lt;%%&gt; service方法中使用</p></blockquote><ol><li>out   输出流对象</li></ol><h3 id="session-会话机制（B-S系统结构）"><a href="#session-会话机制（B-S系统结构）" class="headerlink" title="session 会话机制（B/S系统结构）"></a>session 会话机制（B/S系统结构）</h3><blockquote><p>用户从打开浏览器到关闭浏览器就是一次会话。</p><p>为啥需要session来保存会话状态？因为Http协议是一种无状态协议</p><p>session 对象是存储在服务端的，一个session对应一个请求对象。</p><p>session的销毁是通过设置过期时间，就是登录后你的最后一次操作后超过多长时间没有操作，后端会判断这个会话过期</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只获取 session</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession(fasle);</span><br><span class="line"><span class="comment">// 获取不到创建一个</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">// 向会话中绑定数据</span></span><br><span class="line">session.setAttribute();</span><br><span class="line"><span class="comment">// 从会话域中取数据</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> session.getAttribute();</span><br><span class="line"><span class="comment">// 将session对象响应到浏览器</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="为啥不用-request-servletContext-存储？"><a href="#为啥不用-request-servletContext-存储？" class="headerlink" title="为啥不用 request,servletContext 存储？"></a>为啥不用 request,servletContext 存储？</h4><blockquote><p>作用域大小：request &lt; session &lt; servletContext</p><p>request 对象每次请求都会创建新的对象</p><p>servletContext 是所有用户共享的</p></blockquote><h4 id="session的实现原理"><a href="#session的实现原理" class="headerlink" title="session的实现原理"></a>session的实现原理</h4><blockquote><p>​    在web服务器中有一个session列表。类似于map集合。这个map集合的key存储的是sessionid这个map集合的value存储的是对应的session对象</p><p>​    用户发送第一次请求的时候: 服务器会创建一个新的session对象，同时给session对象生成一个id，然后web服务器会将session的id发送给浏览器，浏览器将session的id保存在浏览器的缓存中</p><p>​    用户发送第二次请求的时候: 会自动将浏览器缓存中的sessionid自动发送给服务器，服务器获取到sessionid然后从session列表中查找到对应的session对象</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230214084004466.png" alt="image-20230214084004466"></p><h4 id="为啥关闭浏览器，会话结束？"><a href="#为啥关闭浏览器，会话结束？" class="headerlink" title="为啥关闭浏览器，会话结束？"></a>为啥关闭浏览器，会话结束？</h4><blockquote><p>关闭浏览器后，浏览器中保存的sessionID小艾是，下次重新打开后缓存中没有这个sessionID，自然在服务端找不到对应的session对象</p></blockquote><h4 id="web-xml-设置session-过期时间"><a href="#web-xml-设置session-过期时间" class="headerlink" title="web.xml 设置session 过期时间"></a>web.xml 设置session 过期时间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="cookie禁止了，怎么传递sessionID？"><a href="#cookie禁止了，怎么传递sessionID？" class="headerlink" title="cookie禁止了，怎么传递sessionID？"></a>cookie禁止了，怎么传递sessionID？</h4><blockquote><p>可以使用URL重写机制:<a href="http://xxxx.com;jsessionid=sessionid/">http://xxxx.com;jsessionid=sessionID</a></p><p>但是成本高：所以企业常用策略是：你爱用不用</p></blockquote><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;515616&quot;</span>);</span><br><span class="line"><span class="comment">// 设置1小时后过期</span></span><br><span class="line">cookie.setMaxage(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">// 设置过期时间0，表示删除次cookie</span></span><br><span class="line">cookie.setMaxage(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 关联路径,此路径才提交cookie</span></span><br><span class="line">cookie.setPath();</span><br><span class="line"><span class="comment">// 发送到浏览器</span></span><br><span class="line">res.addCookie(cookie);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器获取cookie</span></span><br><span class="line">Cookie[]  cookies = req.getCookies();</span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie: cookies) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cookie = &quot;</span> + cookie.getName() + cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10天免登录"><a href="#10天免登录" class="headerlink" title="10天免登录"></a>10天免登录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Cookie对象存储用户名</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>( name: <span class="string">&quot;username&quot;</span>, username);</span><br><span class="line"><span class="comment">// 创建Cookie对象存储密码</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>( name:<span class="string">&quot;password&quot;</span>，password); </span><br><span class="line"><span class="comment">// 真实情况下是加密的// 设置cookie的有效期为十天</span></span><br><span class="line">cookie1.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">10</span>):</span><br><span class="line">cookie2.setMaxAge(<span class="number">60</span> * <span class="number">60</span> *<span class="number">24</span> * <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 设置cookie的path (只要访问这个应用，浏览器就一定要携带这两个cookie)</span></span><br><span class="line">cookie1.setPath(request.getContextPath()):</span><br><span class="line">cookie2.setPath(request.getContextPath()):</span><br><span class="line"><span class="comment">// 响应cookie给浏览器</span></span><br><span class="line">response.addCookie(cookie1);</span><br><span class="line">response.addCookie(cookie2):</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>就是说我们项目中很多模块都是需要验证登录的，每次执行对应servlet时，先获取session，cookie经行校验然后根据情况经行跳转。所以说我么给能不能把校验这一块提取成共用的方式</p></blockquote><p>编写过滤器</p><blockquote><p>Filter默认情况下，在服务器启动时就会新建对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册，匹配/list 路径 @WebFilter(&quot;/user/*&quot;) 可以使用模糊匹配</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterLogin</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">// 第一次创建之后调用，只执行一侧</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次请求都会拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 销毁时执行一次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterLogin<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.javaweb.servlet.FilterLogin<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterLogin<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/list<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>执行顺序</strong></p><blockquote><p>在xml文件中配置，则从上到下执行，使用注解方式，则比较类名。如：Filter1,Filter2,先执行Filter1. FilterA,FilterB先执行FilterB</p></blockquote><p>责任链模式：可以在配置文件中更改顺序，来改变执行。不需要改Java代码</p><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><blockquote><p>Servlet 留给Java 程序员的特殊时机.</p><p>监听器的方法不需要程序员主动调用，而是被web服务器自动调用</p></blockquote><ul><li>Jakarta.servlet<ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestListener</li></ul></li><li>jakata.servlet.http<ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener</li><li>HttpSessionBindingListener</li><li>HttpSessionIdListener</li><li>HttpSessionActivetionListener</li></ul></li></ul><p>创建一个监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="comment">// servletContext  对象被创建时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        ServletContextListener.<span class="built_in">super</span>.contextInitialized(sce);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// servletContext 对象被销毁时执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        ServletContextListener.<span class="built_in">super</span>.contextDestroyed(sce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以使用配置文件或注解 @WebListener</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.javaweb.servlet.MyServletContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;servlet 是JavaEE 规范之一。&lt;/p&gt;
&lt;p&gt;javaEE 目前最高版本时javaEE8,它被Oracle捐献给Apache。之后被改名为 Jakarta EE。从此没有javaEE 了&lt;/p&gt;
&lt;p&gt;javaEE8中的Servlet类名：javax.servlet.Servlet&lt;/p&gt;
&lt;p&gt;javaEE9中的Servlet类名：jakarta.servlet.Servlet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于系统架构&quot;&gt;&lt;a href=&quot;#关于系统架构&quot; class=&quot;headerlink&quot; title=&quot;关于系统架构&quot;&gt;&lt;/a&gt;关于系统架构&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;系统架构包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C/S 架构&lt;/p&gt;
&lt;p&gt;  就是需要安装的软件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B/S 架构&lt;/p&gt;
&lt;p&gt;  就是运行在浏览器的页面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Tomcat&quot;&gt;&lt;a href=&quot;#Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Tomcat&quot;&gt;&lt;/a&gt;Tomcat&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;开源免费的轻量级ＷＥＢ服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;tomcat-目录&quot;&gt;&lt;a href=&quot;#tomcat-目录&quot; class=&quot;headerlink&quot; title=&quot;tomcat 目录&quot;&gt;&lt;/a&gt;tomcat 目录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;bin：存放命令文件&lt;ul&gt;
&lt;li&gt;.bat 文件，批量执行windows DOS命令&lt;/li&gt;
&lt;li&gt;.sh 文件，批量执行 Linux 命令&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;conf：配置文件&lt;/li&gt;
&lt;li&gt;lib：tomcat核心程序目录&lt;/li&gt;
&lt;li&gt;logs：日志目录&lt;/li&gt;
&lt;li&gt;temp：临时目录&lt;/li&gt;
&lt;li&gt;webapps：存放web应用&lt;/li&gt;
&lt;li&gt;work：存放jsp文件翻译之后的Java文件以及编译之后的class文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置tomcat环境&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CATALINA_HOME=D:\tomcat\apache-tomcat-10.0.27&lt;/li&gt;
&lt;li&gt;JAVA＿HOME=C:\Program Files\Java\jdk1.8.0_321&lt;/li&gt;
&lt;li&gt;JRE_HOME=%JAVA＿HOME%\jre&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;startup.bat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;出现中文乱码&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修改conf/logging.properties&lt;/p&gt;
&lt;p&gt;java.util.logging.ConsoleHandler.encoding = GBK&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="jdbcweb基础" scheme="https://wyf195075595.github.io/tags/jdbcweb%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>jsconfig.json</title>
    <link href="https://wyf195075595.github.io/2023/02/08/programming/javascript/jsconfig/"/>
    <id>https://wyf195075595.github.io/2023/02/08/programming/javascript/jsconfig/</id>
    <published>2023-02-08T14:11:10.000Z</published>
    <updated>2023-02-08T14:28:44.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue项目中-jsconfig-json-文件是什么-有啥用？"><a href="#vue项目中-jsconfig-json-文件是什么-有啥用？" class="headerlink" title="vue项目中 jsconfig.json 文件是什么?有啥用？"></a><a href="https://so.csdn.net/so/search?q=vue%E9%A1%B9%E7%9B%AE&spm=1001.2101.3001.7020">vue项目</a>中 jsconfig.json 文件是什么?有啥用？</h3><blockquote><p>当您在工作空间中有一个定义项目上下文的jsconfig.json文件时，JavaScript体验会得到改进。</p></blockquote><p>目录中存在tsconfig.json文件表明该目录是 TypeScript 项目的根目录。该tsconfig.json文件指定编译项目所需的根文件和编译器选项。</p><p>JavaScript 项目可以使用jsconfig.json文件来代替，它的作用几乎相同，但默认启用了一些与 JavaScript 相关的编译器标志。</p><blockquote><p>jsconfig.json源于tsconfig.json，是TypeScript的配置文件。</p><p> jsconfig.json相当于tsconfig.json的“allowJs”属性设置为true</p></blockquote><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 主要作用是vscode导入使用别名时可以自动化提示文件路径 */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src&quot;</span>],</span><br><span class="line">      <span class="string">&quot;components/*&quot;</span>: [<span class="string">&quot;src/components/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;pages/*&quot;</span>: [<span class="string">&quot;src/pages/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;assets/*&quot;</span>: [<span class="string">&quot;src/assets/*&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 解决 prettier 对装饰器语法警告</span></span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;dist&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230208222816154.png" alt="image-20230208222816154"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;vue项目中-jsconfig-json-文件是什么-有啥用？&quot;&gt;&lt;a href=&quot;#vue项目中-jsconfig-json-文件是什么-有啥用？&quot; class=&quot;headerlink&quot; title=&quot;vue项目中 jsconfig.json 文件是什么?有啥用？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://so.csdn.net/so/search?q=vue%E9%A1%B9%E7%9B%AE&amp;spm=1001.2101.3001.7020&quot;&gt;vue项目&lt;/a&gt;中 jsconfig.json 文件是什么?有啥用？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当您在工作空间中有一个定义项目上下文的jsconfig.json文件时，JavaScript体验会得到改进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目录中存在tsconfig.json文件表明该目录是 TypeScript 项目的根目录。该tsconfig.json文件指定编译项目所需的根文件和编译器选项。&lt;/p&gt;
&lt;p&gt;JavaScript 项目可以使用jsconfig.json文件来代替，它的作用几乎相同，但默认启用了一些与 JavaScript 相关的编译器标志。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jsconfig.json源于tsconfig.json，是TypeScript的配置文件。&lt;/p&gt;
&lt;p&gt; jsconfig.json相当于tsconfig.json的“allowJs”属性设置为true&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="js" scheme="https://wyf195075595.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础</title>
    <link href="https://wyf195075595.github.io/2023/01/31/programming/java/mysql/"/>
    <id>https://wyf195075595.github.io/2023/01/31/programming/java/mysql/</id>
    <published>2023-01-31T13:00:00.000Z</published>
    <updated>2023-03-08T13:44:24.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装与删除"><a href="#安装与删除" class="headerlink" title="安装与删除"></a>安装与删除</h3><blockquote><p>通过exe 文件安装</p><p>卸载时再点击安装程序，选择 remove 即可卸载。卸载后还需删除两个地方文件。</p><ul><li>C:/ProgrameData/mySQL</li><li>C:/program Files(x86)/mySQL</li></ul><p>如果不删除干净，下次会安装不上</p></blockquote><h3 id="sql-DB-DBMS分别是什么？啥关系？"><a href="#sql-DB-DBMS分别是什么？啥关系？" class="headerlink" title="sql,DB,DBMS分别是什么？啥关系？"></a>sql,DB,DBMS分别是什么？啥关系？</h3><ul><li><p>DB: </p><p>  DataBase (数据库，数据库实际再电脑上以文件形式存在)</p></li><li><p>DBMS： </p><p>  DataBase Management System(数据库管理系统，常见 MYSQL，Oracle，DB2,SqlServer…)</p></li><li><p>SQL: </p><p>  结构化查询语句，是一门标准化通用语言。标准的sql适用于所有数据库产品</p></li></ul><p>关系： DBMS 执行 SQL 操作 DB</p><span id="more"></span><h3 id="什么是表？"><a href="#什么是表？" class="headerlink" title="什么是表？"></a>什么是表？</h3><blockquote><p>table 是数据库的基本组成单元，所欲数据仪表的形式组织，目的时可读性强</p><p>一个表包括行，列</p><ul><li>行： 数据</li><li>列：字段 【字段包括 字段名，数据类型，相关约束】</li></ul></blockquote><h3 id="SQL-语句分类"><a href="#SQL-语句分类" class="headerlink" title="SQL 语句分类"></a>SQL 语句分类</h3><ul><li>DQL：【查询】查询语句 select</li><li>DML：【操作】insert delete update 表数据增删改</li><li>DDL：【定义】create drop alter，表结构增删发</li><li>TCL： 【事务控制】commit，rollback 事务</li><li>DCL： 【数据控制】grant授权，revoke撤销权限</li></ul><!--more--><h3 id="DOS窗口命令"><a href="#DOS窗口命令" class="headerlink" title="DOS窗口命令"></a>DOS窗口命令</h3><ul><li><p>登录MySQL</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123</span><br></pre></td></tr></table></figure></li><li><p>数据库操作</p><p>  命令结束最好带; 号，否则可能判断语句未结束，不执行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看数据库</span></span><br><span class="line">show databases</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line">create database xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 删除数据库</span></span><br><span class="line">drop database xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用数据库</span></span><br><span class="line">use xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查看表</span></span><br><span class="line">show tables</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查看表结构</span></span><br><span class="line">desc xxxprint</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查看创建表的语句</span></span><br><span class="line">show create table emp</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查看使用的是哪一个数据库</span></span><br><span class="line">select <span class="title function_">database</span><span class="params">()</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 查看版本</span></span><br><span class="line">select <span class="title function_">version</span><span class="params">()</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 初始化数据,执行外部sql 脚本文件创建表</span></span><br><span class="line">source D/xxxxx.sql</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="简单查询（DQL）"><a href="#简单查询（DQL）" class="headerlink" title="简单查询（DQL）"></a>简单查询（DQL）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意，分号结尾，不区分大小写</span></span><br><span class="line">select 字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span> ... from 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询列别名, as 关键字可以省略</span></span><br><span class="line">select ename,sal * <span class="number">12</span> as <span class="string">&#x27;年薪&#x27;</span> from emp;</span><br></pre></td></tr></table></figure><h4 id="单表条件查询"><a href="#单表条件查询" class="headerlink" title="单表条件查询"></a>单表条件查询</h4><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230202222207356.png" alt="image-20230202222207356"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select 字段... <span class="number">5</span></span><br><span class="line">    from 表名 <span class="number">1</span></span><br><span class="line">    where 条件 <span class="number">2</span></span><br><span class="line">    group by 条件 <span class="number">3</span></span><br><span class="line">    having 条件 <span class="number">4</span></span><br><span class="line">    order by 关键字 <span class="number">6</span></span><br><span class="line">    limit ; <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序 asc 升序,desc 降序</span></span><br><span class="line">    <span class="comment">// 查询 ename 字段 从 emp 表 排序 以 sal 字段 升序  sal1 降序 </span></span><br><span class="line">    <span class="comment">// z只有前面字段无法排序时才会启用后面字段</span></span><br><span class="line">select ename from emp order by sal asc, sal1 desc;</span><br></pre></td></tr></table></figure><h5 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h5><p><strong>不可直接使用在where 语句</strong>，因为 group by 实在where 执行之后才会执行</p><p><strong>分组函数在group by 之后执行</strong></p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>count</td><td>取得记录</td></tr><tr><td>sum</td><td>求和，自动忽略null数据</td></tr><tr><td>avg</td><td>取平均值</td></tr><tr><td>max</td><td>取最大值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 对某字段求和</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 统计</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">所有数据库规定，只要与null 参与的运算结果一定是null.</span></span><br><span class="line"><span class="comment">使用 ifnull函数</span></span><br><span class="line"><span class="comment">ifnull(可能时null的字段, 被当作什么处理)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> enamr, ifnull(comn, <span class="number">0</span>) <span class="keyword">as</span> comm <span class="keyword">from</span> emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="count-与-count-某个字段的区别？"><a href="#count-与-count-某个字段的区别？" class="headerlink" title="count * 与 count 某个字段的区别？"></a><strong>count * 与 count 某个字段的区别？</strong></h5><blockquote><p>count * 统计所欲条数， count 字段名统计该字段不为空的条数</p></blockquote><h5 id="group-by-和-having"><a href="#group-by-和-having" class="headerlink" title="group by 和 having"></a><strong>group by 和 having</strong></h5><blockquote><p>**group by  后 才能使用 having</p><p>group by: 按照某个字段或者某些字段进行分组</p><p>having： 对分组之后的数据经行筛选</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出每个工作岗位的最高工资</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出工资高于平均工资的员工</span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure><h5 id="having-和-group-by-如何选择？"><a href="#having-和-group-by-如何选择？" class="headerlink" title="having 和 group by 如何选择？"></a><strong>having 和 group by 如何选择？</strong></h5><p>eg: 找出每个部门最高薪资，要求显示薪资大于2900的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出每个部门最大薪资、</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) ,deptno <span class="keyword">from</span> emp <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出薪资大于 <span class="number">2900</span> 【效率低】</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) ,deptno <span class="keyword">from</span> emp <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="built_in">max</span>(sal) <span class="operator">&gt;</span> <span class="number">2900</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 最佳方案</span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">max</span>(sal) ,deptno <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">2900</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure><p><strong>但是，当where 条件满足不了？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 要求平均薪资大于<span class="number">2000</span></span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">max</span>(sal) ,deptno <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="built_in">avg</span>(sal) <span class="keyword">by</span> deptno; <span class="operator">/</span><span class="operator">/</span> 错误，<span class="keyword">where</span> 后面不能用分组</span><br><span class="line"></span><br><span class="line">此时只能用 <span class="keyword">having</span></span><br></pre></td></tr></table></figure><h5 id="多个字段联合起来一起分组？"><a href="#多个字段联合起来一起分组？" class="headerlink" title="多个字段联合起来一起分组？"></a><strong>多个字段联合起来一起分组？</strong></h5><blockquote><p>将多个字段拼在一起看成一个字段</p></blockquote><p>eg: 找出每个部门不同工作岗位的最高薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,jop,<span class="built_in">max</span>(sal)</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> deptno, job;</span><br></pre></td></tr></table></figure><h4 id="关于查询结果的去重"><a href="#关于查询结果的去重" class="headerlink" title="关于查询结果的去重"></a>关于查询结果的去重</h4><blockquote><p>dsitinc： 修饰查询的字段名，只能出现在所有字段的最前面</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 表示所有字段联合去重</span><br><span class="line"><span class="keyword">select</span> distinc deptno,jop <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><blockquote><p>实际开发中，大部分业务都不是单表查询数据发，一般都是夺标联合查询取最终结果</p></blockquote><h5 id="连接查询的分类？"><a href="#连接查询的分类？" class="headerlink" title="连接查询的分类？"></a>连接查询的分类？</h5><blockquote><p>根据语法划分：</p><p>SQL92（老DBA在使用）</p><p>SQL99（比较新）</p></blockquote><p>根据连接方式划分，包括：</p><ul><li><p>内连接</p><blockquote><p>假设A和B表经行连接，使用内连接的话，凡是A表和B表能匹配的上的记录查询出来，这就是内连接。两张表平级，没有主副</p></blockquote><ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li><p>外连接</p><blockquote><p>假设A和B表进行连接，使用外连接的话。一张是主表，主要查询主表中的数据捎带查询附表中的数据，当副表中没有数据和主表中的数据匹配上，副表自动模拟出NULL与之匹配</p></blockquote><ul><li>左外连接（左连接，左边是主表）</li><li>右外连接（右连接，右边是主表）</li></ul></li><li><p>全连接（很少用）</p></li></ul><h5 id="笛卡儿积现象"><a href="#笛卡儿积现象" class="headerlink" title="笛卡儿积现象"></a>笛卡儿积现象</h5><blockquote><p>如果两张表连接查询没有加限制条件，则结果是两张表记录的条数乘积</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询所有员工的部门名称</span><br><span class="line"><span class="keyword">select</span> e.ename,d.dname <span class="keyword">from</span> emp e,dept d;</span><br></pre></td></tr></table></figure><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><blockquote><p>条件是等量关系</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询每个员工的部门名称，要求显示员工名和部门名</span><br><span class="line"></span><br><span class="line">SQL92:</span><br><span class="line"><span class="keyword">select</span> e.ename ,d.dname</span><br><span class="line"><span class="keyword">from</span> emp e, dept d</span><br><span class="line"><span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line">SQL99:(常用)</span><br><span class="line"><span class="keyword">select</span> e.ename ,d.dname</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line">内连接语法：<span class="keyword">inner</span> <span class="keyword">join</span> 简写 <span class="keyword">join</span></span><br><span class="line">...</span><br><span class="line">A</span><br><span class="line"><span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">连接条件</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h5><blockquote><p>连接条件是非等值关系</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出每个员工的工资等级，要求显示员工名称，工资，工资等级</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.namme, e.sal, s.lv</span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal vetween s.losal <span class="keyword">and</span> s.hisal;<span class="operator">/</span><span class="operator">/</span> <span class="keyword">no</span> 条件不是等量关系</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><blockquote><p>一张表看作两张比表,自己连接自己</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出每个员工的上级领导，要求显示员工的姓名和对应领导名字。员工表中有领导和员工 mar 字段 存储了员工的编号</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, m.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> emp m</span><br><span class="line"><span class="keyword">on</span> e.mar <span class="operator">=</span><span class="operator">=</span> m.empno;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 内连接查询大Boss 查不出来</span><br></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, m.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp m</span><br><span class="line"><span class="keyword">on</span> e.mar <span class="operator">=</span><span class="operator">=</span> m.empno;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 外连接可以查出大Boss 数据 对应领导 <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询哪个部门没有人</span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> dmp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> dep d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">where</span> e.ename <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h5 id="三张表以上的表连接查询"><a href="#三张表以上的表连接查询" class="headerlink" title="三张表以上的表连接查询"></a>三张表以上的表连接查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出每一个员工的部门名称以及工资情况</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.name, d.name, s.grade, e1.enmae <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp e1</span><br><span class="line"><span class="keyword">on</span> e.mgr <span class="operator">=</span> e1.empno;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 先查A <span class="operator">+</span> B，在查A <span class="operator">+</span> C</span><br><span class="line">...</span><br><span class="line">A</span><br><span class="line"><span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">join</span> C</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="子嵌套查询"><a href="#子嵌套查询" class="headerlink" title="子嵌套查询"></a>子嵌套查询</h4><blockquote><p>select 语句中嵌套select语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出高于平均薪资的员工信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出每个部门平均薪资等级</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">1</span>、找出每个部门平均薪水（按照部门编号分组，求sal）</span><br><span class="line"><span class="keyword">select</span> e.deptno ,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">2</span>、将上一步的查询结果当作临时表t, 让t和表 salgrade 连接，条件是: t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出所有员工的部门名称</span><br><span class="line"><span class="keyword">select</span> e.ename (</span><br><span class="line"><span class="keyword">select</span> d.ename <span class="keyword">from</span> dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line">) sd dname</span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><blockquote><p>将查询的结果集相加, 可以是两张不相干的表数据查询结果整合。</p><p>但是两个表查询结果数量一致时才能整合</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 找出公估工作岗位是 SALEMA和MANAGER的员工</span><br><span class="line"><span class="keyword">select</span> ename,job </span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALEMA&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">where</span> jon <span class="keyword">in</span> (<span class="string">&#x27;SALEMA&#x27;</span> ,<span class="string">&#x27;MANAGER&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALEMA&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><blockquote><p>limit 是 MySQL 特有的，其他数据库么有</p><p>limit 起始位置，条数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">10</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 第一页 pageSise <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span>, pageSise</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 下一页, n代表页数 <span class="number">1</span> 开始</span><br><span class="line">pageSise<span class="operator">*</span>(n <span class="operator">-</span> <span class="number">1</span>), pageSise</span><br></pre></td></tr></table></figure><h3 id="创建表及操作"><a href="#创建表及操作" class="headerlink" title="创建表及操作"></a>创建表及操作</h3><p>建表语句语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">    字段<span class="number">1</span> 数据类型,</span><br><span class="line">    字段<span class="number">2</span> 数据类型,</span><br><span class="line">    字段<span class="number">3</span> 数据类型,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h5><ul><li>int 整数型</li><li>bight 长整型</li><li>float 浮点型</li><li>char 定长字符串</li><li>date 日期类型</li><li>BLOB 二进制大对象（图片视频流媒体信息）</li><li>CLOB 字符大对象 (储存较大文本，4G字符串)</li></ul><h5 id="insert-语句插入数据"><a href="#insert-语句插入数据" class="headerlink" title="insert 语句插入数据"></a>insert 语句插入数据</h5><blockquote><p>语法格式：</p><p>insert into 表明 （字字段2,字段2,段3,..） values (值1, 值2, 值3);</p><p>字段和值数量相同    </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student</span><br><span class="line">(name,class,birth)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;张三&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2006-1-1&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;李四&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2006-1-2&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h5><blockquote><p>语法：将后边查询的内容插入到 dept1表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept1 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure></blockquote><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><blockquote><p>语法格式：</p><p>update 表名 set 字段1=值1,字段名2=值2….where…</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;王五&#x27;</span> <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><blockquote><p>语法格式：</p><p>delete from 表名 where 条件;</p><p><strong>没有条件全部删除</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept1 <span class="keyword">where</span> <span class="keyword">no</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="删除大表"><a href="#删除大表" class="headerlink" title="删除大表"></a><strong>删除大表</strong></h5><blockquote><p>delete 删除不清空内存，可以回滚操作。删除效率慢，尤其是大数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 表的截断，删除快，不可回滚</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp1;</span><br></pre></td></tr></table></figure></blockquote><h5 id="表结构的修改"><a href="#表结构的修改" class="headerlink" title="表结构的修改"></a>表结构的修改</h5><blockquote><p>通过 工具 来操作</p></blockquote><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><blockquote><p>为了保证数据合法性，完整性</p></blockquote><ul><li>非空约束 （not null）字段不能为空</li><li>唯一约束 （unique）字段不能重复</li><li>主键约束 （primary key）既不能为空也不能为null，也不能重复</li><li>外键约束 （foreign key）</li><li>检查约束 （check）MySQL不支持</li></ul><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">not</span> <span class="keyword">null</span>,<span class="operator">/</span><span class="operator">/</span> 列级约束</span><br><span class="line">    字段<span class="number">2</span> 数据类型 ,</span><br><span class="line">    字段<span class="number">3</span> 数据类型 ,</span><br><span class="line">    <span class="keyword">unique</span>(字段<span class="number">1</span>,字段<span class="number">2</span>)<span class="operator">/</span><span class="operator">/</span> 多个字段联合起来添加约束<span class="keyword">unique</span>【表级约束】</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_class if <span class="keyword">exists</span> t_class;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,<span class="operator">/</span><span class="operator">/</span> 列级约束</span><br><span class="line">    name <span class="type">varchar</span> ,</span><br><span class="line">    address <span class="type">varchar</span> ,</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h5><blockquote><p>表示这个字段引用其 它表的某个字段，并且只能是 其他表的某个字段 中有的值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class(</span><br><span class="line">    cno <span class="type">int</span>,</span><br><span class="line">    cname verchar(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(cno)</span><br><span class="line">);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 被引用的字段要拥有唯一性，一般都是引用主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_studenet(</span><br><span class="line">    cno <span class="type">int</span>,</span><br><span class="line">    sname verchar(<span class="number">255</span>),</span><br><span class="line">    classno <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key(classno) reference t_class(c_o)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><blockquote><p>表默认的存储引擎是 InnoDB</p><p>show create table 表名，可见</p><p>存储引擎这个名字只有在MySQL中存在(理解为存储方式)，每一个存储引擎都有优缺点</p><p>查看当前 MySQL 支持的存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines \G</span><br><span class="line"><span class="comment">-----------------------------------</span></span><br><span class="line">Engine: InnoDB</span><br><span class="line">     Support: <span class="keyword">DEFAULT</span></span><br><span class="line">     Comment: Supports transactions, <span class="type">row</span><span class="operator">-</span>level locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys</span><br><span class="line">Transactions: YES</span><br><span class="line">          XA: YES</span><br><span class="line">  Savepoints: YES</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 支持事务，外键，行级锁，外键。安全得到保障。<span class="keyword">SQL</span>服务器崩溃后提供自动恢复</span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line">MyISAM</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">可悲压缩，节省储存空间。并且可以转换为只读表，提高检索效率</span><br><span class="line">缺点：不持支事务</span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line">MEMORY 存储引擎</span><br><span class="line"><span class="operator">-</span>表数据及索引存储在内存中，查询贼快。数据易丢失</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote><p>一个事务是一个完整的业务逻辑单元，不可再分</p><p>比如：银行账户转账，从A账户向B账户转账1000，需要</p><p>A账户减1000，B账户加1000</p><p><strong>一条语句可以搞定的事不需要事务</strong></p></blockquote><p><strong>和事务相关的语句：DML语句（insert delete update）</strong></p><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230205153456211.png" alt="image-20230205153456211"></p><h5 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h5><blockquote><p>ACID</p></blockquote><ul><li>A：原子性：事务最小的单元，不可拆分</li><li>B：一致性：事务必须保证多条DML语句同时成功或同时失败</li><li>Ｃ：隔离性：事务A与事务B之间具有隔离</li><li>D：持久性：持久性事最终数据必须持久化到硬盘文件中，事务才算结束</li></ul><h4 id="关于事务之间的隔离性"><a href="#关于事务之间的隔离性" class="headerlink" title="关于事务之间的隔离性"></a>关于事务之间的隔离性</h4><p>事务隔离性存在隔离级别，理论上隔离级别包括4个:</p><ul><li><p>第一级别: 读未提交 (read uncommitted)对方事务还没有提交，我们当前事务可以读取到对方未提交的数据读未提交存在脏读 (Dirty Read)现象:表示读到了脏的数据。</p></li><li><p>第二级别: 试已提本 (read committed)<br>  对方事务提交之后的数据我方可以读取到。这种隔离级别解决了: 脏读现象没有了。读已提交存在的问题是:不可重复读。</p></li><li><p>第三级别:可重复读 (repeatable read)<br>  这种隔离级别解决了:不可重复读问题。这种隔离级别存在的问题是:读取到的数据是幻象。</p></li><li><p>第四级别: 序列化读/串行化读解决了所有问题。效率低。需要事务排队。</p></li></ul><blockquote><p>MySQL事务默认情况下是自动提交的，任意DML语句执行完就提交一次</p><p>关闭自动提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 开启事务</span><br><span class="line"><span class="keyword">start</span>　transaction;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 事务回滚，</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 提交事务</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 设置事务级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transation isolation level read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查看全局事务隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span>.tx_isolation;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote><p>索引相当于一本书的目录，通过目录可以快速找到对应的资源。</p><p>数据库中查询一张表有两种检索方式：</p><ol><li><p>全表扫描</p></li><li><p>根据索引检索（效率高）、</p><p> 缩小了检索范围</p></li></ol></blockquote><h5 id="索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。"><a href="#索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。" class="headerlink" title="索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。"></a>索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。</h5><h5 id="什么时候考虑给字段添加索引？"><a href="#什么时候考虑给字段添加索引？" class="headerlink" title="什么时候考虑给字段添加索引？"></a>什么时候考虑给字段添加索引？</h5><ul><li>数据量庞大</li><li>字段很少的DML操作，（字段修改，索引也需要维护）</li><li>该字段经常出现在where字句中</li></ul><blockquote><p>主键和具有unique约束的字段会自动添加索引</p></blockquote><h5 id="查看sql语句的执行计划"><a href="#查看sql语句的执行计划" class="headerlink" title="查看sql语句的执行计划"></a>查看sql语句的执行计划</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h5 id="添加删除索引"><a href="#添加删除索引" class="headerlink" title="添加删除索引"></a>添加删除索引</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 添加索引</span><br><span class="line"><span class="keyword">create</span> inedx emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除</span><br><span class="line"><span class="keyword">drop</span> inedx emp_ename_index;</span><br></pre></td></tr></table></figure><h5 id="索引实现原理"><a href="#索引实现原理" class="headerlink" title="索引实现原理"></a>索引实现原理</h5><blockquote><p>通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的物理地址”最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是最高的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span> :通过索引转换为:</span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> 物理地址 <span class="operator">=</span> <span class="number">0x3</span>;</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230205162205142.png" alt="image-20230205162205142"></p><h5 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h5><ul><li>单一索引：给单个字段添加索引</li><li>复合索引：给多个字段联合添加1个索引</li><li>主键索引</li><li>唯一索引</li></ul><p><strong>索引的失效</strong></p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> enamefrom emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%A%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的。</p></blockquote><h3 id="视图（view）"><a href="#视图（view）" class="headerlink" title="视图（view）"></a>视图（view）</h3><blockquote><p>站在不同角度去看到数据</p><p>对视图进行增删改查，会影响到原表数据</p></blockquote><h4 id="视图的作用？"><a href="#视图的作用？" class="headerlink" title="视图的作用？"></a><strong>视图的作用？</strong></h4><blockquote><p>可以隐藏数据库真实字段名等实现细节。保密级别高的系统，数据库只提供相关的视图，Java程序员只对视图操作</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建视图, 只有查询语句可以创建视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myview <span class="keyword">as</span> <span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除视图</span><br><span class="line"><span class="keyword">drop</span> myview myview;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 通过视图修改原表数据。</span><br><span class="line"><span class="keyword">update</span> myviewl <span class="keyword">set</span> ename<span class="operator">=</span><span class="string">&#x27;hehe&#x27;</span>,sal<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 通过视图删除原表数据。</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span>,myview1 <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br></pre></td></tr></table></figure><h3 id="DBA命令"><a href="#DBA命令" class="headerlink" title="DBA命令"></a>DBA命令</h3><ul><li><p>新建用户</p></li><li><p>授权</p></li><li><p>回收权限</p></li><li><p>导入导出</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> wondows dos 命令</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 导出库</span><br><span class="line">mysqldump 库名<span class="operator">&gt;</span>D:\xxx.sql(导出的路径) <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 导出指定表</span><br><span class="line"></span><br><span class="line">mysqldump 库名 表名<span class="operator">&gt;</span>D:\xxx.sql <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 导入库</span><br><span class="line"><span class="keyword">create</span> database 库名</span><br><span class="line">use 库名</span><br><span class="line">source <span class="keyword">sql</span>文件路径</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h3><blockquote><p>三范式设计，不会产生数据冗余</p></blockquote><ul><li><p>第一范式:任何一张表都应该<strong>有主键</strong>，并且每一个<strong>字段原子性不可再分</strong></p></li><li><p>第二范式:建立在第一范式的基础之上，所有非主键字段完全依赖主键，<strong>不能产生部分依赖</strong>。</p></li><li><p>建立在第二范式的基础之上，所有非主键字段直接依赖主键，<strong>不能产生传递依赖</strong>。</p></li></ul><blockquote><p>实际开发中，以实现用户需求为主，有时候那冗余换执行速度</p></blockquote><blockquote><p>一对一设计：</p><p>主键共享、外键唯一</p><p>一对多设计：</p><p>两张表，多的表加外键</p><p>多对多设计：</p><p>三张表，关系表两个外键。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装与删除&quot;&gt;&lt;a href=&quot;#安装与删除&quot; class=&quot;headerlink&quot; title=&quot;安装与删除&quot;&gt;&lt;/a&gt;安装与删除&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过exe 文件安装&lt;/p&gt;
&lt;p&gt;卸载时再点击安装程序，选择 remove 即可卸载。卸载后还需删除两个地方文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:/ProgrameData/mySQL&lt;/li&gt;
&lt;li&gt;C:/program Files(x86)/mySQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不删除干净，下次会安装不上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;sql-DB-DBMS分别是什么？啥关系？&quot;&gt;&lt;a href=&quot;#sql-DB-DBMS分别是什么？啥关系？&quot; class=&quot;headerlink&quot; title=&quot;sql,DB,DBMS分别是什么？啥关系？&quot;&gt;&lt;/a&gt;sql,DB,DBMS分别是什么？啥关系？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DB: &lt;/p&gt;
&lt;p&gt;  DataBase (数据库，数据库实际再电脑上以文件形式存在)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DBMS： &lt;/p&gt;
&lt;p&gt;  DataBase Management System(数据库管理系统，常见 MYSQL，Oracle，DB2,SqlServer…)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL: &lt;/p&gt;
&lt;p&gt;  结构化查询语句，是一门标准化通用语言。标准的sql适用于所有数据库产品&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系： DBMS 执行 SQL 操作 DB&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="数据库" scheme="https://wyf195075595.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="https://wyf195075595.github.io/2023/01/09/programming/java/%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <id>https://wyf195075595.github.io/2023/01/09/programming/java/%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/</id>
    <published>2023-01-09T05:00:00.000Z</published>
    <updated>2023-02-14T03:00:11.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-特性"><a href="#java-特性" class="headerlink" title="java 特性"></a>java 特性</h2><h3 id="Java-程序的版本"><a href="#Java-程序的版本" class="headerlink" title="Java 程序的版本"></a>Java 程序的版本</h3><blockquote><p>java SE (标准版)</p><p>java EE（企业版）</p><p>java ME（精简版）</p></blockquote><h3 id="java-程序可移植性"><a href="#java-程序可移植性" class="headerlink" title="java 程序可移植性"></a>java 程序可移植性</h3><blockquote><p>什么是可移植性？</p><p>java 程序可以做到一次编译，到处运行。可就是说可以运行到windows,linux等操作系统上。这个被称作Java程序的可移植性，或者叫跨平台。</p><p>如何实现呢？</p><p>Windows操作系统于Linux操作系统的内核肯定不一样，系统执行指令的而方式也不一样。 Java程序不能直接和系统打交道，因为Java程序只有一份。操作系统原理都不同</p><p>解决：</p><p>sum团队想到了一个办法，他们让Java程序运行在一台虚拟的计算机中，这个虚拟计算机叫Java虚拟机，简称JVM。Java虚拟机再和底层操作系统打交道。</p><p>这个虚拟机不能直接安装，而是通过安装适合自己操作系统的 <strong>java jdk</strong> 来实现的</p></blockquote><h3 id="Java-的加载与执行"><a href="#Java-的加载与执行" class="headerlink" title="Java 的加载与执行"></a>Java 的加载与执行</h3><blockquote><p>编译阶段主要任务是检查 Java 源程序是否符合 Java 语法（不进行运算），符合则生成正常字节码文件 (xxx.class)。不符合则无法生成字节码文件</p></blockquote><p>.java -&gt; .class -&gt;     类装载器 -&gt; java 虚拟机（JVM） -&gt; 操作系统 -&gt; 硬件平台</p><span id="more"></span><p><strong>前两步为编译阶段，后面为运行阶段。两步操作可以在不同系统执行</strong></p><blockquote><ol><li><p>.java 是 java 程序源文件（源代码）必须符合Java 编码 规范</p></li><li><p>class 编译后的文件（字节码文件），使用 javac 编译源文件生成</p><p> javac 是一个java编译工具/命令，一个Java 源文件可编译生成多个 .class 文件。</p><p> 语法：javac java源文件路径</p><p> 字节码文件是最终要执行的文件，所以删除Java源文件也不影响Java程序运行效果。但一般不删除源文件，以防需要修改。</p><p> class 文件拷贝到其他操作系统也是可以运行的</p></li><li><p>安装jdk后除了自带 javac.exe, 还有一个工具/命令 java.exe，主要负责运行阶段</p><p> 语法：java 类名</p><p> 例如：硬盘上有一个 A.class ,那么执行 java A。运行程序不要带 .class</p></li><li><p>运行阶段</p><p> 在DOS窗口运行：java A</p><p> Java.exe 命令会启动Java虚拟机（JVM），JVM 会启动类加载器ClassLoader 去硬盘上搜索 A.class文件，找到文件则将该字节码文件装载到JVM当中。JVM然后将A.class字节码文件解释成 二进制10101010这样的数据，最后由操作系统执行二进制文件和底层平台经行交互。</p></li></ol></blockquote><h3 id="安装jdk-jdk-jre-jvm-关系"><a href="#安装jdk-jdk-jre-jvm-关系" class="headerlink" title="安装jdk,jdk,jre,jvm 关系"></a>安装jdk,jdk,jre,jvm 关系</h3><ul><li>jdk    开发工具包,可单独安装，安装时会自带安装jre</li><li>jre     开发运行环境，包括 jvm，可单独安装</li><li>jvm    Java虚拟机</li></ul><h3 id="jdk-目录介绍"><a href="#jdk-目录介绍" class="headerlink" title="jdk 目录介绍"></a>jdk 目录介绍</h3><blockquote><p>bin目录： 里面存放了很多命令，如 javac.exe,java.exe</p><p>db目录：</p><p>jre目录：自带的开发运行环境</p><p>lib目录：</p><p>include目录:</p></blockquote><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul><li><p>系统环境变量 path</p><p>  可以通过配置 path,让命令在DOS窗口任意 目录下使用，相当于系统全局变量</p></li><li><p>java 环境变量 classpath, 不配也没事（默认当前路径）</p><p>  默认ClassLoader 在当前目录路径下加载 xxx.class 字节码，配置classpath 可以给 ClassLoader 类加载器指定路径。更改默认指定路径</p><p>  配置 <strong>classpath=.</strong>    ，相当于指定默认目录就是当前路径</p></li></ul><h3 id="Java-注释"><a href="#Java-注释" class="headerlink" title="Java 注释"></a>Java 注释</h3><blockquote><p>工具  javadoc.exe 可以将注释中的文字添加到帮助文档中。注释跟 js 一样</p></blockquote><h3 id="Java-SE类库的源码位置？"><a href="#Java-SE类库的源码位置？" class="headerlink" title="Java SE类库的源码位置？"></a>Java SE类库的源码位置？</h3><ul><li>SE库字节码：C:\Program Files\Java\jdk1.7.0_51\jre\lib\rt.jar</li><li>SE库源码：C:\Program Files\Java\jdk1.7.0_51\src.zip</li></ul><h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><blockquote><p>Java 语言采用 Unicode 编码方式，实际开发中使用 utf-8 较多</p></blockquote><p>javac xxx.java 编译错误： 编码GBK的不可映射字符</p><p>解决方法：</p><p>以这种格式对文件经行重新编译    </p><p>javac -encoding utf-8 xxx.java</p><h2 id="Java-语法"><a href="#Java-语法" class="headerlink" title="Java 语法"></a>Java 语法</h2><h3 id="public-class-和-class-的区别"><a href="#public-class-和-class-的区别" class="headerlink" title="public class 和 class 的区别"></a>public class 和 class 的区别</h3><ul><li>一个Java源文件当中可以定义多个class</li><li>一个Java源文件当中 public class 不是必须的</li><li>一个class会定义生成一个 xxx.class字节码文件</li><li>一个Java源文件当中定义公开的类的话，只能有一个，并且该类必须和Java源文件名称一致。</li><li>每一个class当中都可以编写main方法，都可以设置程序入口。要执行B.class 中的main方法，执行 java B。如果B中没有main主方法，会报错</li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><blockquote><p>Java语言中的标识符。</p></blockquote><h4 id="什么是标识符？"><a href="#什么是标识符？" class="headerlink" title="什么是标识符？"></a>什么是标识符？</h4><p>在Java源码程序中，可以自己命名的单词都是标识符。</p><p>如：类名，方法名，常量名，接口名…</p><h4 id="标识符的命名规则？"><a href="#标识符的命名规则？" class="headerlink" title="标识符的命名规则？"></a>标识符的命名规则？</h4><ul><li><p>一个合法的标识符只能由 数字，字母，下划线_，美元符号$ 组成，不能有其他符号。</p></li><li><p>不能数字开头</p></li><li><p>严格区分大小写</p></li><li><p>关键字不能用</p></li><li><p>理论上无长度限制</p></li></ul><h4 id="标识符的命名规范？"><a href="#标识符的命名规范？" class="headerlink" title="标识符的命名规范？"></a>标识符的命名规范？</h4><p>只是一种规范，不输入语法，不遵守规范编译也可以通过。但是不方便他人理解代码</p><ul><li>最好见名知意</li><li>遵守驼峰命名</li><li>类名，接口名：首字母大写（大驼峰</li><li>变量，方法名：首字母小写（小驼峰</li><li>常量名：全部大写</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>在Java中关键字都是小写</p><table><thead><tr><th>class</th><th>extend</th><th>implement</th><th>interface</th><th>important</th></tr></thead><tbody><tr><td>package</td><td>break</td><td>case</td><td>continue</td><td>default</td></tr><tr><td>do</td><td>if</td><td>else</td><td>for</td><td>return</td></tr><tr><td>switch</td><td>while</td><td>false</td><td>true</td><td>…</td></tr></tbody></table><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><blockquote><p>java 语言中所有字符串类型字面值必须使用双引号括起来，双引号是英文的</p><p>Java 语言中所有的字符型字面量必须使用单引号括起来，单引号是英文的</p></blockquote><ul><li>10，1200</li><li>3.14</li><li>“abc”,”123”  属于字符串</li><li>‘a’,’1’,’人’  属于字面值</li><li>true,false</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量要求储存的具体的“数据”必须和变量的“数据类型”一致，当不一致的时候编译报错</p></blockquote><h4 id="数据类型的作用？"><a href="#数据类型的作用？" class="headerlink" title="数据类型的作用？"></a>数据类型的作用？</h4><ul><li>不同数据类型底层分配不同大小的空间</li><li>数据类型是指导程序运行阶段应该分配多大的内存空间</li></ul><h4 id="声明、定义变量的语法格式："><a href="#声明、定义变量的语法格式：" class="headerlink" title="声明、定义变量的语法格式："></a>声明、定义变量的语法格式：</h4><p><strong>数据类型 变量名</strong></p><h4 id="变量的分类："><a href="#变量的分类：" class="headerlink" title="变量的分类："></a>变量的分类：</h4><ul><li><p>局部变量</p><p>  在方法体当中声明的变量叫局部变量</p></li><li><p>成员变量</p><p>  在方法体外【类体之内】声明的变量叫做成员变量</p></li></ul><p><strong>不同作用域下变量名可以相同</strong>，Java 遵循就近原则 </p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>基本数据类型</strong></p><ol><li>整数型 int，byte，short，long</li><li>浮点型 float，double</li><li>布尔型 boolean</li><li>字符型 char 【表示现实中的文字，通过ASC码表转换】</li></ol><h4 id="八种基本数据类型占用空间大小："><a href="#八种基本数据类型占用空间大小：" class="headerlink" title="八种基本数据类型占用空间大小："></a>八种基本数据类型占用空间大小：</h4><table><thead><tr><th>基本数据类型</th><th>占用空间大小(byte)</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-2^7~2^7-1(-128,127)</td><td>0</td></tr><tr><td>short</td><td>2</td><td>-2^15~2^15-1(-32768,32767)</td><td>0</td></tr><tr><td>int</td><td>4</td><td>-2^31~-2^31-1</td><td>0</td></tr><tr><td>long</td><td>8</td><td>-2^63~2^63-1</td><td>0L</td></tr><tr><td>float</td><td>4</td><td>大约±3.40282347E+38F(有效位15)</td><td>0</td></tr><tr><td>double</td><td>8</td><td>大约±1.79769313486231570E+308(有效位15)</td><td>0.0</td></tr><tr><td>boolean</td><td>1</td><td>true/false</td><td>false</td></tr><tr><td>chart</td><td>2</td><td>0~2^16-1(0, 65535)</td><td>\u0000</td></tr></tbody></table><blockquote><p>字节（byte）：</p><p>1 byte = 8 bit 【一个字节=8个比特位】1个比特位表示一个二进制位：1/0</p><p>1 KB = 1024 Byte</p><p>1 MB = 1024 KB</p><p>1 GB = 1024 MB</p><p>byte 类型最大值： 2的7次方 - 1，127</p><p>byte 类型最小值：-128</p><p>byte 类型可以表示 256 个不同的数字</p></blockquote><h4 id="关于八种基本数据类型的默认值：一切向0看齐"><a href="#关于八种基本数据类型的默认值：一切向0看齐" class="headerlink" title="关于八种基本数据类型的默认值：一切向0看齐"></a>关于八种基本数据类型的默认值：<strong>一切向0看齐</strong></h4><blockquote><p>变量遵守这个语法：必须先声明，再赋值，才能访问。</p><p>成员变量没有手动赋值系统默认会赋值，但是局部变量不会</p></blockquote><p><strong>引用数据类型</strong></p><p>字符串 “abc” 不属于基本数据类型，属于 “引用数据类型”，字符属于基本数据类型：</p><h4 id="char-与-转译字符"><a href="#char-与-转译字符" class="headerlink" title="char 与 转译字符"></a>char 与 转译字符</h4><blockquote><p>chart 支持 中文(‘中’)，支持转义字符（’\n’）, 使用单引号括起来，</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个输出命令会换行</span></span><br><span class="line">System.out.println()</span><br><span class="line"><span class="comment">// 这个不会换行</span></span><br><span class="line">System.out.print()</span><br></pre></td></tr></table></figure><h4 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h4><blockquote><p>Java 语言当中的 <strong>“整数型字面量值”被默认当作 int 类型来处理</strong>。要让这个 “整数字面量值”后面添加 <strong>l/L</strong> ,建议使用大写<strong>L</strong></p></blockquote><p><strong>整数字面值的三种表示方式：</strong></p><ol><li>十进制：是一种缺省默认的方式</li><li>八进制：需要以0开始</li><li>十六进制：需要以0x开始</li></ol><p><strong>类型转换</strong></p><blockquote><p>int 是小容量，long 类型是大容量。小容量可以自动转换成大容量，称为自动类型转换机制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、可以自动转换为大容量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">y</span> <span class="operator">=</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、编译出错</span></span><br><span class="line"><span class="type">long</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">2147483648</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2147483648 字面量一开始会被当作int类型4个字节处理，但是这个字面值超出了int范围，所以报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决</span></span><br><span class="line"><span class="type">long</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">2147483648L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样一开始字面量就会被当作long类型处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、大容量转换小容量需要强制转换，但是运行阶段可能损失精度（慎用）</span></span><br><span class="line"><span class="comment">// 转换原理：将原始二进制数据前 32个比特（4字节）去掉</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>)z;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、int 转换为byte类型，只要不超出byte存储范围不需要强制转换 </span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span><span class="string">&#x27;// 编译出错</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><blockquote><p>浮点型存储的值都是近似值，现实世界中有些数字是无限循环小数，计算机存储资源有限，所以只能存储近似值</p><p>float 单精度【4个字节】</p><p>double 双精度【8个字节，精度较高】</p><p>对于财务类型软件，double精度还是过低，所以Java提供了另一个引用类型： Java.math.bigDecima</p></blockquote><p>在Java语言中，所有的浮点型字面值【3.0】，默认被当作 double 类型来处理，要想该字面值当作 float 类型来处理，需要在字面值后面添加 F/f;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.1</span>;<span class="comment">// 编译错误</span></span><br><span class="line"><span class="comment">// 5.1 默认是double类型大容量， float 是单精度小容量，需要强制转换符</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">float</span>)<span class="number">5.1</span>;<span class="comment">// 强制类型转换</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.1f</span>;<span class="comment">// 没有强制转换</span></span><br></pre></td></tr></table></figure><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><blockquote><p>只有两个值：true,false.</p><p>底层存储的时候Boolean类型占用1个字节，因为实际存储的时候false底层是0，true底层是1</p><p>主要使用在逻辑运算和条件控制语句中</p></blockquote><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><blockquote><ol><li><p>八种基本数据类型当中，除了<strong>Boolean</strong>类型其他类型都能互相转换</p></li><li><p>小容量向大容量转换，称为自动类型转换，容量从小到大：</p><p> byte &lt; (short = char) &lt; int &lt; long &lt; float &lt; double</p><p> 任何浮点类型不管占用多少个字节，都是比整数型容量大</p></li><li><p>小容量转大容量，必须加强制转换符，编译才能通过，但是运行阶段可能损失精度，慎用</p></li><li><p>当整数字面量没有超出<strong>byte，short，char</strong>的取值范围，可以直接赋值给<strong>byte，short，char</strong>类型的变量</p></li><li><p><strong>byte，short，char</strong>混合运算时，各自先转换成<strong>int</strong>类型在做运算</p></li><li><p>多种数据类型混合运算，先转换成容量最大的那种类型再做运算</p><p> <strong>编写.java文件只考虑编译，不考虑运行</strong></p></li></ol></blockquote><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table><thead><tr><th>算数运算符</th><th>+、-、*、/、++、–、%</th></tr></thead><tbody><tr><td>逻辑运算符</td><td>&amp;(与)、(或)、~(非)、^(异或)、&amp;&amp;(短路与)、||(短路或)</td></tr><tr><td>关系运算符</td><td>&lt;、&lt;=、&gt;=、==、!=</td></tr><tr><td>布尔运算符</td><td>&amp;&amp;、||、|、&amp;、！</td></tr><tr><td>位运算符</td><td>&amp;(与)、|(或)、~(非)、^(按位异)、&gt;&gt;(右移)、&gt;&gt;&gt;(右移，左边空出的位0填充)、&lt;&lt;(左移)</td></tr><tr><td>赋值类运算符</td><td>=、+=、-=、*=、/=、%/</td></tr><tr><td>字符串连接运算符</td><td>+</td></tr><tr><td>条件运算符</td><td>?:</td></tr><tr><td>其他运算符</td><td>instanceof、new</td></tr></tbody></table><p><strong>逻辑运算符</strong></p><ul><li><p>逻辑运算符 要求两边的算子都是 真/假（布尔类型），且最终运算结果也是一个布尔类型</p><p>  异或（两边的算子只要不一样，结果就是 true）</p></li><li><p>短路与和逻辑与的运算结果相同，只不过短路与存在短路现象</p></li><li><p>短路或和逻辑或的运算结果相同，只不过短路或存在短路现象</p></li></ul><p><strong>赋值运算符</strong></p><blockquote><p>扩展类的赋值运算符，不改变运算结果类型，假设最初这个变量类型是 byte 类型，无论怎么进行追加，追减，最终该变量的数据类型还是byte类型</p></blockquote><p>+运算符 在Java中的两个作用：</p><ul><li>加法运算，求和</li><li>字符串的连接运算</li></ul><p>当 “+” 运算符两边的数据都是字符串，一定是字符串连接运算。</p><ul><li>数字 + 数字 –&gt; 数字</li><li>数字 + “字符串” —&gt; “字符串” 【字符串连接】</li></ul><p>在一个表达式中可以出现多个 “+” 号，如果没有 括号，那么就是从左到右依次运算</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>Java控制语句可以分为7种</p><ul><li><p>控制选择结构语句</p><ul><li>if,else 括号中接受一个Boolean</li><li>switch 括号中接受一个 int/String</li></ul></li><li><p>控制循环结构语句</p><ul><li>for</li><li>while</li><li>do while</li></ul></li><li><p>改变控制语句顺序</p><ul><li><p>break </p><p>  作用在for,while,do..while</p></li><li><p>continue</p></li></ul></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>语法结构：</p><p>[修饰符列表] 返回值类型 方法名 (形参参数列表) {</p><p>​    方法体：</p><p>}</p><p>返回值类型可以是基本类型也可以是引用类型，当返回类型是viod时，方法体不能 使用 return 语句 返回值</p><p>修饰符列表 统一写成： public  static</p></blockquote><ol><li><p>对于方法的修饰符列表中有 static 关键字的：在方法体种调用时可以省略<strong>类名.</strong> </p></li><li><p>建议一个Java源文件当中只定义一个 class，清晰易读</p></li><li><p>方法的内存分配情况</p><p> <img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230111111814126.png" alt="image-20230111111814126"></p></li></ol><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><blockquote><p>同一个类中功能相似的方法可以共用同一个方法名，然后根据传入参数类型的不同来调用不同的方法</p></blockquote><p><strong>什么条件满足之后构成方法重载？</strong></p><ul><li>在同一个类</li><li>方法名相同</li><li>参数列表不同<ul><li>数量不同</li><li>顺序不同</li><li>类型不同</li></ul></li></ul><p><strong>方法重载和什么有关，和什么没有关系？</strong></p><ul><li>方法重载和方法名+参数列表有关系</li><li>方法重载和返回值类型无关</li><li>方法重载和修饰符无关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OverloadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sum(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">// 3</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> sum(<span class="number">1.0</span>, <span class="number">2.0</span>);<span class="comment">// 3.0</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> sum(<span class="number">1L</span>, <span class="number">2L</span>);<span class="comment">// 3L</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h3><blockquote><p>方法自调用就是递归</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乘法递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">chen</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * chen(--n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><blockquote><p>面向对象的三大特征：</p><ol><li>封装</li><li>继承</li><li>多态</li></ol><p>所有面向对象的编程语言都有这三大特征。</p><ol><li>面向对象的分析：OOA</li><li>面向对象的设计：OOD</li><li>面向对象的编程：OOP</li></ol></blockquote><h3 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h3><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230111154018456.png" alt="image-20230111154018456"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OOTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        通过一个类可以实例化N个对象</span></span><br><span class="line"><span class="comment">        语法： new 类名();</span></span><br><span class="line"><span class="comment">        new 运算符作用是创建对象，在JVM堆内存中开辟新的内存空间</span></span><br><span class="line"><span class="comment">        方法区内存：类加载时，class字节码代码片段被加载到该内存空间</span></span><br><span class="line"><span class="comment">        栈内存（局部变量）：方法代码执行时，会给该方法分配栈内存空间，压栈</span></span><br><span class="line"><span class="comment">        堆内存：new 的对象在堆内存中储存</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        Student 是个引用数据类型，s 是 变量，new Student() 是一个学生对象</span></span><br><span class="line"><span class="comment">        什么是引用？</span></span><br><span class="line"><span class="comment">        引用是一个变量，只不过这个变量中保存了另一个Java对象的内存地址</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        访问实例变量的语法格式：</span></span><br><span class="line"><span class="comment">        读取数据：引用.变量名</span></span><br><span class="line"><span class="comment">        修改数据：引用.变量名 = 值</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        不能直接通过 Student.no 访问</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        </span><br><span class="line">        s.no = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 学号</span></span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 性别</span></span><br><span class="line">    <span class="type">boolean</span> sex;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 住址</span></span><br><span class="line">    String addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成员变量没有赋值，则赋默认值， 引用类型默认值为 null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h3><blockquote><p>空引用访问“实例”相关数据一定会出现空指针异常</p><p>java.lang.NullPointerExption</p></blockquote><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote><p>封装的步骤：</p><ol><li><p>所有属性私有化，使用 private 关键字进行修饰，修饰的数据只能在本类中访问</p></li><li><p>对外提供简单的操作入口，如：读取和修改</p></li><li><p>set,get方法命名规范：</p><ul><li><p>public void setAge (int a) {</p><p>  ​    age = a;</p><p>  }</p></li><li><p>public int getAge () {</p><p>  ​    return age;</p><p>  }</p></li><li><p>调用：</p><p>  对于 有 static 修饰的方法采用 类名.方法名(实参)</p><p>  对于没有 static 修饰的方法采用 引用.方法名(实参)</p></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhang san&quot;</span>;</span><br><span class="line">    <span class="comment">// 把属性设置私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;somewhere interesting&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><ol><li><p>构造方法又被称为构造函数/构造器/Constructor</p></li><li><p>构造方法语法结构：</p><p> [修饰符列表] 构造方法名(形式参数列表) {</p><p> ​    构造方法体;</p><p> }</p></li><li><p>普通方法语法结构</p><p> [修饰符列表] 返回值类型 方法名(形式参数列表) {</p><p> ​    方法体;</p><p> }</p></li><li><p>当一个类没有定义构造方法，系统默认给该类提供一个无参构造函数，称 缺省构造器</p></li><li><p>构造方法除了 new 时调用，还可以手动调用 this()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无参数时调用次构造方法，默认设置日期 2020 12 12</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">12</span>);<span class="comment">// 这种语法只能出现在构造函数第一行，类似于 super</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><blockquote><p>关于Java中的this关键字</p></blockquote><ol><li><p>this是一个引用，this是一个变量，this变量中保存了内存地址指向自身，this存储在JVM堆内存Java对象内部</p></li><li><p>this 不能使用在带有static的方法中</p><p> 那么在 static 方法中怎么访问成员变量？</p><ul><li>方法中实例化对象获取引用访问</li><li>通过参数将实例传入</li><li>用 static 修饰成员变量，但在 非static 方法中不能用 this 访问只能用 <strong>类名.属性名</strong></li></ul></li></ol><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><blockquote><p>静态变量：在类加载时就初始化，不需要创建对象<strong>内存</strong>就在<strong>方法区</strong>开辟了</p><ul><li><p>static 关键字修饰的 属性，方法代表 类级别的和具体对象无关。需要使用 类名调用,引用方式也能调用【不建议】</p></li><li><p>非 static 关键字修饰的 属性，方法 代表对象级别的。需要引用去调用</p></li></ul></blockquote><p>可以使用 static 关键字来定义 <strong>静态代码块</strong></p><p>1、语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    java 语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、静态代码在类加载时执行，并只执行一次</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>关于Java 语言中的继承：</p></blockquote><ol><li><p>继承是面向对象的三大特征之一,三大特征分别是：封装，继承，多态</p></li><li><p>继承 <strong>“基本”</strong> 作用是：代码复用。但是继承 最重要 的作用是：有了继承才有以后”方法的覆盖”和多态机制。</p></li><li><p>继承语法格式：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] class 类名 extends 父类名 &#123;</span><br><span class="line">类体 = 属性 + 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java 语言当中的继承只支持单继承，一个类不能同时继承很多类，只能继承一个类</p></li><li><p>关于继承中的一些术语：</p><p> B类继承A类，其中：</p><p> ​    A类称为：父类，基类、超类、superclass</p><p> ​    B类称为: 子类，派生类、subclass</p></li><li><p>Java语言中子类继承父类都继承哪些数据呢？</p><ul><li><p>私有的不支持</p></li><li><p>构造方法不支持</p></li><li><p>其他数据都支持</p></li></ul></li><li><p>虽然Java语言只支持单继承，但是一个类也可以简洁继承其他类，例如：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C <span class="keyword">extends</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line">B <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line">A <span class="keyword">extends</span> <span class="title class_">T</span> &#123;&#125;</span><br><span class="line"><span class="comment">// C 直接继承B类，但是C类直接继承T、A类。</span></span><br></pre></td></tr></table></figure></li><li><p>Java语言中假设一个类没有显示的继承任何类，该类默认继承 JavaSE 库当中提供的 Java.lang.Object类。</p></li></ol><h3 id="方法的覆盖"><a href="#方法的覆盖" class="headerlink" title="方法的覆盖"></a>方法的覆盖</h3><blockquote><p>Java 语言中方法的重载的条件</p><ul><li>在同一个类当中</li><li>方法名相同</li><li>参数列表不同：类型，顺序，个数至少一个不同</li></ul><ol><li>方法重载和什么无关？<ul><li>和方法的而返回值类型无关</li><li>和方法修饰符列表无关</li></ul></li></ol></blockquote><blockquote><p>Java 语言中方法的覆盖</p><ol><li><p>方法覆盖在什么时候使用？</p><p> <strong>当父类方法无法满足子类的业务需求时，子类有必要重写聪父类继承的方法</strong></p></li><li><p>什么条件满足之后构成方法重载？</p><ul><li>方法覆盖发生在具有继承关系的父子类之间</li><li>返回值类型相同，方法名相同，形参列表相同</li><li>访问权限不能更低 【protected -&gt; public】</li><li>抛出异常不能更多，可以更少</li></ul></li><li><p>方法覆盖和什么无关？</p><ul><li>和方法的而返回值类型无关</li><li>和方法修饰符列表无关</li></ul></li></ol></blockquote><ol><li>私有方法不能继承，所以不能覆盖。</li><li>构造方法不能继承，所以不能覆盖。</li><li>静态方法不存在覆盖。因为是通过类名访问的，父子类名肯定不同</li><li>覆盖只针对方法，不谈属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法的覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"> <span class="comment">// 动物都是可以移动的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在移动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫科类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在走猫步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抓老鼠</span></span><br><span class="line">    catchMouse() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>语法机制：</p><p>Cat 继承 Animal，Bird 继承 Animal。Cat 和 Bird 没有任何继承关系。</p><p>关于多态涉及的几个概念：</p><ul><li>向上转型<ul><li>子类型 –&gt; 父类型    自动类型转换</li></ul></li><li>向下转型 <ul><li>父类型 –&gt; 子类型    强制类型转换【加强制类型转换符】</li></ul></li><li>转型的前提是拥有继承关系</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230112162203837.png" alt="image-20230112162203837"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">// 向上转型，编译过，一定能运行</span></span><br><span class="line"></span><br><span class="line">a1.move();<span class="comment">// 猫在走猫步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编译不通过，</span></span><br><span class="line"><span class="comment">因为 a1 是 Animal类型，而Animal类型中不存在找老鼠方法。</span></span><br><span class="line"><span class="comment">此时想要调用 catchMouse 方法，需要将 a1 强制转换为 Cat.</span></span><br><span class="line"><span class="comment">向下转型：当调用的方法是子类特有的，父类中不存在的，必须进行向下转型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// a1.catchMouse();</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c1</span> <span class="operator">=</span> (Cat)a2;</span><br><span class="line">c1.catchMouse();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此语法编译通过，但是运行会异常</span></span><br><span class="line"><span class="comment">因为a1 实际引用是 Cat,而 Cat 与Bird 不存在任何继承关系，由此出现著名异常：</span></span><br><span class="line"><span class="comment">java.lang.ClassCastException</span></span><br><span class="line"><span class="comment">类型转换异常，这种异常总是在 &quot;向下转型的时候&quot;会发生。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决向下转型错误：</span></span><br><span class="line"><span class="comment">使用 instanceof 运算符 解决</span></span><br><span class="line"><span class="comment">语法格式：（引用 instanceof 数据类型名）</span></span><br><span class="line"><span class="comment">eg: a instanceof Animal</span></span><br><span class="line"><span class="comment">true: a这个引用指向对象是一个 Animal 类型</span></span><br><span class="line"><span class="comment">false: a这个引用指向对象不是一个 Animal 类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bird b1 = (Bird)a1;// 向下转型，编译过，可能运行错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决：</span></span><br><span class="line"><span class="keyword">if</span>(a1 <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">    <span class="type">Bird</span> <span class="variable">b1</span> <span class="operator">=</span> (Bird)a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态在实际开发中的作用："><a href="#多态在实际开发中的作用：" class="headerlink" title="多态在实际开发中的作用："></a>多态在实际开发中的作用：</h4><blockquote><p>分析： 主人喂养宠物这个场景需要经行类型抽象：</p><ul><li>主人【类】<ul><li>主人可以喂养宠物，所有主人都有这个动作</li></ul></li><li>宠物【类】<ul><li>宠物可以吃东西，所有宠物都有吃东西的这个动作</li></ul></li></ul></blockquote><ul><li>降低程序耦合度，提高程序扩展力，能使用多态尽量使用多态。父类型引用指向子类型对象</li></ul><p>核心： 面向抽象编程，不要面向具体编程</p><p>不使用多态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这种方式没有使用多态，每次加一个宠物就要新增一个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fead</span> <span class="params">(Cat c)</span> &#123;</span><br><span class="line">        c.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fead</span> <span class="params">(Dog c)</span> &#123;</span><br><span class="line">        c.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在吃饭饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在吃饭饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建主人</span></span><br><span class="line">        <span class="type">Master</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line">        <span class="comment">// 创建猫</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">// 主人喂猫</span></span><br><span class="line">        m1.fead(c1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建狗</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 主人喂狗</span></span><br><span class="line">        m1.fead(d1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用多态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用多态，pet 是一个父引用</span></span><br><span class="line"><span class="comment">    耦合度低，扩展力强</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fead</span> <span class="params">(Ped pet)</span> &#123;</span><br><span class="line">        pet.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宠物类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;宠物在吃饭饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在吃饭饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在吃饭饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;蛇在吃饭饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建主人</span></span><br><span class="line">        <span class="type">Master</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line">        <span class="comment">// 主人喂猫</span></span><br><span class="line">        m1.fead(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 主人喂狗</span></span><br><span class="line">        m1.fead(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        </span><br><span class="line">     <span class="comment">// 主人喂蛇</span></span><br><span class="line">        m1.fead(<span class="keyword">new</span> <span class="title class_">Snake</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finall-关键字"><a href="#finall-关键字" class="headerlink" title="finall 关键字"></a>finall 关键字</h3><blockquote><p>表示最终的，不可变的。跟 js 中 const 作用有点类似</p><ul><li>final 修饰的类无法被继承</li><li>final 修饰的方法无法被覆盖</li><li>final 修饰的变量一旦赋值，不可重新赋值</li><li>final 修饰的实例变量必须手动赋值，不能默认赋值</li><li>final 修饰的引用虽然指向某个对象之后不能指向其他对象，但是所指向的对象内部的内存是可以被修改的</li><li>final 修饰的实例变量，一般和static联合使用，被称为常量</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">finalTest</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    成员变量又默认赋值 + final 修饰的变量一旦赋值就不能重新赋值</span></span><br><span class="line"><span class="comment">    所以下面语法就是默认值0，不能再重新赋值，变量就没有意义</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="comment">// final int age; // 编译错误</span></span><br><span class="line">    <span class="comment">// 正确写法1</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正确写法2</span></span><br><span class="line">    <span class="keyword">final</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">finalTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上边两种写法本质是一样的，变量的赋值就发生在构造函数执行</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 内置的 String 方法为最终方法不能被继承，覆盖，赋值</span></span><br><span class="line"><span class="comment">// 编译错误</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">myString</span> <span class="keyword">extends</span> <span class="title class_">String</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="package，important"><a href="#package，important" class="headerlink" title="package，important"></a>package，important</h3><blockquote><p>包又称为package吗Java 中引入这种语法机制主要是为了方便程序员的管理。不同功能的类被分门别类放到不同的软件包当中，查找比较方便，管理比较方便，易维护。</p></blockquote><h4 id="怎么定义-package？"><a href="#怎么定义-package？" class="headerlink" title="怎么定义 package？"></a><strong>怎么定义 package？</strong></h4><ul><li><p>在Java 源程序的第一行上编写 package 语句。</p></li><li><p>package 只能编写一个语句</p></li><li><p>语法结构：</p><p>  package 包名；</p></li></ul><h4 id="包名的命名规范："><a href="#包名的命名规范：" class="headerlink" title="包名的命名规范："></a><strong>包名的命名规范：</strong></h4><ul><li><p>公司域名倒序 + 项目名 + 模块名 + 功能名；</p></li><li><p>采用这种方式重名概率较低。因为公司域名具有全球唯一性。</p></li><li><p>包名要求全部小写，包名也是标识符，必须遵守命令规则</p></li><li><p>一个包将来对应一个目录</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.day11.Test01;</span><br></pre></td></tr></table></figure><p>使用 package 机制后，<strong>java 类名</strong> 中类名 不再是 文件名。而是 com.bjpowernode.javase.day11.Test01;</p><p>编译后 需要创建对应目录：com/javase/day11/Test01.class</p><p><strong>另一种方式（编译+运行）</strong></p><ul><li><p>javac -d 编译之后存放路径 Java 源文件的路径</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg: 将 F:\Hello.java 文件编译后存放到 C:\com 目录下</span></span><br><span class="line">javac -d C:\com F:\Hello.java</span><br></pre></td></tr></table></figure></li><li><p>将当前路径中 *.java 编译之后放到 c:\目录下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JVM 的类加载器 ClassLoader 默认聪当前路径下加载</span></span><br><span class="line">javac -d . *.java</span><br></pre></td></tr></table></figure></li></ul><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><blockquote><p>当前类中访问其他不同当前目录的的程序时，需要使用import导入其他包中的程序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bjpowernode.javase.test002.Cat;</span><br><span class="line"><span class="comment">// 导入 javase 目录 下 test002 包 中的 Cat 类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略写法，表示导入包com.bjpowernode.javase.test002在这个文件中使用到的所有类，不用考虑性能问题</span></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.javase.test002.*</span><br></pre></td></tr></table></figure><h3 id="控制访问权限修饰符"><a href="#控制访问权限修饰符" class="headerlink" title="控制访问权限修饰符"></a>控制访问权限修饰符</h3><blockquote><p>访问控制权限修饰符来控制元素访问范围</p></blockquote><p><strong>访问控制权限修饰符包括：</strong></p><ul><li>public    表示公开的，在任何位置都可以访问</li><li>protected  同包下，子类中可以访问</li><li>缺省  同包下可以访问</li><li>private  表示私有的，只能在本类中访问</li></ul><p>范围从大到小排序： public &gt; protected &gt; 默认 &gt; private</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 受保护的</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 缺省</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 私有的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;privateC&quot;</span>;</span><br><span class="line">    <span class="comment">// 公开的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0f</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类，接口 只能采用 public 和缺省的修饰符进行修饰。【内部类除外】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>属性 （四个都能用）</p><p>方法 （四个都能用）</p><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><blockquote><p>关键字，全小写</p><p>与 this 对比</p><p>this:</p><p>目的：调用本类的方法</p><ul><li>this 能出现在实例构造方法</li><li>this 的语法是：”this.” ,”this()”【this() 只能出现在构造方法第一行，目的是构造方法代码复用，通用调用本类其他构造方法】</li><li>this 不能在静态方法中使用</li><li>this 大部分情况可以省略（在区分局部变量和成员变量时不能省略）</li></ul><p>super:</p><p>目的：创建子类对象的时候，先初始化父类型的特征</p><ul><li>super 能出现在实例构造方法和构造方法中</li><li>super 的语法是：”this.” ,”this()”</li><li>super 不能在静态方法中使用</li><li>super 只能出现在构造方法第一行，通过当前方法去调用<strong>父类</strong>中其他的构造方法，目的是：代码复用</li></ul><p><strong>this() 和 super() 不能共存</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">superTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> viod <span class="title function_">main</span><span class="params">(Stirng[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 建议手动将一个类的无参构造方法写出来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// super(); // 这里也是默认的构造方法写出来</span></span><br><span class="line">        System.out.println(<span class="string">&quot;A 类的无参构造方法&quot;</span>);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的无参数构造方法&quot;</span>);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的有参数构造方法（String）&quot;</span>);<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;zhanggsan&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;C 类的无参数构造方法&quot;</span>);<span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;C类的有参数构造方法（String）&quot;</span>);<span class="comment">//5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;C类的有参数构造方法（String, int）&quot;</span>);<span class="comment">//6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行顺序</span></span><br><span class="line"><span class="number">13654</span></span><br></pre></td></tr></table></figure><p><strong>调用子类构造方法必然调用父类构造方法</strong></p><p><strong>在Java语言中不管是new什么对象，最后老祖宗的Object类的无参构造方法（处于栈顶部，最后调用，最先结束）一定会执行</strong></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><blockquote><ol><li><p>什么是抽象类？</p><p> 类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类。</p><p> 类本身是不存在的，所以抽象类无法创建对象《无法实例化》</p></li><li><p>抽象类属于什么类型？</p><p> 抽象类也属于引用数据类型。</p></li><li><p>抽象类怎么定义？</p><p> 语法：</p><p> ​    [修饰符列表] abstract class 类名 {</p><p> ​        类体;</p><p> ​    }</p></li><li><p>抽象类无法实例化，无法创建对象，所有它是用来被子类继承的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 银行账户类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承抽象类，子类可以实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditAccount</span> extend Account &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象类的子类也可以是抽象的类</span></span><br><span class="line"><span class="comment">//abstract class CreditAccount extend Account &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">CreditAccount</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreditAccount</span>();</span><br></pre></td></tr></table></figure></li><li><p>由于final修饰的类不能被继承，所以 final与abstract不能同时出现</p></li><li><p>抽象类有构造方法，这个方法提供给子类使用</p></li><li><p>抽象方法：表示没有实现的方法，没有方法体的方法</p><p> 特点：</p><ul><li>没有方法体，以分号结尾</li><li>前面有 abstract 关键字</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">dosome</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中</p></li><li><p>非抽象子类继承抽象类时，会继承抽象方法。但抽象方法只能出现在抽象类中。所以要把子类改为抽象的，或者重写这个继承的抽象方法（也可以叫<strong>实现</strong>）避免编译出错</p><p> <strong>一个非抽象类继承一个抽相类，非抽象类必须要将抽象方法实现</strong></p><p> 面向抽象编程：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在飞！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 多态：编译是一种状态，运行是另一种状态</span></span><br><span class="line">        <span class="comment">// 父类型引用指向子类型对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();<span class="comment">// 向上转型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230130154911339.png" alt="image-20230130154911339"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><ol><li><p>接口也是一种引用数据类型</p></li><li><p>接口也是完全抽象的（抽象类是半抽象）或者也可以说接口是特殊的抽象类</p></li><li><p>接口怎么定义，语法是什么？</p><p> [修饰符列表] interface 接口名 {}</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口支持多继承，一个接口可以继承多个接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B,C &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口中只包含两个部分内容，<strong>常量和抽象方法</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="comment">// 省略写法</span></span><br><span class="line">    <span class="comment">// int sum(int a, int b);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口中的抽象方法都是公开的</p></li><li><p>接口中的方法都是抽象方法，所以接口中方法都不能有方法体</p></li><li><p>接口中的常量不能被修改</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="comment">// 省略写法</span></span><br><span class="line">    <span class="comment">// double PI = 3.1415926;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a><strong>接口的基础语法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">FF</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>类和类之间叫做继承，类和接口之间叫做实现（也可以看作”继承“）</p><p> 继承使用 extends 关键字</p><p> 实现使用 implements 关键字</p></li><li><p>当一个<strong>非抽象的类</strong>实现接口的话，必须将接口中所有方法实现</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 面向接口编程</span></span><br><span class="line">        <span class="type">MyMath</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMathImpl</span>();</span><br><span class="line">        mm.sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMathImpl</span> <span class="keyword">implements</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个类可以实现多个接口</p><p> 这种机制弥补了Java类只支持单继承带来的缺陷</p></li><li><p>类型转换</p><p> 向下转型养成好习惯，先用 instanceof 判断</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">D</span>();</span><br><span class="line">        <span class="comment">// 多态</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> (B)a;</span><br><span class="line">        <span class="comment">// 接口 E，D 没有继承关系，强转时编译不会出错，但是运行时可能出现 ClassCastException 异常</span></span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (B)a;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">E</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B,C &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承和实现同时存在</p><p> 先继承，再实现。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;\</span><br><span class="line">        <span class="comment">// 多态</span></span><br><span class="line">        <span class="type">Flyable</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插拔的是接口，通常提取的是行为动作</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给猫插上翅膀</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="接口在开发中的作用"><a href="#接口在开发中的作用" class="headerlink" title="接口在开发中的作用"></a>接口在开发中的作用</h3><blockquote><p>注意：接口在开发中的作用类似于多态在开发中的作用</p><p>强制转换过程中，如果是类转换成接口，那么类和接口之间可以没有继承关系</p><p>多态：面向抽象编程，不要面向具体编程。降低程序耦合度。提高程序拓展力。</p><p>面向接口编程少不了多态（接口+多态才可以达到降低耦合）</p><p>任何一个接口都有调用者和实现者，解耦合是指接触调用者和实现者的耦合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顾客</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    FoodMenu foodmenu;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(FoodMenu fm)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.foodmenu = fm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点菜</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.foodmenu.shiZiChaoJiDan();</span><br><span class="line">        <span class="built_in">this</span>.foodmenu.yuXaingRouSi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FoodMenu</span> &#123;</span><br><span class="line">    <span class="comment">// 西红柿炒鸡蛋</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shiZiChaoJiDan</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 鱼香肉丝</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">yuXaingRouSi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 厨师</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaCooker</span> <span class="keyword">implements</span> <span class="title class_">FoodMenu</span> &#123;</span><br><span class="line">    <span class="comment">// 西红柿炒鸡蛋</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shiZiChaoJiDan</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中餐厨师做的西红柿炒鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鱼香肉丝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">yuXaingRouSi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中餐厨师做的鱼香肉丝&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericCooker</span> <span class="keyword">implements</span> <span class="title class_">FoodMenu</span> &#123;</span><br><span class="line">    <span class="comment">// 西红柿炒鸡蛋</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shiZiChaoJiDan</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;西餐厨师做的西红柿炒鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鱼香肉丝</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">yuXaingRouSi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;西餐厨师做的鱼香肉丝&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建厨师</span></span><br><span class="line">        <span class="type">FoodMenu</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChinaCooker</span>();</span><br><span class="line">        <span class="comment">// 创建顾客</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">cm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(cc);</span><br><span class="line">        cm.order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型和类型之间的关系"><a href="#类型和类型之间的关系" class="headerlink" title="类型和类型之间的关系"></a>类型和类型之间的关系</h3><blockquote><p>is a, has a, like a</p><ul><li><p>is a: </p><p>  Cat is a Animal（猫是一个动物）</p><p>  凡是满足 is a 的表示 <strong>继承关系</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">extends</span> <span class="title class_">B</span></span><br></pre></td></tr></table></figure></li><li><p>has a:</p><p>  I has a Pen （我有一支笔）</p><p>  凡是能满足 has a 关系的表示 <strong>关联关系</strong></p><p>  关联关系通常以”属性“的形式存在</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A &#123;</span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>like a:</p><p>  Cooker like a FoodMemu （厨师像一个菜单一样）</p><p>  凡是能满足 like a 关系的表示 <strong>实现关系</strong></p><p>  实现关系通常是： 类实现接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">implements</span> <span class="title class_">B</span>;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="抽象类和接口有什么区别？"><a href="#抽象类和接口有什么区别？" class="headerlink" title="抽象类和接口有什么区别？"></a>抽象类和接口有什么区别？</h3><blockquote><p>抽象类是半抽象的，接口是完全抽象的</p><p>抽象类中没有构造方法，接口中没有构造方法</p><p>接口之间可以多继承，类之间只能单继承</p><p>一个类可以同时实现多个接口，一个抽象类只能继承一个类</p></blockquote><h2 id="开发工具-IDE使用"><a href="#开发工具-IDE使用" class="headerlink" title="开发工具 IDE使用"></a>开发工具 IDE使用</h2><blockquote><p>快捷键：</p><p>生成<strong>main</strong>方法： psvm</p><p>生成 打印语句：sout</p><p>删除一行：Ctrl + Y</p><p>编辑窗口变大变小：Ctrl + shift + F12</p><p>显示隐藏项目树：alt + 1</p><p>新增/新建/添加快捷键： alt + insert</p><p>tab 页切换： alt + 左右箭头</p><p>运行：Ctrl + shift + F10</p><p>纠错： alt + 回车</p></blockquote><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><blockquote><p>UML 是一种统一建模语言，一种图标式语言，我们可以通过UML来描述一下继承结构。 就像是建筑师的设计图纸</p></blockquote><h2 id="源码及API文档"><a href="#源码及API文档" class="headerlink" title="源码及API文档"></a>源码及API文档</h2><h3 id="JDK-类库的根类：Object"><a href="#JDK-类库的根类：Object" class="headerlink" title="JDK 类库的根类：Object"></a>JDK 类库的根类：Object</h3><blockquote><p>这些方法是所有子类通用的，任何一个类默认继承object，计算没有直接继承，最终也会默认继承。</p></blockquote><p>有哪些常用的文档？</p><ol><li>去源代码查看 【C:\Program Files\Java\jdk1.8.0_321\src】</li><li>去查阅Java类库帮助文档</li></ol><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><blockquote><p>返回对象的字符串表示形式。类名+@+16进制对象哈希码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + <span class="string">&#x27;@&#x27;</span> + Integer.toHexString(hashCode())</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">obj.toString()</span><br></pre></td></tr></table></figure><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><blockquote><p>指示一些其他对象是否等于此对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> === obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">obj1.equals(obj2);</span><br></pre></td></tr></table></figure><p>默认是通过 == 判断是否相等，== 是判断两个Java对象的内存地址。如果我们需要判断两个对象内容相同则需要重写 equals 方法</p><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h4><blockquote><p>垃圾回收器负责调用,此方法不需要调用，只要重写即可。带系统执行垃圾回收时会触发这个方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;即将被销毁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如：当 </span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p = <span class="literal">null</span>; <span class="comment">// 此时会触发 p.finalize()</span></span><br><span class="line"></span><br><span class="line">System.gc();<span class="comment">// 手动触发垃圾回收</span></span><br></pre></td></tr></table></figure><p>java 中的垃圾回收机制不会轻易启动，jdk9版本后废弃了</p><h4 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h4><blockquote><p>对象的克隆</p></blockquote><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><blockquote><p>获取对象哈希值的一个方法，返回值是经过哈希算法转换的数字，等同于内存地址</p></blockquote><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><blockquote><p><strong>也叫做局部内部类。不推荐使用，但是要看懂别人写的</strong></p><ol><li><p>什么是内部类？</p><p> 在类的内部又重新定义了一个类，被称为内部类</p></li><li><p>内部类的分类</p><ul><li>静态内部类：类似于静态变量</li><li>实例内部类：类似于实例变量</li><li>局部内部类：类似于局部变量</li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner1</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 实例内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner2</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner3</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化内部类</span></span><br><span class="line"><span class="comment">// new Test().new Inner2();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 负责计算的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法啊</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算的接口需要实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputeImpl</span> <span class="keyword">implements</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(Compute c, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> c.sum(x, y);</span><br><span class="line">        System.out.println(<span class="string">&quot;计算结果:&quot;</span> + rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> voidd <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyMath</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMath</span>();</span><br><span class="line">        </span><br><span class="line">        mm.sum(<span class="keyword">new</span> <span class="title class_">ComputeImpl</span>(), <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类可以省略 计算的接口需要实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 负责计算的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法啊</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(Compute c, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> c.sum(x, y);</span><br><span class="line">        System.out.println(<span class="string">&quot;计算结果:&quot;</span> + rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> voidd <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyMath</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMath</span>();</span><br><span class="line">        <span class="comment">// 使用匿名内部类, 看似是接口可以 new 了，实际上是后面的括号中实现了方法。 【不推荐使用，不能复用，结构不清晰】</span></span><br><span class="line">        mm.sum(<span class="keyword">new</span> <span class="title class_">Compute</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><ul><li><p>Java 语言中的数组属于引用数据类型。父类是 Object</p></li><li><p>可以储存 任意数据类型。储存在堆内存，引用类型在数组中存储的是引用 内存地址</p></li><li><p>数组分类：一维，二维，三维，多维数组</p></li><li><p>数组中元素的类型要求统一【装苹果的数组就不能装香蕉】</p></li></ul><p>优点：</p><ol><li>检索数据效率最快</li><li>元素类型相同，所以占用空间相同</li><li>储存空间是连续的</li></ol><p>缺点：</p><ul><li>随机增删元素，会影响后边元素向前或向后移动，效率低【对数组最后一个元素增删无影响】</li><li>内存中连续的大空间少。无法存储大数据</li></ul></blockquote><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="type">int</span>[] arrar1;</span><br><span class="line"><span class="type">double</span>[] arrar1;</span><br><span class="line"><span class="type">boolean</span>[] arrar1;</span><br><span class="line">Object[] arrar1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 初始化6个长度的String类型数组,默认值为 null</span></span><br><span class="line">String[] array1 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= array.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 下标越界异常： ArrayIndexOutOfBoundsException</span></span><br><span class="line">    array[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">test(array); <span class="comment">// √</span></span><br><span class="line">test(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);<span class="comment">// ×</span></span><br><span class="line">test(<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]);<span class="comment">// √</span></span><br><span class="line">test(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);<span class="comment">// √</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="主函数-main-的参数"><a href="#主函数-main-的参数" class="headerlink" title="主函数 main 的参数"></a>主函数 main 的参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> voidd <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">java Test 参数<span class="number">1</span> 参数<span class="number">2</span> ...</span><br></pre></td></tr></table></figure><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><blockquote><p>数组长度一旦确定就不可变，那数组满了怎么办？</p><p>java中的方式：先建一个大容量数组，再将小容量数组中数组一个一个拷贝过去</p><p>结论：效率低，少用</p></blockquote><p>数组拷贝方法：</p><p><strong>System.arraycopy(src, srcPos, dest, destPos, length)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">System.arraycopy(a1,<span class="number">0</span>,a2,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">System.out.print(a2[<span class="number">0</span>]+ <span class="string">&quot;&quot;</span> +a2[<span class="number">1</span>]+ <span class="string">&quot;&quot;</span> +a2[<span class="number">2</span>]+ <span class="string">&quot;&quot;</span> +a2[<span class="number">3</span>]+ <span class="string">&quot;&quot;</span> +a2[<span class="number">4</span>]+ <span class="string">&quot;&quot;</span> +a2[<span class="number">5</span>]);</span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的工具方法"><a href="#数组的工具方法" class="headerlink" title="数组的工具方法"></a>数组的工具方法</h4><blockquote><p>java.utils.Arrays</p><p>常用的方法，sort, binarySearch【二分法查找】</p></blockquote><ul><li><p>binarySearch()</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回对应下标，没有返回 -1</span></span><br><span class="line">Arrays.binarySearch(数组, 查找的值);</span><br></pre></td></tr></table></figure></li><li><p>sort()</p></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><blockquote><ul><li>双引号括起来的都是String对象</li><li>字符串不可变，不能修改</li><li>JDK中字符串都是直接存储在<strong>方法区</strong>的<strong>字符串常量池</strong>当中【垃圾回收机制不会回收常量池数据】</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一共创建了三个对象：</span></span><br><span class="line"><span class="comment">字符串常量池 ： &quot;hello&quot;</span></span><br><span class="line"><span class="comment">堆内存: s1,s2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="常用构造方法："><a href="#常用构造方法：" class="headerlink" title="常用构造方法："></a>常用构造方法：</h4><ol><li><p>```java<br> String s = new String(“”)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">String s = &quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>```java<br> String s = new String(char数组)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. ```java</span><br><span class="line">String s = new String(char数组,起始下标,长度)</span><br></pre></td></tr></table></figure></li><li><p>```java<br> String s = new String(byte数组)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. ```java</span><br><span class="line">String s = new String(byte数组,起始下标,长度)</span><br></pre></td></tr></table></figure></li></ol><h4 id="chartAt"><a href="#chartAt" class="headerlink" title="chartAt"></a>chartAt</h4><blockquote><p>返回指定索引处的 char 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;中国人&quot;</span>.charAt(<span class="number">1</span>);<span class="comment">// 国</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h4><blockquote><p>按照字典（ascll码表值）顺序去比较字符串大小.</p><p>前小后大: -1</p><p>前后一致：0</p><p>前大后小：1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;abc&quot;</span>.compareTo(<span class="string">&quot;abce&quot;</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><blockquote><p>是否包含某字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello java&quot;</span>.contains(<span class="string">&quot;java&quot;</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith"></a>endsWith</h4><blockquote><p>是否以某字符串结尾</p></blockquote><h4 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase"></a>equalsIgnoreCase</h4><blockquote><p>忽略大小写的比较字符串相等</p></blockquote><h4 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes"></a>getBytes</h4><blockquote><p>将字符串对象转为字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br></pre></td></tr></table></figure></blockquote><h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h4><blockquote><p>判断某个字符串是否为空</p></blockquote><h4 id="toChartArray"><a href="#toChartArray" class="headerlink" title="toChartArray"></a>toChartArray</h4><blockquote><p>将字符串转换为char数组</p></blockquote><h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h4><blockquote><p>底层调用 toString()</p></blockquote><h4 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf,lastIndexOf"></a>indexOf,lastIndexOf</h4><blockquote><p>某个字符串在当前字符串中第一次/最后一次出现的下标索引</p></blockquote><h3 id="stringBuffer"><a href="#stringBuffer" class="headerlink" title="stringBuffer"></a>stringBuffer</h3><blockquote><p>stringBuider 与 stringBuffer 都可以拼接字符串，区别在于前者是线程安全的，后者不是</p><p>用 + 拼接字符串会导致方法区字符串常量池创建多个对象。造成空间浪费</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个初始化容量为16个byte[] 数组。（字符串缓冲区），创建时可以估计给一个容量（字节）</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">50</span>);</span><br><span class="line"><span class="comment">// append 追加字符串底层会扩容</span></span><br><span class="line">sb.append(<span class="string">&quot;我是&quot;</span>);</span><br><span class="line">sb.append(<span class="number">300</span>);</span><br><span class="line">System.out.println(sb);<span class="comment">// 我是300</span></span><br></pre></td></tr></table></figure><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><blockquote><p>Java为8中数据类型提供了8种包装类，父类是Object。</p><p>包装类可以将基本数据类型包装成对象</p></blockquote><table><thead><tr><th>基本数据类型</th><th>包装类型</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte（父类Number）</td></tr><tr><td>short</td><td>java.lang.Short（父类Number）</td></tr><tr><td>int</td><td>java.lang.<strong>Integer</strong>（父类Number）</td></tr><tr><td>long</td><td>java.lang.Long（父类Number）</td></tr><tr><td>float</td><td>java.lang.Float（父类Number）</td></tr><tr><td>double</td><td>java.lang.Double（父类Number）</td></tr><tr><td>boolean</td><td>java.lang.Boolean（父类Object）</td></tr><tr><td>char</td><td>java.lang.<strong>Character</strong>（父类Object）</td></tr></tbody></table><p>包装类还提供了各种类型的拆箱方法，将包装类转为基本数据类型。不过后面都废弃了，jdk1.5后支持了自动装箱拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 手动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ii</span> <span class="operator">=</span> i.intValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x;</span><br></pre></td></tr></table></figure><p>java 中为了提高程序效率，将 [-128, 127]数字提前包装创建好了，所以这个区间的的数据不在需要new,直接从常量池中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">a == b;<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">x == y;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Number-常用方法"><a href="#Number-常用方法" class="headerlink" title="Number 常用方法"></a>Number 常用方法</h3><ul><li>parseInt    转整形</li><li></li></ul><h3 id="日期处理"><a href="#日期处理" class="headerlink" title="日期处理"></a>日期处理</h3><blockquote><p>java.utils.Date 对象</p><p>格式化时间的库：java.text.SimpleDateFormat</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">yyyy 年</span></span><br><span class="line"><span class="comment">MM月</span></span><br><span class="line"><span class="comment">dd日</span></span><br><span class="line"><span class="comment">HH时</span></span><br><span class="line"><span class="comment">mm分</span></span><br><span class="line"><span class="comment">ss秒</span></span><br><span class="line"><span class="comment">sss毫秒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// Date -&gt; String</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:sss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> format.format(dt);</span><br><span class="line">System.out.println(time);<span class="comment">// 2023-02-02 09:27:32:032</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; date</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> <span class="string">&quot;2022-12-12 12:12:12&quot;</span>;</span><br><span class="line"><span class="comment">// 此处格式要和字符串日期格式相同</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">rs</span> <span class="operator">=</span> f2.parse(dateTime);</span><br><span class="line">System.out.println(rs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳 -&gt; Date</span></span><br><span class="line"><span class="type">int</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="number">1675302056747</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp);</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:sss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">ddd</span> <span class="operator">=</span> format1.format(dt1);</span><br><span class="line">System.out.println(<span class="string">&quot;ddd = &quot;</span> + ddd);<span class="comment">// 2023-02-02 09:40:56:056</span></span><br></pre></td></tr></table></figure><h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><blockquote><p>java.text.DecimalFormat 类</p><p>格式：</p><p>#：代表任意数字</p><p>,：代表千分位</p><p>.：代表小数点</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">xx</span> <span class="operator">=</span> <span class="number">10023.222502056</span>;</span><br><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.###&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">rr</span> <span class="operator">=</span> df.format(xx);</span><br><span class="line">System.out.println(rr);<span class="comment">// 10,023.223</span></span><br></pre></td></tr></table></figure><h3 id="高精度-BigDecimal"><a href="#高精度-BigDecimal" class="headerlink" title="高精度 BigDecimal"></a>高精度 BigDecimal</h3><blockquote><p>BigDecimal 属于大数据，精度极高。专门用在财务软件当中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// +</span></span><br><span class="line">bd1.add(bd2);</span><br><span class="line"><span class="comment">// 运算都提供了自己的方法</span></span><br></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><blockquote><p>产生一个int类型取值范围内的数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="comment">// 下一个int 类型的数据是101，表示只能取到100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">101</span>);</span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><blockquote><p>枚举编译之后也是生成 class 文件</p><p>枚举是一种引用类型</p><p>当一个方法返回结果超过两种且可以一一列举的情况建议使用枚举</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    CHUN,XIA,QIU,DONG</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h3><blockquote><p>当Java程序运行出现不正常的情况时，Java语言会把程序的异常信息输出到控制台。供程序员参考，以对程序经行修改</p><p>所有异常都发生在运行阶段</p></blockquote><h4 id="异常声明"><a href="#异常声明" class="headerlink" title="异常声明"></a>异常声明</h4><p>java 内置了异常类，可以通过 创建异常对象 再抛出使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArithmeticExcepetion</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArithmeticExcepetion</span>(<span class="string">&quot;异常信息&quot;</span>);</span><br><span class="line"><span class="keyword">throw</span> error;</span><br></pre></td></tr></table></figure><h4 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h4><blockquote><p>如果这个方法你想让调用者处理标错就throws，否则就 try catch</p></blockquote><ol><li><p>try catch 捕获异常并处理</p><ul><li>catch 后边小括号中得了类型可以是具体类型，也可以是父类型</li><li>catch 可以写多个。便于精确处理</li><li>编写多个catch 时，捕获错误要从小到大</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="comment">// return 语句再方法中肯定是 最后执行的，finall 会在return 前执行，不会影响return 的值     </span></span><br><span class="line">   <span class="keyword">return</span> 语句</span><br><span class="line">&#125; <span class="keyword">catch</span>(错误<span class="number">1</span>|错误<span class="number">2</span>|错误<span class="number">3</span> e) &#123;</span><br><span class="line">    <span class="comment">// 多个错误声明 是 jdk8 新特性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用此方法，会在控制台打印异常详情，建议使用</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 除非 System.exit(0); 推出JVM虚拟机。否则 此处代码一定会执行</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法声明位置上，使用 throws 关键字，抛给上一级</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args)</span> &#123;</span><br><span class="line">        doSome();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> <span class="keyword">throws</span> 异常<span class="number">1</span>,异常<span class="number">2</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> a/b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><blockquote><p>业务中的异常很多，内置异常不满足。此时需要自定义异常。</p><p><strong>自定义异常一定要抛出去让调用者处理，否者没有意义</strong></p><p>异常的应用是代替 return 字符串错误提示</p></blockquote><p><strong>如何自定义异常？</strong></p><ol><li>编写一个类继承 Exception 或者 RuntimeException</li><li>提供两个构造方法，一个无参，一个待用String 参数的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span>  <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="type">MyException</span> <span class="variable">mye</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;自定义的错误&quot;</span>);</span><br><span class="line"><span class="keyword">throw</span> mye;</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合本身是一个容器，用来存储引用类型的数据，不能直接存储基本数据类型</p><p>Java中不同的集合对应不同的数据结构，例如：数组，二叉树，链表，哈希表。。。</p><ul><li>new ArrayList(); 底层是数组</li><li>new LinkedList(); 底层是链表</li><li>new ThreeSet(); 底层是二叉树 </li></ul></blockquote><p>在Java中集合分为两大类：</p><ol><li><p>一类是存储单个元素</p><p> 这类集合祖先是 java.utlls.Collection 【可迭代，可遍历】</p><ul><li>list    有序，可重复，元素有下标<ul><li>ArrayList【类】    底层数组，非线程安全</li><li>LinkedList【类】  底层双向链表  </li><li>Vector【类】    底层数组，线程安全，使用较少【线程安全有其他方案】</li></ul></li><li>Set    无序，不可重复，元素无下标<ul><li>hashSet【类】    底层new了hashMap【底层哈希表】</li><li>SortedSet  自动排序<ul><li>TreeSet【类】    底层new了TreeMap【底层二叉树】</li></ul></li></ul></li></ul></li><li><p>一类是键值对存储形式</p><p> 这类集合祖先是 java.utlls.Map, key 是无需不可重复</p><ul><li>HashMap【类】    非线程安全，底层哈希表</li><li>Hashtable【类】    线程安全，底层哈希表，使用较少【线程安全有其他方案】<ul><li>Properties【类】  线程安全，键,值要求是String类型</li></ul></li><li>SortedMap    会自动排序<ul><li>TreeMap【类】底层二叉树，key按自动大小排序</li></ul></li></ul></li></ol><blockquote><p><strong>Map集合的key部分存储的就是 Set集合</strong></p></blockquote><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><blockquote><p>不使用泛型之前，Collection 中可以存储Object的所有子类型。使用泛型之后，Collection中只能储存某个具体类型</p></blockquote><p><strong>Collection 中常用方法</strong></p><ul><li><p>add 添加元素</p></li><li><p>size 获取集合中元素个数</p></li><li><p>void 清空集合</p></li><li><p>contains(Object o) 判断集合中包含 某对象 o</p></li><li><p>remove 删除某个元素</p></li><li><p>isEmpty 集合中数据个数是否为0</p></li><li><p>toArray  将集合转换为数组</p></li><li><p>iterator  返回迭代器</p></li><li><p>dynchronizedList(list l) 让集合变成线程安全的</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元素内容发生改变时。需要冲新获取 iterator</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();</span><br><span class="line">it.hasNext();<span class="comment">// 有就返回true</span></span><br><span class="line">it.next();<span class="comment">// 返回迭代的下一个元素</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>contains 方法解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(string[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;def&quot;</span>;</span><br><span class="line">        c.add(s1);</span><br><span class="line">        c.add(s2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="comment">// 判断集合中是否存在 &quot;abc&quot;</span></span><br><span class="line">        c.contains(x);<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照内存地址，x 不在 C 当中。 contains 实现时调用了 equals() 方法,把x与集合中元素比较</p><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230203132125708.png" alt="image-20230203132125708"></p><blockquote><p>放进集合的元素 一定要重写 equals 方法，非则比较时比较的是内存地址而不是内容</p></blockquote><p><strong>数组坍台</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代过程中不能修改集合结构：例如删除，新增</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">c2.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">c2.add(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>();</span><br><span class="line"><span class="keyword">while</span>(it2.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> it2.next();</span><br><span class="line">    <span class="comment">// c2.remove(); // 删除之后会出现异常</span></span><br><span class="line">    <span class="comment">// 可以使用迭代器来删除？</span></span><br><span class="line">    it.remove();<span class="comment">// 可以，删除的一定是当前指向的元素</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原因： 因为集合删除元素不会更新迭代器，而迭代器删除会更新迭代器</span></span><br></pre></td></tr></table></figure><p><strong>list 接口常用方法</strong></p><ul><li>get(int index)  根据下标获取元素</li><li>indexOf(Object o)  获取指定对象第一次出现的下标索引</li><li>lastIndexOf(Object o) 获取指定对象最后一次出现的下标索引</li><li>remove(int index) 删除指定索引的元素</li><li>set(int index, E element)  修改指定位置的元素</li><li>add(Object element) 新增</li></ul><h5 id="ArrayList-指定容量及扩容"><a href="#ArrayList-指定容量及扩容" class="headerlink" title="ArrayList 指定容量及扩容"></a>ArrayList 指定容量及扩容</h5><blockquote><p>默认初始化容量为 10.</p><p>扩容: 元素超过初始化容量时，自动扩容，创建新的数组【 原容量 1.5 倍】把数据放进去</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化指定容量，底层先创建一个长度为0的数组，当添加第一个元素时，初始化容量20</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h5 id="ArrayList有参构造"><a href="#ArrayList有参构造" class="headerlink" title="ArrayList有参构造"></a><strong>ArrayList有参构造</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">c.add(<span class="number">100</span>);</span><br><span class="line">c.add(<span class="number">200</span>);</span><br><span class="line">c.add(<span class="number">300</span>);</span><br><span class="line"><span class="comment">// 可将HashSet 集合转为 ArrayList</span></span><br><span class="line"><span class="type">List</span> <span class="variable">myList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(c);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="linkedList"><a href="#linkedList" class="headerlink" title="linkedList"></a>linkedList</h5><blockquote><p>底层是链表结构。随机增删效率较高。检索效率低</p></blockquote><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><blockquote><ul><li>不可重复</li><li>存储位置和取出位置不一致</li><li>放到hashSet 集合的元素实际上是放到HashMap的key部分了</li></ul></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><blockquote><ol><li><p>Map和Collection没有继承关系</p></li><li><p>Map集合以键值对放啊是存储</p><p> key,value都是引用类型</p></li></ol></blockquote><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li>V put(K key, V value) 新增</li><li>V get(Object key) 通过key获取value</li><li>void clear() 清空Map集合</li><li>boolean containsKey(Object key) 判断Map中是否包含某个key</li><li>boolean containsValue(Object value)  判断Map中是否包含某个value</li><li>isEmpty() 判断Map集合中元素个数是否为0</li><li>Set&lt;K&gt; keyset() 获取Map集合中所有的value（所有的键是一个set集合）</li><li>V remove(Object key) 通过key删除键值对</li><li>int size() 返回集合中键值对的个数</li><li>Collection&lt;V&gt; values() 获取Map集合中所有的value，返回一个Collection</li><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 将Map集合转Set集合</li></ul><h5 id="Map对象的遍历"><a href="#Map对象的遍历" class="headerlink" title="Map对象的遍历"></a>Map对象的遍历</h5><ol><li><p>通过遍历key,来获取数据</p><p> getKeys, 再遍历得到key，使用 get(key)获取值</p></li><li><p>通过 entrySet,再使用 foreach</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适合大数据量</span></span><br><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;张三三&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;李思思&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;王五五&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;五六七&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;String,String&gt;&gt; map2 = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry item: map2) &#123;</span><br><span class="line">    System.out.println(item.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><blockquote><p>键值对限制为String类型</p></blockquote><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><blockquote><p>foreach,缺点是没有下标</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> item: arr) &#123;</span><br><span class="line">    System.out.println(<span class="string">&#x27;item:&#x27;</span>, item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><blockquote><p>是数组和单链表的结合体，充分发挥各自的有点</p></blockquote><h4 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h4><blockquote><p>java.util.Collections 集合工具类，方便操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变成线程安全的</span></span><br><span class="line">Collection.synchronizedList(list)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序, 对list 集合经行排序要保证，list集合中的元素实现了：Comparable 接口</span></span><br><span class="line">Collection.sort(list)</span><br></pre></td></tr></table></figure><h4 id="泛型机制"><a href="#泛型机制" class="headerlink" title="泛型机制"></a>泛型机制</h4><blockquote><p>编译期间的新特性，jdk5新增</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Cat,bird 类继承 Animal类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line"><span class="comment">// 不使用泛型</span></span><br><span class="line"><span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">// 使用泛型，指定泛型后集合只能放 Animal 类型</span></span><br><span class="line">List&lt;Animal&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">myList.add(cat);</span><br><span class="line">myList.add(bird);</span><br><span class="line"><span class="comment">// 不使用泛型</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> myList.iterator();</span><br><span class="line"><span class="comment">// 使用泛型</span></span><br><span class="line">Iterator&lt;Animal&gt; it = myList.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 不使用泛型，此时返回的类型是Object</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next()</span><br><span class="line">    <span class="comment">// 使用泛型, 此时可以调用Animal的方法</span></span><br><span class="line">    <span class="type">Animal</span> <span class="variable">obj</span> <span class="operator">=</span> it.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自动类型推断机制"><a href="#自动类型推断机制" class="headerlink" title="自动类型推断机制"></a>自动类型推断机制</h5><blockquote><p>jdk8新增，又称钻石表达式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右边的 &lt;&gt; 可以省略</span></span><br><span class="line">List&lt;Anamal&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h5 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h5><blockquote><p>myType 是一个标识符随便命名，java源代码一般用T，E</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &lt;myType&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">(myType o)</span> &#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test&lt;<span class="type">int</span>&gt; int1 = <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;();</span><br><span class="line">        int1.doSome(<span class="number">1</span>);<span class="comment">// 此处只能传 int 类型</span></span><br><span class="line">        </span><br><span class="line">         Test&lt;String&gt; str1 = <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;();</span><br><span class="line">        str1.doSome(<span class="number">1</span>);<span class="comment">// 此处只能传 String 类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><blockquote><p>文件的输入（硬盘-&gt;内存）和输出（内存-&gt;硬盘）。通过IO可以完成硬盘文件的读和写</p></blockquote><ul><li>字节流：每次读取一个字节，啥类型都能读取</li><li>字符流：每次读取一个字符，这种流是为了方便读取普通文件存在的。如：.text</li></ul><h5 id="IO流的四大家族"><a href="#IO流的四大家族" class="headerlink" title="IO流的四大家族"></a>IO流的四大家族</h5><ol><li>java.io.InputStream    字节输入流</li><li>java.io.OutPutStream   字节输出流</li><li>java.io.Reader    字符输入流</li><li>java.io.Writer    字符输出流</li></ol><blockquote><ul><li><p>方法名以 <strong>Stream 结尾</strong>的都是字节流。</p></li><li><p>四大家族首领都是抽象类。</p></li><li><p>所有流都有close方法</p></li><li><p>所有输出流都是可刷新的（实现了java.io.Flushable）刷新的作用就是清空管道，最终输出完记得调一下</p></li></ul></blockquote><p>6种类型的流：</p><ul><li><p>File 文件专属</p><ul><li><p>*FileInputStream</p><blockquote><p>read() 读</p><p>available() 剩余多少字节未读</p><p>skip()  跳过多少字节不读</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节读取</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.text&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (readCount != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 可以一次读5个字节</span></span><br><span class="line">    <span class="comment">// byte[] bytes = new byte[4];</span></span><br><span class="line">    <span class="comment">// 一次读完，不适合大文件</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">    </span><br><span class="line">    readCount = fis.read(bytes);</span><br><span class="line">    <span class="keyword">if</span> (readCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 将byte转字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;str = &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,readCount));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure></li><li><p>*FileOutPutStream </p><blockquote><p>write(文件名, 追加模式)</p><p>flush() 清空连接管道</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二参数 true 表示追加，不是重写</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.text&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="type">byte</span>[] bt = &#123;<span class="number">100</span>, <span class="number">120</span>,<span class="number">110</span>,<span class="number">111</span>&#125;;</span><br><span class="line"><span class="comment">// 字符串转byte在写入</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;我是一个中国人&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bs = s.getBytes();</span><br><span class="line">fis.write(bt);</span><br><span class="line">fis.write(bs);</span><br><span class="line">fis.flush();</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><p>  <strong>文件的复制</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(getPath(<span class="string">&quot;data.text&quot;</span>));</span><br><span class="line">fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/javaSE/daySE01/data1.text&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心：边写边读</span></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];<span class="comment">// 最多拷贝1M</span></span><br><span class="line"><span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readCount = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;readCount = &quot;</span> + readCount);</span><br><span class="line">    fos.write(bytes, <span class="number">0</span>, readCount);</span><br><span class="line">&#125;</span><br><span class="line">fos.flush();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure></li><li><p>FileReader</p><blockquote><p>文件字符输入流，只能读取普通文本</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(getPath(<span class="string">&quot;data.text&quot;</span>));</span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readCount = fr.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, readCount));</span><br><span class="line">&#125;</span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure></li><li><p>FileWriter</p><blockquote><p>文件字符输出流，只能写到普通文本()能用记事本打开的都是普通文本</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">out = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data.text&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="type">char</span>[] charts = &#123;<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;谁&#x27;</span>,<span class="string">&#x27;?&#x27;</span>&#125;;</span><br><span class="line">out.write(charts);</span><br><span class="line">out.write(<span class="string">&quot;我是一个字符串。&quot;</span>);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><p>  <strong>复制文件</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">out = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data.text&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\target.text&quot;</span>);</span><br><span class="line"><span class="type">char</span>[] charts = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>*<span class="number">512</span>];<span class="comment">// 限制1M</span></span><br><span class="line"><span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((readCount = in.read(charts)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    out.write(charts, <span class="number">0</span>, readCount);</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Buffered  缓冲流 【不需要指定char,byte 缓冲字符】</p><ul><li><p>BufferedInputStream</p></li><li><p>BufferedOutPutStream   </p></li><li><p>BufferedReader</p><blockquote><p>BufferedReader(Reader) 只能传入字符流</p><p>readLine() 读取一行字符</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data.text&quot;</span>);</span><br><span class="line"></span><br><span class="line">FileInputStream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个流构造方法需要传入一个流时：被传入的流叫做节点流 fr</span></span><br><span class="line"><span class="comment">// 外部负责包装的流，叫做包装流/处理流 br</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line"><span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((rs = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节点流不需要手动关闭，会自动关闭</span></span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure></li><li><p>BufferedWriter</p><blockquote></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data.text&quot;</span>,<span class="literal">true</span>)));</span><br><span class="line">bw.write(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Data  数据流</p><blockquote><p>DataOutPutStream 写入数据，只能用  DataOutPutStream 按写入顺序读取指定类型，才能正常去除数据</p></blockquote><ul><li><p>*DataInputStream</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data2.text&quot;</span>));</span><br><span class="line">System.out.println(in.readBoolean());</span><br><span class="line">System.out.println(in.read());</span><br><span class="line">System.out.println(in.readUTF());</span><br><span class="line">System.out.println(in.readChar());</span><br><span class="line"></span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li><li><p>*DataOutPutStream</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data2.text&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line">out.writeBoolean(flag);</span><br><span class="line">out.write(a);</span><br><span class="line">out.writeUTF(b);</span><br><span class="line">out.writeChar(c);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Print  标准输出流</p><ul><li><p>PrintWriter</p></li><li><p>PrintStream</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将标准输出流方向修改到 log 文件, 标准输出流不需要关闭</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">printStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\log.text&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">printStream.println(<span class="string">&quot;日志1&quot;</span>);</span><br><span class="line">printStream.println(<span class="string">&quot;日志2&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Object  对象专属流</p><blockquote><p><strong>序列化</strong>：将内存中的java对象一块一块的写入到硬盘文件的过程</p><p><strong>反序列化</strong>：将硬盘上的碎片数据在内存中恢复成对象</p><p>对象要想参与序列化，需要实现 Serializable 接口</p><p> <strong>Serializable 接口</strong>:</p><p>​    这是一个标志接口，里边啥也没有.实现这个接口的类 java虚拟机会提供一个序列化版本号。【将一个对象序列化后，如果之后类发生了变化，则后边想反序列化对象就会报错】</p><p><strong>序列化版本号的作用？</strong></p><p>​    Java区分一个类，先比较类名，再比较序列化版本号</p><p><strong>自动生成序列化的缺陷</strong></p><p>​    几年前序列化的一个对象，后续不能更改代码。否则几年前序列化的对象不能反序列化回来</p><p><strong>一次序列化多个对象</strong>： 使用集合把多个对象装进去，集合与其中对象都需要实现 Serializable 接口</p><p><strong>结论：凡是实现Serializable 接口的类应该手动设置，不在改变</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Test implemtnts Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>ObjectInputStream</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">oos = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\student&quot;</span>));</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> oos.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;obj = &quot;</span> + obj);</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure></li><li><p>ObjectOutPutStream</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;www&quot;</span>, <span class="number">16</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\student&quot;</span>));</span><br><span class="line">oos.writeObject(s);</span><br><span class="line">oos.flush();</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><p>  如果某个对象中的属性不希望参与序列化可以使用 属性修饰符：transient</p></li></ul></li><li><p>转换流（将字节流-&gt; 字符流）</p><ul><li><p>InputStreamReader</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字节流</span></span><br><span class="line">in= <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data.text&quot;</span>);</span><br><span class="line"><span class="comment">// 字节流 =&gt; 字符流</span></span><br><span class="line">reader = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in);</span><br></pre></td></tr></table></figure></li><li><p>OutPutStreamWriter</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data.text&quot;</span>,<span class="literal">true</span>)));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="通过properties-读取配置文件信息"><a href="#通过properties-读取配置文件信息" class="headerlink" title="通过properties 读取配置文件信息"></a>通过properties 读取配置文件信息</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=www</span><br><span class="line">password=123</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\javaSE\\daySE01\\src\\data2.text&quot;</span>);</span><br><span class="line"><span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">p.load(reader);</span><br><span class="line">System.out.println(p.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(p.getProperty(<span class="string">&quot;password&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="Java-io-File-类"><a href="#Java-io-File-类" class="headerlink" title="Java.io.File 类"></a>Java.io.File 类</h4><blockquote><p>FIle 类与流无关，不能读写，File 对象表示 <strong>文件和目录</strong>的抽象形式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 File,</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/myTest&quot;</span>);</span><br><span class="line"><span class="comment">// 不存在以文件形式创建</span></span><br><span class="line"><span class="keyword">if</span> (!f1.exists()) &#123;</span><br><span class="line">    f1.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不存在以目录形式创建</span></span><br><span class="line"><span class="keyword">if</span>(!f1.exists()) &#123;</span><br><span class="line">    f1.mkdir();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多重目录</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/myTest/day01/module1/one&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!f2.exists()) &#123;</span><br><span class="line">    f2.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/myTest/day01/module1&quot;</span>);</span><br><span class="line"><span class="comment">// 获取父级目录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> f3.getParent();</span><br><span class="line"><span class="comment">// 获取父级绝对路径</span></span><br><span class="line">f3.getParentFile().getAbsolutePath();</span><br></pre></td></tr></table></figure><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li>isFile  判断是否文件</li><li>isDirectory  判断是否目录</li><li>getName  获取文件名</li><li>lastModified  获取上次修改时间</li><li>length  获取文件大小</li><li>listFile  获取当前目录下所有子文件</li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><blockquote><p><strong>什么式进程？线程?</strong></p><p>进程是一个应用程序（进程可以启动多个线程）</p><p>线程是一个进程的中的执行场景/执行单元</p></blockquote><h4 id="进程，线程关系"><a href="#进程，线程关系" class="headerlink" title="进程，线程关系"></a>进程，线程关系</h4><blockquote><p>进程A和进程B内存独立不共享</p><p>线程A和B，堆内存和方法区共享，栈内存独立</p></blockquote><h4 id="真正的多线程并发"><a href="#真正的多线程并发" class="headerlink" title="真正的多线程并发"></a>真正的多线程并发</h4><blockquote><p>t1线程执行t1,t2线程执行t2.两者不会相互影响。这叫做真正的并发</p><p>单核CPU 不能做到真正的多线程并发，但可以做到给人多线程并发的 感觉、</p></blockquote><h4 id="实线线程的方式"><a href="#实线线程的方式" class="headerlink" title="实线线程的方式"></a>实线线程的方式</h4><ol><li><p>编写一个类直接继承java.lang.Thread, 重写run方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">// 启动线程.在JVM中开启一个新的栈空间，start方法就结束了。 直接调用run方法不会开辟新空间开启线程</span></span><br><span class="line">        td.start();</span><br><span class="line">        <span class="comment">// 其他代码</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThred</span> implaments Thread &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新的线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写一个类实现java.lang.Runnable接口 (这种方式拓展性好)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="comment">// 创建线程</span></span><br><span class="line">            <span class="type">MyRunnable</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line">            t.start();</span><br><span class="line">            <span class="comment">// 其他代码</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新的线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 匿名内部类方式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>() &#123;</span><br><span class="line">            run() &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">// 其他代码</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现 Callable 接口</p><blockquote><p>可以获取线程返回值</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throw</span> Exception &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 创建线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">        </span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">// 获取结果, 此处会阻塞</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> task.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>  &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新的线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><ul><li>新建状态：刚 new 出来</li><li>就绪状态：调用了 start 方法，具有抢夺CPU时间片的权利</li><li>运行状态：内部调用了 run方法后进入，当抢夺的时间片用完再次回到就绪状态，再次抢夺时间片回来继续执行代码（这个来回切换状态的过程叫做JVM的调度）</li><li>阻塞状态：此时线程会放弃之前占有的CPU时间片，例如进入到键盘输入，休眠等方法</li></ul><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230209112604572.png" alt="image-20230209112604572"></p><h4 id="获取线程对象，名字"><a href="#获取线程对象，名字" class="headerlink" title="获取线程对象，名字"></a>获取线程对象，名字</h4><blockquote><p>默认线程名字 Thread-n 【n从开始递增】</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建线程</span></span><br><span class="line"><span class="type">MyRunnable</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line"><span class="comment">// 获取线程名字</span></span><br><span class="line">System.out.println(t.getName());;</span><br><span class="line"><span class="comment">// 修改名字</span></span><br><span class="line">t.setName(<span class="string">&quot;line&quot;</span>);</span><br><span class="line">System.out.println(t.getName());;</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h4 id="获取当前线程"><a href="#获取当前线程" class="headerlink" title="获取当前线程"></a>获取当前线程</h4><blockquote><p>哪个线程在执行run方法，就获取哪个线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br></pre></td></tr></table></figure><h4 id="线程的sleep方法"><a href="#线程的sleep方法" class="headerlink" title="线程的sleep方法"></a>线程的sleep方法</h4><blockquote><p>静态方法(跟谁调用没关系)，参数 毫秒。让当前线程进组阻塞状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>*<span class="number">3</span>)<span class="string">&#x27;// sleep 3s</span></span><br></pre></td></tr></table></figure><h4 id="唤醒线程"><a href="#唤醒线程" class="headerlink" title="唤醒线程"></a>唤醒线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建线程</span></span><br><span class="line"><span class="type">MyRunnable</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line">t.inerrupt();</span><br></pre></td></tr></table></figure><h4 id="强行终止线程"><a href="#强行终止线程" class="headerlink" title="强行终止线程"></a>强行终止线程</h4><blockquote><p>容易丢失数据，不建议使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建线程</span></span><br><span class="line"><span class="type">MyRunnable</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line">t.sopt();</span><br></pre></td></tr></table></figure><h4 id="合理的终止线程"><a href="#合理的终止线程" class="headerlink" title="合理的终止线程"></a>合理的终止线程</h4><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyRunnable</span> <span class="variable">td</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(td);</span><br><span class="line"><span class="comment">// 终止线程</span></span><br><span class="line">td.run = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">run</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新的线程&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(run) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h4><blockquote><p><strong>常见的线程调度模型</strong>，Java采用第一种</p><ul><li>抢占式调度模型：哪个线程优先级高，强夺CPU时间片的概率就高一些</li><li>均分式调度模型：平均分配CPU时间片，每个线程占用CPU时间片长度一样</li></ul></blockquote><h4 id="线程调度相关方法"><a href="#线程调度相关方法" class="headerlink" title="线程调度相关方法"></a>线程调度相关方法</h4><ul><li><p>setPriority(int newPriority) 设置线程的优先级</p></li><li><p>int getPriority()  获取线程优先级 [1,10]，默认5</p></li><li><p>static void yield()  让位，暂停当前线程让其他线程先执行（非阻塞），从运行状态退回就绪状态</p></li><li><p>join() 合并线程</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// t合并到当前线程，当前线程受阻塞，t线程执行直到结束</span></span><br><span class="line">t.join();</span><br></pre></td></tr></table></figure></li></ul><h4 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h4><blockquote><p>以后在开发中，我们的项目都是运行在服务器当中，而服务器已经将线程的定义，线程对象的创建，线程的启动等，都已经实现完了。这些代码我们都不需要编写.<br>最重要的是:你要知道，你编写的程序需要放到一个多线程的环境下运行，你更需要关注的是这些数据在多线程并发的环境下是否是安全的。(重点: *<em>t</em> )</p></blockquote><p><strong>啥时候数据会在多线程并发存在安全问题</strong></p><p>满足以下三个条件就会存在安全问题：</p><ul><li>多线程并发</li><li>有数据共享</li><li>共享数据有修改行为</li></ul><p><strong>怎么解决？</strong></p><blockquote><p>线程排队执行，不能并发。（线程同步机制）</p></blockquote><p>异步编程模型：异步就是并发</p><p>同步编程模型：同步就是排队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程同步机制语法</span></span><br><span class="line"><span class="comment">// ()中写什么？假设t1,t2,t3 3个线程，只希望t1,t2排队，t3不排队。（）中就写t1,t2共享的对象，这个对象对于t3来说不是共享的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">()</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    synchroized() &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 共享对象只能是 this</span></span><br><span class="line"><span class="keyword">public</span> synchroized <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">()</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示找类🔒，类锁只有一个，创建的对象都共用一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> synchroized <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">()</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>理解线程同步锁机制 ：例如🚾就一个🕳，一个人上时会🔒🚪，第二个人就进不去，只有等第一个人解决完打开🔒开🚪后，第二个人才能进去</strong>， 人就像线程，共享的对象就是🕳</p><h4 id="死锁现象"><a href="#死锁现象" class="headerlink" title="死锁现象"></a>死锁现象</h4><p>两个线程t1, t2，共享🔒s1,s2。 t1 先锁 s1, 再锁s2。t2先锁s2,再锁s1。 结果t1锁住s1,等待s2，t2锁住s2,等待s1。这种现象就叫死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">MyThread1</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>(o1, o2);</span><br><span class="line">    <span class="type">MyThread1</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>(o1, o2);</span><br><span class="line">    m1.start();</span><br><span class="line">    m2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.o1 = o1;</span><br><span class="line">        <span class="built_in">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        sychonized (o1) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            sychonized (o2) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Object o1;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.o1 = o1;</span><br><span class="line">        <span class="built_in">this</span>.o2 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        sychonized (o2) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            sychonized (o1) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三种变量"><a href="#三种变量" class="headerlink" title="三种变量"></a>三种变量</h4><ul><li>实例变量：堆</li><li>静态变量：方法区</li><li>局部变量：栈</li></ul><p>局部变量永远不会有线程安全问题，因为 不共享，一个线程一个栈</p><h4 id="开发中如何避免"><a href="#开发中如何避免" class="headerlink" title="开发中如何避免"></a>开发中如何避免</h4><blockquote><p>不能直接使用线程安全的数据类型，很导致程序执行效率低</p></blockquote><ol><li>经量使用局部变量代替实例变量和静态变量</li><li>如果必须是实例变量，可以考虑创建多个对象，不共享内存</li><li>使用  synchroized,线程同步机制</li></ol><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><blockquote><p>如 System.gc(); 也叫做后台线程。一般守护线程是死循环。只要用户线程结束，守护线程自动结束</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义守护线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">    <span class="comment">// 设置成守护线程</span></span><br><span class="line">    t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">    t.start();</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;我是守护者&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><blockquote><p>java.util.Timer 很少用，框架大多会提供定时任务功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        <span class="type">SimpleDataFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDataFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">first</span> <span class="operator">=</span> sdf.parse(<span class="string">&#x27;2023-03-03&#x27;</span>);</span><br><span class="line">     timer.schedule(<span class="keyword">new</span> <span class="title class_">logTimerTask</span>(), first, <span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogTomerTsak</span> <span class="keyword">extends</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="wait-和-notify-方法"><a href="#wait-和-notify-方法" class="headerlink" title="wait 和 notify 方法"></a>wait 和 notify 方法</h4><blockquote><p>它们并不是线程对象专属方法，所有对象都能调用</p></blockquote><h5 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h5><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.await();</span><br></pre></td></tr></table></figure><p>​    让正在o对象上活动的线程进入等待状态，无期限等待，百到被唤配为止。<br>​    o.wait() ;方法的调用，会让”当前线程(正在o对象上活动的线程)”进入等待状态，</p></blockquote><h5 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h5><blockquote><p>唤醒o对象上沉睡的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.notify();</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230209164328749.png" alt="image-20230209164328749"></p><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><blockquote><p>通过Java 语言中的反射机制可以操作字节码文件。</p></blockquote><blockquote><p>相关包的位置： java.lang.reflect.*</p><p>相关重要的类</p><ul><li>java.lang.Class 字节码文件</li><li>java.lang.reflect.Method 字节码中的方法</li><li>java.lang.reflect.Constructor 字节码中构造方法字节码</li><li>java.lang.reflect.Field 字节码中属性字节码</li></ul></blockquote><h4 id="获取字节码的三种方式"><a href="#获取字节码的三种方式" class="headerlink" title="获取字节码的三种方式"></a>获取字节码的三种方式</h4><ol><li><p>java.lang.Class</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>java 中任意一个对象都有一个方法：getClass()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// x 代表String.class 字节码文件，x代表String 类型</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">x</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">c1 = x;<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>java语言中任何一种类型，包括基本数据类型，他都有.class属性</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">z</span> <span class="operator">=</span> String.class;<span class="comment">// 代表String类型</span></span><br><span class="line">z==x;<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="通过反射实例化对象"><a href="#通过反射实例化对象" class="headerlink" title="通过反射实例化对象"></a>通过反射实例化对象</h4><blockquote><p>获取到class能干吗？</p><p>通过 newInstance 实例化对象，实际上调用了无参构造方法，必须保证无参构造存在。【比普通方式灵活】</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.xxx.java.bean.User&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// newInstance 会调用无参构造</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">c</span>.newInstance();</span><br></pre></td></tr></table></figure><p>可以同过配置项，动态加载不同的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chapter25/classinfo.properties</span></span><br><span class="line">classNae = <span class="string">&quot;java.util.Date&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建读取流</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;chapter25/classinfo.properties&quot;</span>);</span><br><span class="line"><span class="comment">// 创建集合</span></span><br><span class="line"><span class="type">Propereties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">// 加载</span></span><br><span class="line">pro.load(rd);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">rd.close();</span><br><span class="line"><span class="comment">// 反射实例化对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&#x27;className&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">c</span>.newInstance();</span><br></pre></td></tr></table></figure><h4 id="Class-forName-发生了什么？"><a href="#Class-forName-发生了什么？" class="headerlink" title="Class.forName 发生了什么？"></a>Class.forName 发生了什么？</h4><blockquote><p>Class.forName 会导致类加载。<strong>如果你希望一个类的静态代码块长记性，其他一律不执行</strong> 可以这样使用 Class.forName(className);</p></blockquote><h4 id="文件路径问题"><a href="#文件路径问题" class="headerlink" title="文件路径问题"></a>文件路径问题</h4><blockquote><p>复制引用的方式只在Idea中有效。代码在其他位置打开可能不一样。</p></blockquote><p><strong>src是类路径的根路径，在src下的都是类路径：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Thread.currentThread()当前线程路径</span></span><br><span class="line"><span class="comment">getContextClassLoader() 线程方法，可以获取当前线程的类加载器对象</span></span><br><span class="line"><span class="comment">getResource(&quot;&quot;) 【获取资源】类加载器方法，当前类加载器默认的根路径【src】下加载资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">根类路径位置先把getResource()方法不传参数看看，不同框架可能不一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">最终获取到文件的绝对路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;com/bjpowernode/java/bean/classinfo.properties&quot;</span>).getPath();</span><br></pre></td></tr></table></figure><p><strong>以流的形式返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">rd</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;test.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    p.load(rd);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;className&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="资源绑定器"><a href="#资源绑定器" class="headerlink" title="资源绑定器"></a>资源绑定器</h4><blockquote><p>java.util 包下提供了一个资源绑定器，便于获取属性配置文件中的内容</p><p>只能绑定 xxx.properties 文件,绑定时不带后缀。并且这个名，必须在类路径下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="反射属性"><a href="#反射属性" class="headerlink" title="反射属性"></a>反射属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reflectTestFiled</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;myName&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">version</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line"><span class="comment">// 获取完整类名 studentClass.getName()</span></span><br><span class="line"><span class="comment">// 获取简单类名 studentClass.getSimpleName()</span></span><br><span class="line"><span class="comment">// 获取属性类型 studentClass.getTypeName()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有类中的 public修饰的 Filed</span></span><br><span class="line">Field[] field = studentClass.getFields();</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> field[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 取出名字</span></span><br><span class="line">System.out.println(<span class="string">&quot;取出 &quot;</span> + f.getName());</span><br><span class="line"><span class="comment">// 过去所有属性名</span></span><br><span class="line">Field[] fs = studentClass.getDeclaredFields();</span><br><span class="line">System.out.println(<span class="string">&quot;field = &quot;</span> + fs.length);</span><br><span class="line"><span class="keyword">for</span> (Field item: fs) &#123;</span><br><span class="line">    <span class="comment">// Modifier.toString(int type) 将 item.getModifiers() 返回的数字类型转换为文字描述</span></span><br><span class="line">    System.out.println(<span class="string">&quot;类型： &quot;</span>+ item.getType().getSimpleName() + <span class="string">&quot;属性名：&quot;</span> + item.getName() + <span class="string">&quot;修饰符：&quot;</span> + Modifier.toString(item.getModifiers()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><blockquote><p>通过反射机制，反编译一个类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    studentClass = Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建字符串拼接缓冲</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">s.append(Modifier.toString(studentClass.getModifiers()) + <span class="string">&quot; class &quot;</span> + studentClass.getSimpleName() + <span class="string">&quot; &#123;\n&quot;</span>);</span><br><span class="line">Field[] fields = studentClass.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field item: fields) &#123;</span><br><span class="line">    s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    s.append(Modifier.toString(item.getModifiers()));</span><br><span class="line">    s.append(<span class="string">&quot; &quot;</span>+ item.getType().getSimpleName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    s.append(item.getName()+ <span class="string">&quot;;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><h4 id="怎么通过反射机制访问一个Java对象的属性？"><a href="#怎么通过反射机制访问一个Java对象的属性？" class="headerlink" title="怎么通过反射机制访问一个Java对象的属性？"></a>怎么通过反射机制访问一个Java对象的属性？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line"><span class="comment">// c 就是 reflectTestFiled 对象，底层调用无参构造</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> stydentClass.newInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 name 属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 如果要访问的属性是私有的，需要打破封装才能赋值 【又安全隐患】</span></span><br><span class="line">nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 给name 赋值</span></span><br><span class="line">nameField.set(c, <span class="string">&quot;你的名字&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="反射方法"><a href="#反射方法" class="headerlink" title="反射方法"></a>反射方法</h4><blockquote><p>方法体中的逻辑代码无法反编译</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有方法</span></span><br><span class="line">Method[] methods = userClass.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(Method item: methods) &#123;</span><br><span class="line">    <span class="comment">// 方法返回值类型</span></span><br><span class="line">    item.getReturnType();</span><br><span class="line">    <span class="comment">// 获取方法名字</span></span><br><span class="line">    item.getName();</span><br><span class="line">    <span class="comment">// 获取修饰符列表</span></span><br><span class="line">    Modifier.toString(item.getModifiers());</span><br><span class="line">    <span class="comment">// 方法参数列表</span></span><br><span class="line">    Class[] paramsTypes = item.getParameterTypes();</span><br><span class="line">    <span class="keyword">for</span>(Class parameterType: paramsTypes) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过反射机制怎么调用一个方法？"><a href="#通过反射机制怎么调用一个方法？" class="headerlink" title="通过反射机制怎么调用一个方法？"></a>通过反射机制怎么调用一个方法？</h4><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">userClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// c 就是 reflectTestFiled 对象，底层调用无参构造</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> userClass.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法， 通过方法名，参数列表区分方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">loginMethod</span> <span class="operator">=</span> item.getDeclaredMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class);</span><br><span class="line"><span class="comment">//Method loginMethod = item.getDeclaredMethod(&quot;login&quot;, int.class);</span></span><br><span class="line"><span class="comment">// 调用方法4要素，对象，方法名，参数，返回值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">retValue</span> <span class="operator">=</span> loginMethod.invoke(c, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="通过反射机制创建对象"><a href="#通过反射机制创建对象" class="headerlink" title="通过反射机制创建对象"></a>通过反射机制创建对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line"><span class="comment">// 获取有参构造</span></span><br><span class="line"><span class="type">Construct</span> <span class="variable">con</span> <span class="operator">=</span> c.getDelaredConstrucror(<span class="type">int</span>.class, String.class, String.class, <span class="type">boolean</span>.class);</span><br><span class="line"></span><br><span class="line">con.newInstance(<span class="number">110</span>, <span class="string">&quot;joke&quot;</span>, <span class="string">&quot;1900-10-11&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="通过反射获取一个类的父类，已经实现的接口"><a href="#通过反射获取一个类的父类，已经实现的接口" class="headerlink" title="通过反射获取一个类的父类，已经实现的接口"></a>通过反射获取一个类的父类，已经实现的接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zkrd.officialwebsite.util.reflectTestFiled&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父类</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">supClass</span> <span class="operator">=</span> c.getSuperClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父类实现的接口 (一个类可以实现多个接口)</span></span><br><span class="line">Class[] interfaces = c.getInterfaces();</span><br><span class="line"><span class="keyword">for</span>(Class item: interfaces) &#123;</span><br><span class="line">    System.out.println(item.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h4><blockquote><p>语法： int… args。 根js中的拓展运算符有点类似</p><ul><li>可变长度要求参数个数是：0~N</li><li>可变长度参数只能有一个，而且只能在最后</li><li>可变长度可以当作一个数组处理</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(<span class="type">int</span> a, Sting... args1)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>注解Annotation是一种引用数据类型。编译之后也是生成 xxx.class文件</p><p>语法格式：</p><p>[修饰符列表] @interface 注解类型名 {}</p></blockquote><h4 id="注解可以用在什么地方？"><a href="#注解可以用在什么地方？" class="headerlink" title="注解可以用在什么地方？"></a>注解可以用在什么地方？</h4><ol><li><p>注解使用时的语法格式是：</p><p> @注解类型名</p></li><li><p>注解可以出现在类，属性，方法，变量上…</p><p> 注解还可以出现在注解类型上</p></li></ol><h4 id="JDK内置的注解"><a href="#JDK内置的注解" class="headerlink" title="JDK内置的注解"></a>JDK内置的注解</h4><blockquote><ul><li><p>Deprecated    </p><p>  用Deprecated 注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择【此代码已过时】</p></li><li><p>Override </p><p>  表示一个方法重写，给编译器参考的，运行无用</p></li></ul></blockquote><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><blockquote><p>用来标注’注解类型的注解，称为元注解</p><p>常见的元注解</p><ul><li><p>Target</p><p>  标示被注解的注解可以使用在哪些地方</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能出现在方法上</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>Retention</p><p>  表示被注解的注解最终保存在哪个位置</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存在Java源代码中</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="如果一个注解当中有属性，那么必须给属性赋值-除非有默认值"><a href="#如果一个注解当中有属性，那么必须给属性赋值-除非有默认值" class="headerlink" title="如果一个注解当中有属性，那么必须给属性赋值,除非有默认值"></a>如果一个注解当中有属性，那么必须给属性赋值,除非有默认值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNonotation &#123;</span><br><span class="line">    <span class="comment">// name 属性</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">color</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用注解</span></span><br><span class="line"><span class="meta">@MyNonotation(name=&quot;属性值&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果属性名是value, 可以省略不写</span></span><br><span class="line"><span class="meta">@MyNonotation(&quot;属性值&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="注解中的属性可以是？"><a href="#注解中的属性可以是？" class="headerlink" title="注解中的属性可以是？"></a>注解中的属性可以是？</h4><blockquote><p>byte,short,int, long,double,boolean,char,string,class,枚举类型。以及以上每一种的数组形式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 数组大括号, 如果数组只有一项可以省略大括号</span></span><br><span class="line"><span class="meta">@MyNonotation(friend = &#123;&quot;张三&quot;, &#x27;李四&#x27;&#125;, arr = 5)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="反射注解"><a href="#反射注解" class="headerlink" title="反射注解"></a>反射注解</h4><blockquote><p>如果希望这个注解可以被反射：</p><p>@Retention(Retentionpolicy.RUNTIME})</p></blockquote><p><strong>获取某个类上的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&#x27;xxxxx.MyAnnotation.class&#x27;</span>);</span><br><span class="line"><span class="comment">// 判断是否有注解</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span>  c.isAnnotationPresent(MyAnnotation.class);</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">    <span class="type">MyAnnotation</span> <span class="variable">annotation</span> <span class="operator">=</span> (MyAnnotation)c.getAnnotation(MyAnnotation.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取注解 value 属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取方法上注解自定义属性的值"><a href="#获取方法上注解自定义属性的值" class="headerlink" title="获取方法上注解自定义属性的值"></a>获取方法上注解自定义属性的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&#x27;xxxxx.MyAnnotation.class&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">doSomeMethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;dosome&quot;</span>);</span><br><span class="line"><span class="comment">// 方法中是否有注解</span></span><br><span class="line"><span class="keyword">if</span>(doSomeMethod.isAnnotationPresent(MyAnnotation.class)) &#123;</span><br><span class="line">    <span class="comment">// 获取方法注解</span></span><br><span class="line">    <span class="type">MyAnnotaion</span> <span class="variable">myAnnotaion</span> <span class="operator">=</span> doSomeMethod.getAnnotation(MyAnnotation.class);</span><br><span class="line">    <span class="comment">// 获取注解属性</span></span><br><span class="line">    myAnnotaion.username();</span><br><span class="line">    myAnnotaion.password();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK类加载器"><a href="#JDK类加载器" class="headerlink" title="JDK类加载器"></a>JDK类加载器</h3><blockquote><p>负责专门加载类的命令/工具</p><p>jdk 中自带了3个类加载器</p><ul><li>启动类加载器</li><li>扩展类加载器</li><li>应用类加载器</li></ul></blockquote><p>假设这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><p>代码执行前，会将所需要类全部加载到JVM当中。通过类加载器加载，看到以上代码类加载器会找String.class文件，找到就加载，那么是怎么经行加载的呢？</p><ol><li><p>首先<strong>启动类加载器</strong></p><p> ：路径 %JAVA_HOME%/jre/lib/rt.jar [里边都是JDK核心类库]</p></li><li><p>1加载不到就通过<strong>扩展类加载器</strong>加载</p><p> ：路径 %JAVA_HOME%/jre/lib/ext</p></li><li><p>如果2也找不到就会通过<strong>应用类加载器</strong>加载</p><p> 注意：应用类加载器专门加载：classoath中的类</p></li></ol><blockquote><p>优先从 1（父）2（母）【双亲委派机制】加载，防止类加载代码植入</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;java-特性&quot;&gt;&lt;a href=&quot;#java-特性&quot; class=&quot;headerlink&quot; title=&quot;java 特性&quot;&gt;&lt;/a&gt;java 特性&lt;/h2&gt;&lt;h3 id=&quot;Java-程序的版本&quot;&gt;&lt;a href=&quot;#Java-程序的版本&quot; class=&quot;headerlink&quot; title=&quot;Java 程序的版本&quot;&gt;&lt;/a&gt;Java 程序的版本&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;java SE (标准版)&lt;/p&gt;
&lt;p&gt;java EE（企业版）&lt;/p&gt;
&lt;p&gt;java ME（精简版）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;java-程序可移植性&quot;&gt;&lt;a href=&quot;#java-程序可移植性&quot; class=&quot;headerlink&quot; title=&quot;java 程序可移植性&quot;&gt;&lt;/a&gt;java 程序可移植性&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;什么是可移植性？&lt;/p&gt;
&lt;p&gt;java 程序可以做到一次编译，到处运行。可就是说可以运行到windows,linux等操作系统上。这个被称作Java程序的可移植性，或者叫跨平台。&lt;/p&gt;
&lt;p&gt;如何实现呢？&lt;/p&gt;
&lt;p&gt;Windows操作系统于Linux操作系统的内核肯定不一样，系统执行指令的而方式也不一样。 Java程序不能直接和系统打交道，因为Java程序只有一份。操作系统原理都不同&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;p&gt;sum团队想到了一个办法，他们让Java程序运行在一台虚拟的计算机中，这个虚拟计算机叫Java虚拟机，简称JVM。Java虚拟机再和底层操作系统打交道。&lt;/p&gt;
&lt;p&gt;这个虚拟机不能直接安装，而是通过安装适合自己操作系统的 &lt;strong&gt;java jdk&lt;/strong&gt; 来实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Java-的加载与执行&quot;&gt;&lt;a href=&quot;#Java-的加载与执行&quot; class=&quot;headerlink&quot; title=&quot;Java 的加载与执行&quot;&gt;&lt;/a&gt;Java 的加载与执行&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编译阶段主要任务是检查 Java 源程序是否符合 Java 语法（不进行运算），符合则生成正常字节码文件 (xxx.class)。不符合则无法生成字节码文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.java -&amp;gt; .class -&amp;gt;     类装载器 -&amp;gt; java 虚拟机（JVM） -&amp;gt; 操作系统 -&amp;gt; 硬件平台&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="java基础" scheme="https://wyf195075595.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JavaScript</title>
    <link href="https://wyf195075595.github.io/2022/11/15/programming/javascript/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript/"/>
    <id>https://wyf195075595.github.io/2022/11/15/programming/javascript/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript/</id>
    <published>2022-11-15T00:58:10.000Z</published>
    <updated>2022-12-08T06:28:40.482Z</updated>
    
    <content type="html"><![CDATA[<p><strong>LHS与RHS</strong></p><blockquote><p>LHS和RHS的含义是“赋值操作的左侧或右侧”并不一定意味着就是“=赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最好将其理解为“赋值操作的目标是谁（LHS）”以及“谁是赋值操作的源头（RHS）”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = a;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">foo</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>1．找到其中所有的LHS查询。（这里有3处！）</p><p>2．找到其中所有的RHS查询。（这里有4处！）</p><p><strong>ReferenceError</strong></p><blockquote><p>如果RHS查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出ReferenceError异常.</p><p>相较之下，当引擎执行LHS查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非“严格模式”下。</p></blockquote><p><strong>TypeError</strong></p><blockquote><p>ReferenceError同作用域判别失败相关，而TypeError则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</p></blockquote><span id="more"></span><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><blockquote><p>作用域共有两种主要的工作模型。第一种是最为普遍的，被大多数编程语言所采用的词法作用域，我们会对这种作用域进行深入讨论。另外一种叫作动态作用域，仍有一些编程语言在使用（比如Bash脚本、Perl中的一些模式等）。</p></blockquote><h3 id="词法阶段"><a href="#词法阶段" class="headerlink" title="词法阶段"></a>词法阶段</h3><blockquote><p>大部分标准语言编译器的第一个工作阶段叫作词法化（也叫单词化）。回忆一下，词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。这个概念是理解词法作用域及其名称来历的基础。</p></blockquote><h4 id="屏蔽效应"><a href="#屏蔽效应" class="headerlink" title="屏蔽效应"></a><strong>屏蔽效应</strong></h4><blockquote><p>作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”（内部的标识符“遮蔽”了外部的标识符）</p></blockquote><p>全局变量会自动成为全局对象（比如浏览器中的window对象）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span></span><br></pre></td></tr></table></figure><p>通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。</p><h3 id="欺骗词法"><a href="#欺骗词法" class="headerlink" title="欺骗词法"></a><strong>欺骗词法</strong></h3><blockquote><p>如果词法作用域完全由写代码期间函数所声明的位置来定义，怎样才能在运行时来“修改”（也可以说欺骗）词法作用域呢？</p></blockquote><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><blockquote><p>eval(..)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码</p></blockquote><p>JavaScript中还有其他一些功能效果和eval(..)很相似。setTimeout(..)和setInterval(..)的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。不要使用它们！</p><p>new Function(..)函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数（前面的参数是这个新生成的函数的形参）。这种构建函数的语法比eval(..)略微安全一些，但也要尽量避免使用。</p><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><blockquote><p>JavaScript中另一个难以掌握（并且现在也不推荐使用）的用来欺骗词法作用域的功能是with关键字</p></blockquote><p>with通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 单调乏味的重复&quot;obj&quot;</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">3</span>;</span><br><span class="line">obj.<span class="property">c</span> = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 简单的快捷方式</span></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line">    c = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>尽管with块可以将一个对象处理为词法作用域，但是这个块内部正常的var声明并不会被限制在这个块的作用域中，而是被添加到with所处的函数作用域中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">with</span> (obj) &#123;</span><br><span class="line">      a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(o1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">foo</span>(o2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2.<span class="property">a</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2——不好，a被泄漏到全局作用域上了！</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>eval(..)函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，而with声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域。</strong></p></blockquote><blockquote><p>另外一个不推荐使用eval(..)和with的原因是会被严格模式所影响（限制）。with被完全禁止，而在保留核心功能的前提下，间接或非安全地使用eval(..)也被禁止了</p></blockquote><h2 id="函数作用域和块级作用域"><a href="#函数作用域和块级作用域" class="headerlink" title="函数作用域和块级作用域"></a>函数作用域和块级作用域</h2><blockquote><p><strong>区分函数声明和表达式</strong>最简单的方法是看function关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。如果function是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</p></blockquote><h3 id="匿名和具名"><a href="#匿名和具名" class="headerlink" title="匿名和具名"></a>匿名和具名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I waited 1 second! &quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span> );</span><br></pre></td></tr></table></figure><blockquote><p>这叫作匿sss名函数表达式，因为function().．没有名称标识符。函数表达式可以是匿名的，而函数声明则不可以省略函数名——在JavaScript的语法中这是非法的。</p></blockquote><p>1．匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</p><p>2．如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</p><p>3．匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。</p><h4 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h4><blockquote><p>这种模式很常见，几年前社区给它规定了一个术语：IIFE，代表立即执行函数表达式（Immediately Invoked Function Expression）；</p><p>函数名对IIFE当然不是必须的，IIFE最常见的用法是使用一个匿名函数表达式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>相较于传统的IIFE形式，很多人都更喜欢另一个改进的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; .. &#125;())</span><br></pre></td></tr></table></figure><p><strong>IIFE的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">IIFE</span>(<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><strong>IIFE还有一种变化的用途是倒置代码的运行顺序，将需要运行的函数放在第二位，在IIFE执行之后当作参数传递进去。这种模式在UMD（Universal Module Definition）项目中被广泛使用。尽管这种模式略显冗长，但有些人认为它更易理解。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">IIFE</span>(<span class="params">def</span>) &#123;</span><br><span class="line">    <span class="title function_">def</span>(<span class="variable language_">window</span>);</span><br><span class="line">&#125;)(<span class="keyword">function</span> <span class="title function_">def</span>(<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if 块级作用域</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">    <span class="keyword">var</span> bar = foo * <span class="number">2</span>;</span><br><span class="line">    bar = <span class="title function_">something</span>(bar);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="with-1"><a href="#with-1" class="headerlink" title="with"></a>with</h4><blockquote><p>我们在第2章讨论过with关键字。它不仅是一个难于理解的结构，同时也是块作用域的一个例子（块作用域的一种形式），用with从对象中创建出的作用域仅在with声明中而非外部作用域中有效</p></blockquote><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h4><blockquote><p>非常少有人会注意到JavaScript的ES3规范中规定try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">undefined</span>(); <span class="comment">// 执行一个非法操作来强制制造一个异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// 能够正常执行！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// ReferenceError: err not found</span></span><br></pre></td></tr></table></figure><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><blockquote><p>let关键字可以将变量绑定到所在的任意作用域中（通常是{ .. }内部）。换句话说，let为其声明的变量隐式地劫持了所在的块作用域。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>    </span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">        &#123; <span class="comment">// &lt;-- 显式的块</span></span><br><span class="line">          <span class="keyword">let</span> bar = foo ＊ <span class="number">2</span>;</span><br><span class="line">          bar = <span class="title function_">something</span>(bar);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(bar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><blockquote><p>只要声明是有效的，在声明中的任意位置都可以使用{ .. }括号来为let创建一个用于绑定的块。在这个例子中，我们在if声明内部显式地创建了一个块，如果需要对其进行重构，整个块都可以被方便地移动而不会对外部if声明的位置和语义产生任何影响</p></blockquote><h4 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 在这里做点有趣的事情</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someReallyBigData = &#123; ..&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">process</span>(someReallyBigData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;my button&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">&#125;, <span class="comment">/*capturingPhase=*/</span><span class="literal">false</span> );</span><br></pre></td></tr></table></figure><blockquote><p>click函数的点击回调并不需要someReallyBigData变量。理论上这意味着当process(..)执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于click函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极有可能依然保存着这个结构（取决于具体实现）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 在这里做点有趣的事情</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个块中定义的内容完事可以销毁！</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> someReallyBigData = &#123; .. &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">process</span>(someReallyBigData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;my button&quot;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">&#125;, <span class="comment">/*capturingPhase=*/</span><span class="literal">false</span> );</span><br></pre></td></tr></table></figure><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><blockquote><p>除了let以外，ES6还引入了const，同样可以用来创建块作用域变量，但其值是固定的（常量）。之后任何试图修改值的操作都会引起错误。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>函数是JavaScript中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指{ .. }内部）。从ES3开始，try/catch结构在catch分句中具有块作用域。在ES6中引入了let关键字（var关键字的表亲），用来在任意代码块中声明变量。if (..) { let a = 2; }会声明一个劫持了if的{ .. }块的变量，并且将变量添加到这个块中。有些人认为块作用域不应该完全作为函数作用域的替代方案。两种功能应该同时存在，开发者可以并且也应该根据需要选择使用何种作用域，创造可读、可维护的优良代码。</p></blockquote><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><blockquote><p>变量和函数声明都会在作用域提升</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>函数表达式却不会被提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 不是ReferenceError, 而是TypeError!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// TypeError</span></span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> bar = ...self...</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h4><blockquote><p>函数声明和变量声明都会被提升。但是一个值得注意的细节（这个细节可以出现在有多个“重复”声明的代码中）是函数会首先被提升，然后才是变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>会输出1而不是2！这个代码片段会被引擎理解为如下形式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意，var foo尽管出现在function foo()..．的声明之前，但它是重复的声明（因此被忽略了），因为函数声明会被提升到普通变量之前。</p></blockquote><h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><blockquote><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p><strong>这是闭包吗？</strong></p><blockquote><p>技术上来讲，也许是。但根据前面的定义，确切地说并不是。我认为最准确地用来解释bar()对a的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。（但却是非常重要的一部分！）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">// 2——朋友，这就是闭包的效果。</span></span><br></pre></td></tr></table></figure><blockquote><p>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。</p></blockquote><h3 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, i＊<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正常情况下，我们对这段代码行为的预期是分别输出数字1～5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次6。</p><p><strong>延迟函数的回调会在循环结束时才执行</strong>。事实上，当定时器运行时即使每个迭代中执行的是setTimeout(.., 0)，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个6出来。</p></blockquote><p><strong>利用IIFE</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">j</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">      &#125;, j*<span class="number">1000</span> );</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在迭代内使用IIFE会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p><p>本质上这是将一个块转换成一个可以被关闭的作用域</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><blockquote><p>模块模式需要具备两个必要条件。</p><p>1．必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。</p><p>2．封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CoolModule</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> something = <span class="string">&quot;cool&quot;</span>;    </span><br><span class="line">    <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(something);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doAnother</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(another.<span class="title function_">join</span>(<span class="string">&quot; ! &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">doSomething</span>: doSomething,</span><br><span class="line">        <span class="attr">doAnother</span>: doAnother</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="title class_">CoolModule</span>();</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">doSomething</span>(); <span class="comment">// cool</span></span><br><span class="line">foo.<span class="title function_">doAnother</span>(); <span class="comment">// 1 ! 2 ! 3</span></span><br></pre></td></tr></table></figure><h3 id="现代的模块机制"><a href="#现代的模块机制" class="headerlink" title="现代的模块机制"></a>现代的模块机制</h3><blockquote><p>大多数模块依赖加载器/管理器本质上都是将这种模块定义封装进一个友好的API。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyModules</span> = (<span class="keyword">function</span> <span class="title function_">Manager</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> modules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">define</span>(<span class="params">name, deps, impl</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;deps.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          deps[i] = modules[deps[i]];</span><br><span class="line">      &#125;</span><br><span class="line">      modules[name] = impl.<span class="title function_">apply</span>(impl, deps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> modules[name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">define</span>: define,</span><br><span class="line">        <span class="attr">get</span>: get</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>定义模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyModules</span>.<span class="title function_">define</span>(<span class="string">&quot;bar&quot;</span>, [], <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">who</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Let me introduce: &quot;</span> + who;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">hello</span>: hello</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyModules</span>.<span class="title function_">define</span>(<span class="string">&quot;foo&quot;</span>, [<span class="string">&quot;bar&quot;</span>], <span class="keyword">function</span>(<span class="params">bar</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hungry = <span class="string">&quot;hippo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">awesome</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="title function_">hello</span>(hungry).<span class="title function_">toUpperCase</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">awesome</span>: awesome</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="title class_">MyModules</span>.<span class="title function_">get</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> foo = <span class="title class_">MyModules</span>.<span class="title function_">get</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    bar.<span class="title function_">hello</span>(<span class="string">&quot;hippo&quot;</span>)</span><br><span class="line">); <span class="comment">// Let me introduce: hippo</span></span><br><span class="line">foo.<span class="title function_">awesome</span>(); <span class="comment">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><blockquote><p>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</p><p>模块有两个主要特征：</p><p>（1）为创建内部作用域而调用了一个包装函数；</p><p>（2）包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</p></blockquote><h2 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="string">&quot;Hello, I&#x27;m &quot;</span> + identify.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Kyle&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> you = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Reader&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">identify.<span class="title function_">call</span>(me); <span class="comment">// KYLE</span></span><br><span class="line">identify.<span class="title function_">call</span>(you); <span class="comment">// READER</span></span><br><span class="line"></span><br><span class="line">speak.<span class="title function_">call</span>(me); <span class="comment">// Hello, 我是KYLE</span></span><br><span class="line">speak.<span class="title function_">call</span>(you); <span class="comment">// Hello, 我是READER</span></span><br></pre></td></tr></table></figure><p><strong>为什么要使用this?</strong></p><blockquote><p>这段代码可以在不同的上下文对象（me和you）中重复使用函数identify()和speak()，不用针对每个对象编写不同版本的函数。</p><p>如果不使用this，那就需要给identify()和speak()显式传入一个上下文对象。</p><p>this提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将API设计得更加简洁并且易于复用。</p></blockquote><h3 id="对this的误解"><a href="#对this的误解" class="headerlink" title="对this的误解"></a>对this的误解</h3><h4 id="指向自身"><a href="#指向自身" class="headerlink" title="指向自身"></a>指向自身</h4><blockquote><p>人们很容易把this理解成指向函数自身，这个推断从英语的语法角度来说是说得通的。</p></blockquote><p>记录一下函数foo被调用的次数，思考一下下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo: &quot;</span> + num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录foo被调用的次数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="title function_">foo</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo: 6</span></span><br><span class="line"><span class="comment">// foo: 7</span></span><br><span class="line"><span class="comment">// foo: 8</span></span><br><span class="line"><span class="comment">// foo: 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo被调用了多少次？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">count</span>); <span class="comment">// 0 -- 什么？！</span></span><br></pre></td></tr></table></figure><blockquote><p>this.count 和 foo.count 不是同一个东西，也就是说this 不是指向函数自身</p></blockquote><blockquote><p>如果要从函数对象内部引用它自身，那只使用this是不够的。一般来说你需要通过一个指向函数对象的词法标识符（变量）来引用它。</p><p>还有一种传统的但是现在已经被弃用和批判的用法，是使用arguments. callee来引用当前正在运行的函数对象。这是唯一一种可以从匿名函数对象内部引用自身的方法。</p></blockquote><h4 id="this指向函数的作用域"><a href="#this指向函数的作用域" class="headerlink" title="this指向函数的作用域"></a>this指向函数的作用域</h4><blockquote><p>这个问题有点复杂，因为在某种情况下它是正确的，但是在其他情况下它却是错误的。</p></blockquote><p>思考一下下面的代码，它试图（但是没有成功）跨越边界，使用this来隐式引用函数的词法作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>首先，这段代码试图通过this.bar()来引用bar()函数。这样调用能成功纯属意外</p><p>调用bar()最自然的方法是省略前面的this，直接使用词法引用标识符。</p><p>编写这段代码的开发者还试图使用this联通foo()和bar()的词法作用域，从而让bar()可以访问foo()作用域里的变量a。这是不可能实现的，使用this不可能在词法作用域中查到什么。</p></blockquote><h3 id="this到底是什么"><a href="#this到底是什么" class="headerlink" title="this到底是什么"></a>this到底是什么</h3><blockquote><p>this是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。<strong>this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。</strong></p></blockquote><h3 id="调用位置"><a href="#调用位置" class="headerlink" title="调用位置"></a>调用位置</h3><blockquote><p>在理解this的绑定过程之前，首先要理解调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置）。只有仔细分析调用位置才能回答这个问题：这个this到底引用的是什么？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当前调用栈是：baz</span></span><br><span class="line">    <span class="comment">// 因此，当前调用位置是全局作用域</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;baz&quot;</span>);</span><br><span class="line">    <span class="title function_">bar</span>(); <span class="comment">// &lt;-- bar的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 当前调用栈是baz -&gt; bar</span></span><br><span class="line">    <span class="comment">// 因此，当前调用位置在baz中</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// &lt;-- foo的调用位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 当前调用栈是baz -&gt; bar -&gt; foo</span></span><br><span class="line">    <span class="comment">// 因此，当前调用位置在bar中</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">baz</span>(); <span class="comment">// &lt;-- baz的调用位置</span></span><br></pre></td></tr></table></figure><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到当调用foo()时，this.a被解析成了全局变量a。为什么？因为在本例中，<strong>函数调用时应用了this的默认绑定，因此this指向全局对象。</strong></p><p>【注意】<strong>前提是在 非strict mode下</strong></p></blockquote><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>无论你如何称呼这个模式，当foo()被调用时，它的前面确实加上了对obj的引用。当函数引用有上下文对象时，隐式绑定规则会把函数调用中的this绑定到这个上下文对象。因为调用foo()时this被绑定到obj，因此this.a和obj.a是一样的。</p></blockquote><p><strong>对象属性引用链中只有上一层或者说最后一层在调用位置中起作用。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">obj2</span>: obj2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">obj2</span>.<span class="title function_">foo</span>(); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><h3 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h3><blockquote><p>一个最常见的this绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把this绑定到全局对象或者undefined上，取决于是否是严格模式。</p></blockquote><p>示例1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj.<span class="property">foo</span>; <span class="comment">// 函数别名！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;oops, global&quot;</span>; <span class="comment">// a是全局对象的属性</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// &quot;oops, global&quot;</span></span><br></pre></td></tr></table></figure><p>示例2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doFoo</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="comment">// fn其实引用的是foo</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">// &lt;-- 调用位置！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;oops, global&quot;</span>; <span class="comment">// a是全局对象的属性</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">doFoo</span>(obj.<span class="property">foo</span>); <span class="comment">// &quot;oops, global&quot;</span></span><br></pre></td></tr></table></figure><h3 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h3><blockquote><p>在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把this间接（隐式）绑定到这个对象上。</p><p>可以使用函数的<strong>call</strong>(..)和<strong>apply</strong>(..)方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>通过foo.call(..)，我们可以在调用foo时强制把它的this绑定到obj上。</p><p>如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值会被转换成它的对象形式（也就是new String(..)、new Boolean(..)或者new Number(..)）。这通常被称为“装箱”。</p></blockquote><p><strong>硬绑定</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>, something);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的辅助绑定函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">fn, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="title function_">bind</span>(foo, obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">bar</span>(<span class="number">3</span>); <span class="comment">// 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>由于硬绑定是一种非常常用的模式，所以ES5提供了内置的方法Function.prototype.bind，它的用法如下：</p><h3 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h3><blockquote><p>使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p><p>1．创建（或者说构造）一个全新的对象。</p><p>2．这个新对象会被执行[[Prototype]]连接。</p><p>3．这个新对象会绑定到函数调用的this。</p><p>4．如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> <span class="title function_">foo</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="API调用的“上下文”"><a href="#API调用的“上下文”" class="headerlink" title="API调用的“上下文”"></a>API调用的“上下文”</h3><blockquote><p>第三方库的许多函数，以及JavaScript语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”（context），其作用和bind(..)一样，确保你的回调函数使用指定的this。举例来说：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;awesome&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用foo(..)时把this绑定到obj</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(foo, obj);</span><br><span class="line"><span class="comment">// 1 awesome 2 awesome 3 awesome</span></span><br></pre></td></tr></table></figure><blockquote><p>这些函数实际上就是通过call(..)或者apply(..)实现了显式绑定，这样你可以少写一些代码。</p></blockquote><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong>隐式绑定和显式绑定哪个优先级更高？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">foo</span>(); <span class="comment">// 2</span></span><br><span class="line">obj2.<span class="title function_">foo</span>(); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>(obj2); <span class="comment">// 3</span></span><br><span class="line">obj2.<span class="property">foo</span>.<span class="title function_">call</span>(obj1); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到，显式绑定优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定</p></blockquote><p><strong>new绑定和隐式绑定的优先级谁高谁低?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj1.<span class="title function_">foo</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">obj1.<span class="property">foo</span>.<span class="title function_">call</span>(obj2, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj1.<span class="title function_">foo</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">a</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到new绑定比隐式绑定优先级高</p></blockquote><p><strong>new绑定和显式绑定谁的优先级更高呢？</strong></p><blockquote><p>new和call/apply无法一起使用，因此无法通过new foo.call(obj1)来直接进行测试。但是我们可以使用硬绑定（显示绑定的一种）来测试它俩的优先级。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">something</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="property">bind</span> (obj1);</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="title function_">bar</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">a</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="判断this"><a href="#判断this" class="headerlink" title="判断this"></a>判断this</h3><blockquote><p>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断：</p></blockquote><ol><li><p>函数是否在new中调用（new绑定）？如果是的话this绑定的是新创建的对象。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure></li><li><p>函数是否通过call、apply（显式绑定）或者硬绑定调用？如果是的话，this绑定的是指定的对象。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">call</span>(obj2)</span><br></pre></td></tr></table></figure></li><li><p>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this绑定的是那个上下文对象。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = obj1.<span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure></li><li><p>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="绑定例外"><a href="#绑定例外" class="headerlink" title="绑定例外"></a>绑定例外</h3><blockquote><p>规则总有例外，这里也一样。</p><p>在某些场景下this的绑定行为会出乎意料，你认为应当应用其他绑定规则时，实际上应用的可能是默认绑定规则</p></blockquote><h4 id="被忽略的this"><a href="#被忽略的this" class="headerlink" title="被忽略的this"></a>被忽略的this</h4><blockquote><p>如果你把null或者undefined作为this的绑定对象传入call、apply或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们的函数不需要关心this指向只关心参数时，但第一个参数需要占位符，null是一个不错的选择</p><p>然而，总是使用null来忽略this绑定可能产生一些副作用。如果某个函数确实使用了this（比如第三方库中的一个函数），那默认绑定规则会把this绑定到全局对象（在浏览器中这个对象是window），这将导致不可预计的后果（比如修改全局对象）。</p></blockquote><h4 id="更安全的this"><a href="#更安全的this" class="headerlink" title="更安全的this"></a>更安全的this</h4><blockquote><p>一种“更安全”的做法是传入一个特殊的对象，把this绑定到这个对象不会对你的程序产生任何副作用.</p><p>我们可以创建一个“DMZ”（demilitarized zone，非军事区）对象——它就是一个空的非委托的对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a:&quot;</span> + a + <span class="string">&quot;, b:&quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们的DMZ空对象</span></span><br><span class="line"><span class="keyword">var</span> ø = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把数组展开成参数</span></span><br><span class="line">foo.<span class="title function_">apply</span>(ø, [<span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// a:2, b:3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用bind(..)进行柯里化</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(ø, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">3</span>); <span class="comment">// a:2, b:3</span></span><br></pre></td></tr></table></figure><h4 id="间接引用"><a href="#间接引用" class="headerlink" title="间接引用"></a>间接引用</h4><blockquote><p>另一个需要注意的是，你有可能（有意或者无意地）创建一个函数的“间接引用”，在这种情况下，调用这个函数会应用默认绑定规则。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">foo</span>: foo &#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">foo</span>(); <span class="comment">// 3</span></span><br><span class="line">(p.<span class="property">foo</span> = o.<span class="property">foo</span>)(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>赋值表达式p.foo = o.foo的返回值是目标函数的引用，因此调用位置是foo()而不是p.foo()或者o.foo()。根据我们之前说过的，这里会应用默认绑定。</p><p>注意：对于默认绑定来说，决定this绑定对象的并不是调用位置是否处于严格模式，而是函数体是否处于严格模式。如果函数体处于严格模式，this会被绑定到undefined，否则this会被绑定到全局对象。</p></blockquote><h4 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h4><blockquote><p>之前我们已经看到过，硬绑定这种方式可以把this强制绑定到指定的对象（除了使用new时），防止函数调用应用默认绑定规则。问题在于，硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改this。</p><p>如果可以给默认绑定指定一个全局对象和undefined以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改this的能力</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">softBind</span>) &#123;</span><br><span class="line">    <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">softBind</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="comment">// 捕获所有 curried 参数</span></span><br><span class="line">      <span class="keyword">var</span> curried = [].<span class="property">slice</span>.<span class="property">call</span> (<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> bound = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> fn.<span class="title function_">apply</span>(</span><br><span class="line">              (! <span class="variable language_">this</span> || <span class="variable language_">this</span> === (<span class="variable language_">window</span> || <span class="variable language_">global</span>)) ?</span><br><span class="line">                  obj : <span class="variable language_">this</span>,</span><br><span class="line">              curried.<span class="property">concat</span>.<span class="title function_">apply</span>(curried, <span class="variable language_">arguments</span>)</span><br><span class="line">          );</span><br><span class="line">      &#125;;</span><br><span class="line">      bound.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">      <span class="keyword">return</span> bound;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>它会对指定的函数进行封装，首先检查调用时的this，如果this绑定到全局对象或者undefined，那就把指定的默认对象obj绑定到this，否则不会修改this</p></blockquote><h3 id="this-词法"><a href="#this-词法" class="headerlink" title="this 词法"></a>this 词法</h3><blockquote><p>之前介绍的四条规则已经可以包含所有正常的函数。但是ES6中介绍了一种无法使用这些规则的特殊函数类型：箭头函数。</p><p>箭头函数并不是使用function关键字定义的，而是使用被称为“胖箭头”的操作符=&gt;定义的。箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 返回一个箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//this继承自foo()</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">call</span>(obj1);</span><br><span class="line">bar.<span class="title function_">call</span>(obj2); <span class="comment">// 2, 不是3！</span></span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><blockquote><p>如果要判断一个运行中函数的this绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断this的绑定对象。</p><p>1．由new调用？绑定到新创建的对象。</p><p>2．由call或者apply（或者bind）调用？绑定到指定的对象。</p><p>3．由上下文对象调用？绑定到那个上下文对象。</p><p>4．默认：在严格模式下绑定到undefined，否则绑定到全局对象。</p><p>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略this绑定，你可以使用一个DMZ对象，比如ø =Object.create(null)，以保护全局对象。</p><p>ES6中的<strong>箭头函数</strong>并不会使用四条标准的绑定规则，而是<strong>根据当前的词法作用域来决定this</strong>，具体来说，箭头函数会继承外层函数调用的this绑定（无论this绑定到什么）。这其实和ES6之前代码中的self = this机制一样。</p></blockquote><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><p>简单基本类型（string、boolean、number、null和undefined）本身并不是对象。null有时会被当作一种对象类型，但是这其实只是语言本身的一个bug，即对null执行typeof null时会返回字符串”object”。[插图]实际上，null本身是基本类型。</p></blockquote><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><blockquote><p>对象的内容是由一些存储在特定命名位置的（任意类型的）值组成的，我们称之为属性。</p><p>在引擎内部，这些值的存储方式是多种多样的，一般并不会存在对象容器内部。存储在对象容器内部的是这些属性的名称，它们就像指针（从技术角度来说就是引用）一样，指向这些值真正的存储位置。</p></blockquote><p><strong>可计算属性名</strong></p><blockquote><p>ES6增加了可计算属性名，可以在文字形式中使用[]包裹一个表达式来当作属性名：</p><p>可计算属性名最常用的场景可能是ES6的符号（Symbol）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prefix = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    [prefix + <span class="string">&quot;bar&quot;</span>]:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    [prefix + <span class="string">&quot;baz&quot;</span>]: <span class="string">&quot;world&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObject[<span class="string">&quot;foobar&quot;</span>]; <span class="comment">// hello</span></span><br><span class="line">myObject[<span class="string">&quot;foobaz&quot;</span>]; <span class="comment">// world</span></span><br></pre></td></tr></table></figure><p><strong>数组</strong></p><blockquote><p>你完全可以把数组当作一个普通的键/值对象来使用，并且不添加任何数值索引，但是这并不是一个好主意。数组和普通的对象都根据其对应的行为和用途进行了优化，所以最好只用对象来存储键/值对，只用数组来存储数值下标/值对。</p></blockquote><p>注意：如果你试图向数组添加一个属性，但是属性名“看起来”像一个数字，那它会变成一个数值下标（因此会修改数组的内容而不是添加一个属性）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [ <span class="string">&quot;foo&quot;</span>, <span class="number">42</span>, <span class="string">&quot;bar&quot;</span> ];</span><br><span class="line"></span><br><span class="line">myArray[<span class="string">&quot;3&quot;</span>] = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line"></span><br><span class="line">myArray.<span class="property">length</span>; <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">myArray[<span class="number">3</span>]; <span class="comment">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure><h4 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h4><blockquote><p>浅复制只复制对象引用，不是创建一个新的一模一样的对象。深复制比较复杂，如果对象存在相互引用则会出现死循环</p></blockquote><p>深复制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(someObj));</span><br></pre></td></tr></table></figure><p>浅复制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(..)</span><br></pre></td></tr></table></figure><h4 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h4><blockquote><p>在ES5之前，JavaScript语言本身并没有提供可以直接检测属性特性的方法，比如判断属性是否是只读。但是从ES5开始，所有的属性都具备了属性描述符。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(myObject, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    value: 2,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true,</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>除了value属性还有三个特性：writable（可写）、enumerable（可枚举）和configurable（可配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(myObject, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>我们使用defineProperty(..)给myObject添加了一个普通的属性并显式指定了一些特性。然而，一般来说你不会使用这种方式，除非你想修改属性描述符。</p></blockquote><ol><li><p><strong>Writable</strong></p><blockquote><p>writable决定是否可以修改属性的值。</p></blockquote></li><li><p><strong>Configurable</strong></p><blockquote><p>只要属性是可配置的，就可以使用defineProperty(..)方法来修改属性描述符</p><p>注意：把configurable修改成false是单向操作，无法撤销！</p><p>要注意有一个小小的例外：即便属性是configurable:false，我们还是可以把writable的状态由true改为false，但是无法由false改为true。除了无法修改，configurable:false还会禁止删除这个属性：</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> myObject.<span class="property">a</span>;</span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(myObject, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">delete</span> myObject.<span class="property">a</span>;</span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Enumerable</strong></p><blockquote><p>这个描述符控制的是属性是否会出现在对象的属性枚举中，比如说for..in循环。如果把enumerable设置成false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成true就会让它出现在枚举中</p></blockquote></li></ol><h4 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h4><blockquote><p>描述符的可变性是浅层的，当有嵌套属性是对象时就控制不了</p></blockquote><ol><li><p>对象常量</p><blockquote><p>结合writable:false和configurable:false就可以创建一个真正的常量属性（不可修改、重定义或者删除）：</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(myObject, <span class="string">&quot;FAVORITE NUMBER&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure></li><li><p>禁止扩展</p><blockquote><p>如果你想禁止一个对象添加新属性并且保留已有属性，可以使用Object.prevent Extensions(..)：</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(myObject);</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">b</span> = <span class="number">3</span>;</span><br><span class="line">myObject.<span class="property">b</span>; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>在非严格模式下，创建属性b会静默失败。在严格模式下，将会抛出TypeError错误。</p></blockquote></li><li><p>密封</p><blockquote><p>Object.seal(..)会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..)并把所有现有属性标记为<strong>configurable:false</strong>。</p></blockquote></li><li><p>冻结</p><blockquote><p>Object.freeze(..)会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(..)并把所有“数据访问”属性标记为<strong>writable:false</strong>，这样就无法修改它们的值。</p></blockquote></li><li><p>[get]</p><blockquote><p>对象默认的内置[[Get]]操作首先在对象中查找是否有名称相同的属性，</p><p>如果找到就会返回这个属性的值。然而，如果没有找到名称相同的属性，按照[[Get]]算法的定义会执行另外一种非常重要的行为。</p><p>(其实就是遍历可能存在的[[Prototype]]链，也就是原型链）。</p><p>如果无论如何都没有找到名称相同的属性，那[[Get]]操作会返回值undefined：</p></blockquote></li><li><p>[put]</p><blockquote><p>1．属性是否是访问描述符？如果是并且存在setter就调用setter。</p><p>2．属性的数据描述符中writable是否是false？如果是，在非严格模式下静默失败，在严格模式下抛出TypeError异常。</p><p>3．如果都不是，将该值设置为属性的值。</p></blockquote></li><li><p>Getter和Setter</p><blockquote><p>对象默认的 [get],[put] 行为可以重写</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="comment">// 给a定义一个getter</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">a</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="存在性"><a href="#存在性" class="headerlink" title="存在性"></a><strong>存在性</strong></h4><blockquote><p>前面我们介绍过，如myObject.a的属性访问返回值可能是undefined，但是这个值有可能是属性中存储的undefined，也可能是因为属性不存在所以返回undefined。那么如何区分这两种情况呢？</p></blockquote><p>我们可以在不访问属性值的情况下判断对象中是否存在这个属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> myObject); <span class="comment">// true</span></span><br><span class="line">(<span class="string">&quot;b&quot;</span> <span class="keyword">in</span> myObject); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>in操作符会检查属性是否在对象及其[[Prototype]]原型链中.。</p><p>相比之下，hasOwnProperty(..)只会检查属性是否在myObject对象中，不会检查[[Prototype]]链</p><p>Object.prototype.hasOwnProperty. call(myObject, “a”)，它借用基础的hasOwnProperty(..)方法并把它显式绑定到myObject上。</p></blockquote><blockquote><p>看起来<strong>in操作符可以检查容器内是否有某个值</strong>，但是<strong>它实际上检查的是某个属性名是否存在</strong>。</p><p>对于数组来说这个区别非常重要，4 in [2, 4, 6]的结果并不是你期待的True，因为[2, 4,6]这个数组中包含的属性名是0、1、2，没有4。</p></blockquote><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="comment">// 让a像普通属性一样可以枚举</span></span><br><span class="line">    &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    <span class="comment">// 让b不可枚举</span></span><br><span class="line">    &#123; <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">b</span>; <span class="comment">// 3</span></span><br><span class="line">(<span class="string">&quot;b&quot;</span> <span class="keyword">in</span> myObject); <span class="comment">// true</span></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k, myObject[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a&quot; 2</span></span><br></pre></td></tr></table></figure><blockquote><p>myObject.b确实存在并且有访问值，但是却不会出现在for..in循环中（尽管可以通过in操作符来判断是否存在）。原因是“可枚举”就相当于“可以出现在对象属性的遍历中”。</p><p>在数组上应用for..in循环有时会产生出人意料的结果，因为这种枚举不仅会包含所有数值索引，还会包含所有可枚举属性。最好只在对象上应用for..in循环，如果要遍历数组就使用传统的for循环来遍历数值索引。</p></blockquote><p><strong>判断是否可枚举</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="comment">// 让a像普通属性一样可以枚举</span></span><br><span class="line">    &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(</span><br><span class="line">                  myObject,</span><br><span class="line">      <span class="string">&quot;b&quot;</span>,</span><br><span class="line">      <span class="comment">// 让b不可枚举</span></span><br><span class="line">      &#123; <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  myObject.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br><span class="line">  myObject.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(myObject); <span class="comment">// [&quot;a&quot;]</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(myObject); <span class="comment">// [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>propertyIsEnumerable(..)会检查给定的属性名是否直接存在于对象中（而不是在原型链上）并且满足enumerable:true。</p><p>Object.keys(..)会返回一个数组，包含所有可枚举属性，Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</p><p>in和hasOwnProperty(..)的区别在于前者会查找[[Prototype]]链，然而，Object.keys(..)和Object.getOwnPropertyNames(..)都只会查找对象直接包含的属性。</p></blockquote><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><blockquote><p>for..in循环可以用来遍历对象的可枚举属性列表（包括[[Prototype]]链）。但是如何遍历属性的值呢？</p></blockquote><blockquote><p>ES5中增加了一些数组的辅助迭代器，包括forEach(..)、every(..)和some(..)。</p><p><strong>遍历数组下标时采用的是数字顺序</strong>（for循环或者其他迭代器），<strong>但是遍历对象属性时的顺序是不确定的</strong>，在不同的JavaScript引擎中可能不一样。因此，在不同的环境中需要保证一致性时，一定不要相信任何观察到的顺序，它们是不可靠的。</p></blockquote><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>在研究类的具体机制之前，我们首先会介绍面向类的设计模式：实例化（instantiation）、继承（inheritance）和（相对）多态（polymorphism）。</p></blockquote><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><blockquote><p>在继承或者实例化时，JavaScript的对象机制并不会自动执行复制行为。简单来说，JavaScript中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来</p><p>因此JavaScript开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入</p></blockquote><h4 id="显式混入"><a href="#显式混入" class="headerlink" title="显式混入"></a>显式混入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非常简单的mixin(..)例子：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">sourceObj, targetObj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sourceObj) &#123;</span><br><span class="line">      <span class="comment">// 只会在不存在的情况下复制</span></span><br><span class="line">      <span class="keyword">if</span> (! (key <span class="keyword">in</span> targetObj)) &#123;</span><br><span class="line">          targetObj[key] = sourceObj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> targetObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Vehicle</span> = &#123;</span><br><span class="line">    <span class="attr">engines</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">ignition</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Turning on my engine.&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">drive</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">ignition</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Steering and moving forward! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Car</span> = <span class="title function_">mixin</span>(<span class="title class_">Vehicle</span>, &#123;</span><br><span class="line">    <span class="attr">wheels</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">drive</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Vehicle</span>.<span class="property">drive</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">&quot;Rolling on all &quot;</span> + <span class="variable language_">this</span>.<span class="property">wheels</span> + <span class="string">&quot; wheels! &quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><blockquote><p>Vehicle.drive()，函数调用中的this会被绑定到Vehicle对象而不是Car对象，这并不是我们想要的。因此，我们会使用．call(this)来确保drive()在Car对象的上下文中执行。</p></blockquote><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><blockquote><p>JavaScript中的对象有一个特殊的[[Prototype]]内置属性，其实就是对于其他对象的引用。几乎所有的对象在创建时[[Prototype]]属性都会被赋予一个非空的值。</p></blockquote><p>对于默认的[[Get]]操作来说，如果无法在对象本身找到需要的属性，就会继续访问对象的[[Prototype]]链：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个关联到anotherObject的对象</span></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="title class_">Object</span>.<span class="title function_">create</span>(anotherObject);</span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>使用for..in遍历对象时原理和查找[[Prototype]]链类似，任何可以通过原型链访问到（并且是enumerable）的属性都会被枚举。</p><p>使用in操作符来检查属性在对象中是否存在时，同样会查找对象的整条原型链（无论属性是否可枚举）</p></blockquote><h4 id="但是到哪里是-Prototype-的“尽头”呢？"><a href="#但是到哪里是-Prototype-的“尽头”呢？" class="headerlink" title="但是到哪里是[[Prototype]]的“尽头”呢？"></a><strong>但是到哪里是[[Prototype]]的“尽头”呢？</strong></h4><blockquote><p><strong>所有普通的[[Prototype]]链最终都会指向内置的Object.prototype</strong></p></blockquote><h4 id="属性设置和屏蔽"><a href="#属性设置和屏蔽" class="headerlink" title="属性设置和屏蔽"></a>属性设置和屏蔽</h4><blockquote><p>给一个对象设置属性并不仅仅是添加一个新属性或者修改已有的属性值。现在我们完整地讲解一下这个过程：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myObject.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>如果myObject对象中包含名为foo的普通数据访问属性</strong>，这条赋值语句只会修改已有的属性值。</p><p><strong>如果foo不是直接存在于myObject中</strong>，[[Prototype]]链就会被遍历，类似[[Get]]操作。如果原型链上找不到foo, foo就会被直接添加到myObject上。</p><blockquote><p>如果属性名foo既出现在myObject中也出现在myObject的[[Prototype]]链上层，那么就会发生屏蔽。<strong>myObject中包含的foo属性会屏蔽原型链上层的所有foo属性，因为myObject.foo总是会选择原型链中最底层的foo属性。</strong></p></blockquote><p><strong>如果foo不直接存在于myObject中 而是存在于原型链上层时myObject.foo = “bar”会出现的三种情况。</strong></p><p>1．如果在[[Prototype]]链上层存在名为foo的普通数据访问属性并且没有被标记为只读（writable:false），那就会直接在myObject中添加一个名为foo的新属性，它是屏蔽属性。</p><p>2．如果在[[Prototype]]链上层存在foo，但是它被标记为只读（writable:false），那么无法修改已有属性或者在myObject上创建屏蔽属性。如果运行在严格模式下，代码会抛出一个错误。否则，这条赋值语句会被忽略。总之，不会发生屏蔽。</p><p>3．如果在[[Prototype]]链上层存在foo并且它是一个setter，那就一定会调用这个setter。foo不会被添加到（或者说屏蔽于）myObject，也不会重新定义foo这个setter。</p><blockquote><p>第二种情况可能是最令人意外的，只读属性会阻止[[Prototype]]链下层隐式创建（屏蔽）同名属性。这样做主要是为了模拟类属性的继承。你可以把原型链上层的foo看作是父类中的属性，它会被myObject继承（复制），这样一来myObject中的foo属性也是只读，所以无法创建。但是一定要注意，实际上并不会发生类似的继承复制（参见第4章和第5章）。这看起来有点奇怪，myObject对象竟然会因为其他对象中有一个只读foo就不能包含foo属性。更奇怪的是，这个限制只存在于=赋值中，使用Object.defineProperty(..)并不会受到影响。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="title class_">Object</span>.<span class="title function_">create</span>(anotherObject);</span><br><span class="line"></span><br><span class="line">anotherObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br><span class="line">anotherObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>++; <span class="comment">// 隐式屏蔽！</span></span><br><span class="line"></span><br><span class="line">anotherObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>++操作相当于myObject.a = myObject.a + 1。因此++操作首先会通过[[Prototype]]查找属性a并从anotherObject.a获取当前属性值2，然后给这个值加1，接着用[[Put]]将值3赋给myObject中新建的屏蔽属性a</p></blockquote><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(a) === <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>调用new Foo()时会创建a,其中一步就是将a内部的[[Prototype]]链接到Foo.prototype所指向的对象。</p><p>实际上，绝大多数JavaScript开发者不知道的秘密是，new Foo()这个函数调用实际上并没有直接创建关联，这个关联只是一个意外的副作用。new Foo()只是间接完成了我们的目标：一个关联到其他对象的新对象</p><p>继承意味着复制操作，JavaScript（默认）并不会复制对象属性。相反，JavaScript会在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和函数。</p></blockquote><p><strong>到底是什么让我们认为Foo是一个“类”呢？</strong></p><blockquote><p>其中一个原因是我们看到了关键字new，在面向类的语言中构造类实例时也会用到它。另一个原因是，看起来我们执行了类的构造函数方法，Foo()的调用方式很像初始化类时类构造函数的调用方式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Foo</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">a.<span class="property">constructor</span> === <span class="title class_">Foo</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>Foo.prototype默认有一个公有并且不可枚举的属性．constructor，这个属性引用的是对象关联的函数。此外，我们可以看到通过“构造函数”调用new Foo()创建的对象也有一个．constructor属性，指向“创建这个对象的函数”。</p></blockquote><h4 id="构造函数还是调用"><a href="#构造函数还是调用" class="headerlink" title="构造函数还是调用"></a>构造函数还是调用</h4><blockquote><p>上一段代码很容易让人认为Foo是一个构造函数，因为我们使用new来调用它并且看到它“构造”了一个对象。</p><p>实际上，Foo和你程序中的其他函数没有任何区别。函数本身并不是构造函数，然而，当你在普通的函数调用前面加上new关键字之后，就会把这个函数调用变成一个“构造函数调用”。实际上，new会劫持所有普通函数并用构造对象的形式来调用它。</p></blockquote><p>举例来说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NothingSpecial</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Don&#x27;t mind me! &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">NothingSpecial</span>();</span><br><span class="line"><span class="comment">// &quot;Don&#x27;t mind me! &quot;</span></span><br><span class="line"></span><br><span class="line">a; <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>函数不是构造函数，但是当且仅当使用new时，函数调用会变成“构造函数调用”</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">myName</span>(); <span class="comment">// &quot;a&quot;</span></span><br><span class="line">b.<span class="title function_">myName</span>(); <span class="comment">// &quot;b&quot;</span></span><br></pre></td></tr></table></figure><p><strong>这段代码展示了另外两种</strong>“面向类”的技巧：</p><p>1．this.name = name给每个对象（也就是a和b）都添加了．name属性，有点像类实例封装的数据值。</p><p>2．Foo.prototype.myName = ..．可能个更有趣的技巧，它会给Foo.prototype对象添加一个属性（函数）。</p><p>现在，a.myName()可以正常工作，但是你可能会觉得很惊讶，这是什么原理呢？</p><blockquote><p>在这段代码中，看起来似乎创建a和b时会把Foo.prototype对象复制到这两个对象中，然而事实并不是这样</p><p>在创建的过程中，a和b的内部[[Prototype]]都会关联到Foo.prototype上。当a和b中无法找到myName时，它会（通过委托）在Foo.prototype上找到。</p></blockquote><p><strong>之前讨论．constructor属性时我们说过，看起来a.constructor === Foo为真意味着a确实有一个指向Foo的．constructor属性，</strong></p><blockquote><p>但是事实不是这样。实际上，.constructor引用同样被委托给了Foo.prototype，而Foo.prototype.constructor默认指向Foo。</p><p>Foo.prototype的．constructor属性只是Foo函数在声明时的默认属性。<strong>如果你创建了一个新对象并替换了函数默认的．prototype对象引用，那么新对象并不会自动获得．constructor属性。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123; <span class="regexp">/＊ .. ＊/</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="regexp">/＊ .. ＊/</span> &#125;; <span class="comment">// 创建一个新原型对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">a1.<span class="property">constructor</span> === <span class="title class_">Foo</span>; <span class="comment">// false!</span></span><br><span class="line">a1.<span class="property">constructor</span> === <span class="title class_">Object</span>; <span class="comment">// true!</span></span><br></pre></td></tr></table></figure><blockquote><p>.constructor并不是一个不可变属性。它是不可枚举（参见上面的代码）的，但是它的值是可写的（可以被修改）。此外，你可以给任意[[Prototype]]链中的任意对象添加一个名为constructor的属性或者对其进行修改，你可以任意对其赋值。</p></blockquote><h3 id="（原型）继承"><a href="#（原型）继承" class="headerlink" title="（原型）继承"></a>（原型）继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params">name, label</span>) &#123;</span><br><span class="line">    <span class="title class_">Foo</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">label</span> = label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们创建了一个新的Bar.prototype对象并关联到Foo.prototype</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意！现在没有Bar.prototype.constructor了</span></span><br><span class="line"><span class="comment">// 如果你需要这个属性的话可能需要手动修复一下它</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myLabel</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">label</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Bar</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;obj a&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">myName</span>(); <span class="comment">// &quot;a&quot;</span></span><br><span class="line">a.<span class="title function_">myLabel</span>(); <span class="comment">// &quot;obj a&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>这段代码的核心部分就是语句Bar.prototype =Object.create(Foo.prototype)。调用Object.create(..)会凭空创建一个“新”对象并把新对象内部的[[Prototype]]关联到你指定的对象</p></blockquote><p><strong>注意，下面这两种方式是常见的错误做法，实际上它们都存在一些问题：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和你想要的机制不一样！</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本上满足你的需求，但是可能会产生一些副作用:(</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br></pre></td></tr></table></figure><blockquote><p>Bar.prototype = Foo.prototype并不会创建一个关联到Bar.prototype的新对象，它只是让Bar.prototype直接引用Foo.prototype对象。因此当你执行类似Bar.prototype.myLabel = ..．的赋值语句时会直接修改Foo.prototype对象本身。显然这不是你想要的结果，否则你根本不需要Bar对象，直接使用Foo就可以了，这样代码也会更简单一些。</p><p>Bar.prototype = new Foo()的确会创建一个关联到Bar.prototype的新对象。但是它使用了Foo(..)的“构造函数调用”，如果函数Foo有一些副作用（比如写日志、修改状态、注册到其他对象、给this添加数据属性，等等）的话，就会影响到Bar()的“后代”，后果不堪设想。</p></blockquote><p><strong>ES6添加了辅助函数可以用标准并且可靠的方法来修改关联。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6之前需要抛弃默认的Bar.prototype</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property">ptototype</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6开始可以直接修改现有的Bar.prototype</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><h4 id="检查类的关系"><a href="#检查类的关系" class="headerlink" title="检查类的关系"></a>检查类的关系</h4><blockquote><p>假设有对象a，如何寻找对象a委托的对象（如果存在的话）呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">blah</span> = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Foo</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>instanceof回答的问题是：在a的整条[[Prototype]]链中是否有指向Foo.prototype的对象？</p><p>这个方法只能处理对象（a）和函数（带．prototype引用的Foo）之间的关系。如果你想判断两个对象（比如a和b）之间是否通过[[Prototype]]链关联，只用instanceof无法实现。</p><p>如果使用内置的．bind(..)函数来生成一个硬绑定函数的话，该函数是没有．prototype属性的。在这样的函数上使用instanceof的话，目标函数的．prototype会代替硬绑定函数的．prototype。</p></blockquote><p><strong>判断[[Prototype]]反射的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(a); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>isPrototypeOf(..)回答的问题是：在a的整条[[Prototype]]链中是否出现过Foo.prototype？</p></blockquote><p><strong>我们也可以直接获取一个对象的[[Prototype]]链。在ES5中，标准的方法是：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(a);</span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line">          </span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(a) === <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>绝大多数（不是所有！）浏览器也支持一种非标准的方法来访问内部[[Prototype]]属性：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">__proto__</span> === <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>.__proto__的实现大致上是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot; __proto__&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">o</span>) &#123;</span><br><span class="line">      <span class="comment">// ES6中的setPrototypeOf(..)</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="variable language_">this</span>, o);</span><br><span class="line">      <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h3 id="对象关联"><a href="#对象关联" class="headerlink" title="对象关联"></a>对象关联</h3><blockquote><p>现在我们知道了，[[Prototype]]机制就是存在于对象中的一个内部链接，它会引用其他对象。</p><p>通常来说，这个链接的作用是：如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在[[Prototype]]关联的对象上进行查找。同理，如果在后者中也没有找到需要的引用就会继续查找它的[[Prototype]]，以此类推。这一系列对象的链接被称为“原型链”。</p></blockquote><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><blockquote><p> Object.create(null)会创建一个拥有空（或者说null）[[Prototype]]链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以instanceof操作符（之前解释过）无法进行判断，因此总是会返回false。这些特殊的空[[Prototype]]对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。</p></blockquote><p>Object.create()的polyfill 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="title class_">Object</span>.<span class="property">create</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params">o</span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">      F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Object.create(..)的第二个参数指定了需要添加到新对象中的属性名以及这些属性的属性描述符。因为ES5之前的版本无法模拟属性操作符，所以polyfill代码无法实现这个附加功能。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="title class_">Object</span>.<span class="title function_">create</span>(anotherObject, &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">c</span>: &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// false</span></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// true</span></span><br><span class="line">myObject.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">myObject.<span class="property">a</span>; <span class="comment">// 2</span></span><br><span class="line">myObject.<span class="property">b</span>; <span class="comment">// 3</span></span><br><span class="line">myObject.<span class="property">c</span>; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="关联关系是备用"><a href="#关联关系是备用" class="headerlink" title="关联关系是备用"></a>关联关系是备用</h4><blockquote><p>看起来对象之间的关联关系是处理“缺失”属性或者方法时的一种备用选项。这个说法有点道理，但是我认为这并不是[[Prototype]]的本质。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    <span class="attr">cool</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cool! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="title class_">Object</span>.<span class="title function_">create</span>(anotherObject);</span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">cool</span>(); <span class="comment">// &quot;cool! &quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>小结：</strong></p><p>如果要访问对象中并不存在的一个属性，[[Get]]操作（参见第3章）就会查找对象内部[[Prototype]]关联的对象。这个关联关系实际上定义了一条“原型链”（有点像嵌套的作用域链），在查找属性时会对它进行遍历。</p><p>出于各种原因，以“继承”结尾的术语（包括“原型继承”）和其他面向对象的术语都无法帮助你理解JavaScript的真实机制（不仅仅是限制我们的思维模式）。</p><p>相比之下，“委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。</p></blockquote><h2 id="行为委托"><a href="#行为委托" class="headerlink" title="行为委托"></a>行为委托</h2><blockquote><p> [[Prototype]]机制就是指对象中的一个内部链接引用另一个对象。不断向上层查找这一系列对象的链接被称为“原型链”。</p><p>换句话说，JavaScript中这个机制的本质就是对象之间的关联关系。</p><p>这个观点对于理解行为委托很重要</p></blockquote><h3 id="面向委托的设计"><a href="#面向委托的设计" class="headerlink" title="面向委托的设计"></a>面向委托的设计</h3><blockquote><p>面向类的设计中有些原则依然有效，因此不要把所有知识都抛掉。（只需要抛掉大部分就够了！）举例来说，封装是非常有用的，它同样可以应用在委托中（虽然不太常见）。</p></blockquote><h4 id="类理论"><a href="#类理论" class="headerlink" title="类理论"></a>类理论</h4><blockquote><p>如果使用类，那设计方法可能是这样的：定义一个通用父（基）类，可以将其命名为Task，在Task类中定义所有任务都有的行为。接着定义子类XYZ和ABC，它们都继承自Task并且会添加一些特殊的行为来处理对应的任务。</p><p>非常重要的是，类设计模式鼓励你在继承时使用方法重写（和多态），比如说在XYZ任务中重写Task中定义的一些通用方法，甚至在添加新行为时通过super调用这个方法的原始版本。你会发现许多行为可以先“抽象”到父类然后再用子类进行特殊化（重写）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line">    id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数Task()</span></span><br><span class="line">    <span class="title class_">Task</span>(<span class="variable constant_">ID</span>) &#123; id = <span class="variable constant_">ID</span>; &#125;</span><br><span class="line">    <span class="title function_">outputTask</span>(<span class="params"></span>) &#123; <span class="title function_">output</span>(id); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYZ</span> inherits <span class="title class_">Task</span> &#123;</span><br><span class="line">    label;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数XYZ()</span></span><br><span class="line">    <span class="title function_">XYZ</span>(<span class="params">ID, Label</span>) &#123; <span class="variable language_">super</span>(<span class="variable constant_">ID</span>); label = <span class="title class_">Label</span>; &#125;</span><br><span class="line">    <span class="title function_">outputTask</span>(<span class="params"></span>) &#123; <span class="variable language_">super</span>(); <span class="title function_">output</span>(label); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABC</span> inherits <span class="title class_">Task</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上你可以想象成，执行任务“XYZ”需要两个兄弟对象（XYZ和Task）协作完成。但是我们并不需要把这些行为放在一起，通过类的复制，我们可以把它们分别放在各自独立的对象中，需要时可以允许XYZ对象委托给Task。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Task</span> = &#123;</span><br><span class="line">    <span class="attr">setID</span>: <span class="keyword">function</span>(<span class="params">ID</span>) &#123; <span class="variable language_">this</span>.<span class="property">id</span> = <span class="variable constant_">ID</span>; &#125;,</span><br><span class="line">    <span class="attr">outputID</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让XYZ委托Task</span></span><br><span class="line"><span class="variable constant_">XYZ</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Task</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">XYZ</span>.<span class="property">prepareTask</span> = <span class="keyword">function</span>(<span class="params">ID, Label</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setID</span>(<span class="variable constant_">ID</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">label</span> = <span class="title class_">Label</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">XYZ</span>.<span class="property">outputTaskDetails</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">outputID</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">label</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ABC = Object.create(Task);</span></span><br><span class="line"><span class="comment">// ABC ... = ...</span></span><br></pre></td></tr></table></figure><blockquote><p>相比于面向类（或者说面向对象），我会把这种编码风格称为“对象关联”</p><p>我们真正关心的只是XYZ对象（和ABC对象）委托了Task对象。</p></blockquote><p>1．在上面的代码中，id和label数据成员都是直接存储在XYZ上（而不是Task）。通常来说，在[[Prototype]]委托中最好把状态保存在委托者（XYZ、ABC）而不是委托目标（Task）上。</p><p>2．在类设计模式中，我们故意让父类（Task）和子类（XYZ）中都有outputTask方法，这样就可以利用重写（多态）的优势。在委托行为中则恰好相反：我们会尽量避免在[[Prototype]]链的不同级别中使用相同的命名，否则就需要使用笨拙并且脆弱的语法来消除引用歧义</p><p>3．this.setID(ID); XYZ中的方法首先会寻找XYZ自身是否有setID(..)，但是XYZ中并没有这个方法名，因此会通过[[Prototype]]委托关联到Task继续寻找，这时就可以找到setID(..)方法。此外，由于调用位置触发了this的隐式绑定规则，因此虽然setID(..)方法在Task中，运行时this仍然会绑定到XYZ，这正是我们想要的</p><h4 id="互相委托（禁止）"><a href="#互相委托（禁止）" class="headerlink" title="互相委托（禁止）"></a>互相委托（禁止）</h4><blockquote><p>你无法在两个或两个以上互相（双向）委托的对象之间创建循环委托。如果你把B关联到A然后试着把A关联到B，就会出错。(但其实所有引用严格限制，理论上相互委托是可以正常运行工作的)</p><p>之所以要禁止互相委托，是因为引擎的开发者们发现在设置时检查（并禁止！）一次无限循环引用要更加高效，否则每次从对象中查找属性时都需要进行检查。</p></blockquote><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><blockquote><p>JavaScript规范并不会控制浏览器中开发者工具对于特定值或者结构的表示方式，浏览器和引擎可以自己选择合适的方式来进行解析,</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line">a1; <span class="comment">// &#123;&#125;   Chrome中， 火狐中 Object &#123;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本例中Chrome的控制台确实使用了．constructor.name</p></blockquote><h4 id="比较思维模型"><a href="#比较思维模型" class="headerlink" title="比较思维模型"></a>比较思维模型</h4><blockquote><p>“类”和“委托”这两种设计模式的理论，接下来我们看看它们在思维模型方面的区别。</p></blockquote><p>典型的（“原型”）面向对象风格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">who</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">me</span> = who;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">identify</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">me</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params">who</span>) &#123;</span><br><span class="line">    <span class="title class_">Foo</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, who);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">speak</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">identify</span>() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> <span class="title class_">Bar</span>(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> <span class="title class_">Bar</span>(<span class="string">&quot;b2&quot;</span>);</span><br><span class="line"></span><br><span class="line">b1.<span class="title function_">speak</span>();</span><br><span class="line">b2.<span class="title function_">speak</span>();</span><br></pre></td></tr></table></figure><p>用对象关联风格来编写功能完全相同的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Foo</span> = &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">who</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">me</span> = who;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">identify</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">me</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Bar</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Foo</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property">speak</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="title function_">identify</span>() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br><span class="line">b1.<span class="title function_">init</span>(<span class="string">&quot;b1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Bar</span>);</span><br></pre></td></tr></table></figure><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><p>组件实例</p><p><strong>类风格：</strong></p><p>es5 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 父类</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Widget</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">width</span> = width || <span class="number">50</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">height</span> = height || <span class="number">50</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Widget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span>(<span class="params">$where</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$elem</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$elem</span>.<span class="title function_">css</span>(&#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">width</span> + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">height</span> + <span class="string">&quot;px&quot;</span></span><br><span class="line">        &#125;).<span class="title function_">appendTo</span>($where);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子类</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">width, height, label</span>) &#123;</span><br><span class="line">      <span class="comment">// 调用“super”构造函数</span></span><br><span class="line">      <span class="title class_">Widget</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, width, height);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">label</span> = label || <span class="string">&quot;Default&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span> = $(<span class="string">&quot;&lt;button&gt;&quot;</span>).<span class="title function_">text</span>(<span class="variable language_">this</span>.<span class="property">label</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 让Button“继承”Widget</span></span><br><span class="line">  <span class="title class_">Button</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Widget</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写render(..)</span></span><br><span class="line">  <span class="title class_">Button</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span>(<span class="params">$where</span>) &#123;</span><br><span class="line">      <span class="comment">// “super”调用</span></span><br><span class="line">      <span class="title class_">Widget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, $where);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span>.<span class="title function_">click</span>(<span class="variable language_">this</span>.<span class="property">onClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Button</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">onClick</span> = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Button &#x27;&quot;</span> + <span class="variable language_">this</span>.<span class="property">label</span> + <span class="string">&quot;&#x27; clicked! &quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> $body = $(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">var</span> btn1 = <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="number">125</span>, <span class="number">30</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> btn2 = <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="number">150</span>, <span class="number">40</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line">    btn1.<span class="title function_">render</span>($body);</span><br><span class="line">    btn2.<span class="title function_">render</span>($body);</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>es6 class语法糖写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">width</span> = width || <span class="number">50</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">height</span> = height || <span class="number">50</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">$where</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$elem</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$elem</span>.<span class="title function_">css</span>(&#123;</span><br><span class="line">              <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">width</span> + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">              <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">height</span> + <span class="string">&quot;px&quot;</span></span><br><span class="line">          &#125;).<span class="title function_">appendTo</span>($where);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Widget</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">width, height, label</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(width, height);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">label</span> = label || <span class="string">&quot;Default&quot;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span> = $(<span class="string">&quot;&lt;button&gt;&quot;</span>).<span class="title function_">text</span>(<span class="variable language_">this</span>.<span class="property">label</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">$where</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">render</span>($where);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span>.<span class="title function_">click</span>(<span class="variable language_">this</span>.<span class="property">onClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onClick</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Button &#x27;&quot;</span> + <span class="variable language_">this</span>.<span class="property">label</span> + <span class="string">&quot;&#x27; clicked! &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>委托控件对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Widget</span> = &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">width, height</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">width</span> = width || <span class="number">50</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">height</span> = height || <span class="number">50</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$elem</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">insert</span>: <span class="keyword">function</span>(<span class="params">$where</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$elem</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$elem</span>.<span class="title function_">css</span>(&#123;</span><br><span class="line">              <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">width</span> + <span class="string">&quot;px&quot;</span>,</span><br><span class="line">              <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">height</span> + <span class="string">&quot;px&quot;</span></span><br><span class="line">          &#125;).<span class="title function_">appendTo</span>($where);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Button</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Widget</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Button</span>.<span class="property">setup</span> = <span class="keyword">function</span>(<span class="params">width, height, label</span>)&#123;</span><br><span class="line">    <span class="comment">// 委托调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>(width, height);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">label</span> = label || <span class="string">&quot;Default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$elem</span> = $(<span class="string">&quot;&lt;button&gt;&quot;</span>).<span class="title function_">text</span>(<span class="variable language_">this</span>.<span class="property">label</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Button</span>.<span class="property">build</span> = <span class="keyword">function</span>(<span class="params">$where</span>) &#123;</span><br><span class="line">  <span class="comment">// 委托调用</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">insert</span>($where);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$elem</span>.<span class="title function_">click</span>(<span class="variable language_">this</span>.<span class="property">onClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Button</span>.<span class="property">onClick</span> = <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Button &#x27;&quot;</span> + <span class="variable language_">this</span>.<span class="property">label</span> + <span class="string">&quot;&#x27; clicked! &quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> $body = $(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> btn1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Button</span>);</span><br><span class="line">  btn1.<span class="title function_">setup</span>(<span class="number">125</span>, <span class="number">30</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> btn2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Button</span>);</span><br><span class="line">  btn2.<span class="title function_">setup</span>(<span class="number">150</span>, <span class="number">40</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line">  btn1.<span class="title function_">build</span>($body);</span><br><span class="line">  btn2.<span class="title function_">build</span>($body);</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><blockquote><p>对象关联可以更好地支持关注分离（separation of concerns）原则，创建和初始化并不需要合并为一个步骤。</p></blockquote><h4 id="更简洁的设计"><a href="#更简洁的设计" class="headerlink" title="更简洁的设计"></a>更简洁的设计</h4><blockquote><p>对象关联除了能让代码看起来更简洁（并且更具扩展性）外还可以通过行为委托模式简化代码结构。</p><p>我们来看最后一个例子，它展示了对象关联如何简化整体设计。在这个场景中我们有两个控制器对象，一个用来操作网页中的登录表单，另一个用来与服务器进行验证（通信）。</p></blockquote><p><strong>传统类设计</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Controller</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errors</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showDialog</span> = <span class="keyword">function</span>(<span class="params">title, msg</span>) &#123;</span><br><span class="line">    <span class="comment">// 给用户显示标题和消息</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">success</span> = <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showDialog</span>(<span class="string">&quot;Success&quot;</span>, msg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">failure</span> = <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">errors</span>.<span class="title function_">push</span>(err);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showDialog</span>(<span class="string">&quot;Error&quot;</span>, err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LoginController</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Controller</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把子类关联到父类</span></span><br><span class="line"><span class="title class_">LoginController</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">LoginController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getUser</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;login username&quot;</span>).<span class="property">value</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">LoginController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getPassword</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;login password&quot;</span>).<span class="property">value</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">LoginController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">validateEntry</span> = <span class="keyword">function</span>(<span class="params">user, pw</span>) &#123;</span><br><span class="line">    user = user || <span class="variable language_">this</span>.<span class="title function_">getUser</span>();</span><br><span class="line">    pw = pw || <span class="variable language_">this</span>.<span class="title function_">getPassword</span>();</span><br><span class="line">    <span class="keyword">if</span> (! (user &amp;&amp; pw)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">failure</span>(</span><br><span class="line">          <span class="string">&quot;Please enter a username &amp; password! &quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pw.<span class="property">length</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">failure</span>(</span><br><span class="line">          <span class="string">&quot;Password must be 5+ characters! &quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果执行到这里说明通过验证</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 重写基础的failure()</span></span><br><span class="line"><span class="title class_">LoginController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">failure</span> = <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// “super”调用</span></span><br><span class="line">    <span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">failure</span>.<span class="title function_">call</span>(</span><br><span class="line">      <span class="variable language_">this</span>,</span><br><span class="line">      <span class="string">&quot;Login invalid: &quot;</span> + err</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AuthController</span>(<span class="params">login</span>) &#123;</span><br><span class="line">    <span class="title class_">Controller</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// 合成</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">login</span> = login;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把子类关联到父类</span></span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">server</span> = <span class="keyword">function</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: url,</span><br><span class="line">      <span class="attr">data</span>: data</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">checkAuth</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="variable language_">this</span>.<span class="property">login</span>.<span class="title function_">getUser</span>();</span><br><span class="line">    <span class="keyword">var</span> pw = <span class="variable language_">this</span>.<span class="property">login</span>.<span class="title function_">getPassword</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">login</span>.<span class="title function_">validateEntry</span>(user, pw)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">server</span>(<span class="string">&quot;/check-auth&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">user</span>: user,</span><br><span class="line">            <span class="attr">pw</span>: pw</span><br><span class="line">        &#125; )</span><br><span class="line">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">success</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">        .<span class="title function_">fail</span>(<span class="variable language_">this</span>.<span class="property">failure</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 重写基础的success()</span></span><br><span class="line">    <span class="title class_">AuthController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">success</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// “super”调用</span></span><br><span class="line">    <span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">success</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;Authenticated! &quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 重写基础的failure()</span></span><br><span class="line">    <span class="title class_">AuthController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">failure</span> = <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// “super”调用</span></span><br><span class="line">    <span class="title class_">Controller</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">failure</span>.<span class="title function_">call</span>(</span><br><span class="line">        <span class="variable language_">this</span>,</span><br><span class="line">        <span class="string">&quot;Auth Failed: &quot;</span> + err</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> auth = <span class="keyword">new</span> <span class="title class_">AuthController</span>(</span><br><span class="line">    <span class="comment">// 除了继承，我们还需要合成</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">LoginController</span>()</span><br><span class="line">);</span><br><span class="line">auth.<span class="title function_">checkAuth</span>();</span><br></pre></td></tr></table></figure><p><strong>使用对象关联风格的行为委托来实现更简单的设计</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">LoginController</span> = &#123;</span><br><span class="line">    <span class="attr">errors</span>: [],</span><br><span class="line">    <span class="attr">getUser</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(</span><br><span class="line">          <span class="string">&quot;login username&quot;</span></span><br><span class="line">      ).<span class="property">value</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getPassword</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(</span><br><span class="line">          <span class="string">&quot;login password&quot;</span></span><br><span class="line">      ).<span class="property">value</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">validateEntry</span>: <span class="keyword">function</span>(<span class="params">user, pw</span>) &#123;</span><br><span class="line">      user = user || <span class="variable language_">this</span>.<span class="title function_">getUser</span>();</span><br><span class="line">      pw = pw || <span class="variable language_">this</span>.<span class="title function_">getPassword</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (! (user &amp;&amp; pw)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">failure</span>(</span><br><span class="line">            <span class="string">&quot;Please enter a username &amp; password! &quot;</span></span><br><span class="line">          );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (pw.<span class="property">length</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">failure</span>(</span><br><span class="line">            <span class="string">&quot;Password must be 5+ characters! &quot;</span></span><br><span class="line">          );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果执行到这里说明通过验证</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">showDialog</span>: <span class="keyword">function</span>(<span class="params">title, msg</span>) &#123;</span><br><span class="line">      <span class="comment">// 给用户显示标题和消息</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">failure</span>: <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">errors</span>.<span class="title function_">push</span>(err);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">showDialog</span>(<span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Login invalid: &quot;</span> + err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 让AuthController委托LoginController</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AuthController</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">LoginController</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property">errors</span> = [];</span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property">checkAuth</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="variable language_">this</span>.<span class="title function_">getUser</span>();</span><br><span class="line">    <span class="keyword">var</span> pw = <span class="variable language_">this</span>.<span class="title function_">getPassword</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">validateEntry</span>(user, pw)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">server</span>(<span class="string">&quot;/check-auth&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">user</span>: user,</span><br><span class="line">            <span class="attr">pw</span>: pw</span><br><span class="line">      &#125; )</span><br><span class="line">      .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">accepted</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">      .<span class="title function_">fail</span>(<span class="variable language_">this</span>.<span class="property">rejected</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property">server</span> = <span class="keyword">function</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: url,</span><br><span class="line">      <span class="attr">data</span>: data</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property">accepted</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showDialog</span>(<span class="string">&quot;Success&quot;</span>, <span class="string">&quot;Authenticated! &quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">AuthController</span>.<span class="property">rejected</span> = <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">failure</span>(<span class="string">&quot;Auth Failed: &quot;</span> + err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>我们用一种（极其）简单的设计实现了同样的功能，这就是对象关联风格代码和行为委托设计模式的力量。</p></blockquote><h4 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h4><blockquote><p>内省就是检查实例的类型。类实例的内省主要目的是通过创建方式来判断对象的结构和功能。</p></blockquote><blockquote><p><strong>小结：</strong></p><p>行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript的[[Prototype]]机制本质上就是行为委托机制。也就是说，我们可以选择在JavaScript中努力实现类机制，也可以拥抱更自然的[[Prototype]]委托机制。</p><p>当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。对象关联（对象之前互相关联）是一种编码风格，它倡导的是直接创建和关联对象，不把它们抽象成类。对象关联可以用基于[[Prototype]]的行为委托非常自然地实现。</p></blockquote><h2 id="类型和语法"><a href="#类型和语法" class="headerlink" title="类型和语法"></a>类型和语法</h2><h3 id="typeof-处理undeclared-未声明-变量的方式"><a href="#typeof-处理undeclared-未声明-变量的方式" class="headerlink" title="typeof 处理undeclared (未声明)变量的方式"></a>typeof 处理undeclared (未声明)变量的方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>对于undeclared（或者not defined）变量，typeof照样返回”undefined”。请注意虽然b是一个undeclared变量，但typeof b并没有报错。这是因为typeof有一个特殊的安全防范机制。</p></blockquote><p><strong>利用这个安全机制检测变量是否存在</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样会抛出错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">DEBUG</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Debugging is starting&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样是安全的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable constant_">DEBUG</span> ! == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Debugging is starting&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串借用数组的不变更成员函数"><a href="#字符串借用数组的不变更成员函数" class="headerlink" title="字符串借用数组的不变更成员函数"></a>字符串借用数组的不变更成员函数</h3><blockquote><p>可惜我们无法“借用”数组的可变更成员函数，因为字符串是不可变的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">join</span>;         <span class="comment">// undefined</span></span><br><span class="line">a.<span class="property">map</span>;          <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>( a, <span class="string">&quot;-&quot;</span> );</span><br><span class="line"><span class="keyword">var</span> d = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>( a, <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> v.<span class="title function_">toUpperCase</span>() + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">&#125; ).<span class="title function_">join</span>( <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line">c;              <span class="comment">// &quot;f-o-o&quot;</span></span><br><span class="line">d;              <span class="comment">// &quot;F.O.O.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><blockquote><p>数字字面量还可以用其他格式来表示，如二进制、八进制和十六进制。</p><p>从ES6开始，严格模式（strict mode）不再支持0363八进制格式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无效语法：</span></span><br><span class="line"><span class="number">42.</span><span class="title function_">toFixed</span>( <span class="number">3</span> );    <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的语法都有效：</span></span><br><span class="line">(<span class="number">42</span>).<span class="title function_">toFixed</span>( <span class="number">3</span> );  <span class="comment">// &quot;42.000&quot;</span></span><br><span class="line"><span class="number">0.42</span>.<span class="title function_">toFixed</span>( <span class="number">3</span> );  <span class="comment">// &quot;0.420&quot;</span></span><br><span class="line"><span class="number">42.</span>.<span class="title function_">toFixed</span>( <span class="number">3</span> );   <span class="comment">// &quot;42.000&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>42.toFixed(3)是无效语法，因为．被视为常量42．的一部分（如前所述），所以没有．属性访问运算符来调用toFixed方法。</p></blockquote><p>ES6支持以下新格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0o363</span>;      <span class="comment">// 243的八进制</span></span><br><span class="line"><span class="number">0O363</span>;      <span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line"><span class="number">0b11110011</span>; <span class="comment">// 243的二进制</span></span><br><span class="line"><span class="number">0B11110011</span>; <span class="comment">// 同上</span></span><br></pre></td></tr></table></figure><h4 id="二进制浮点数最大的问题"><a href="#二进制浮点数最大的问题" class="headerlink" title="二进制浮点数最大的问题"></a><strong>二进制浮点数最大的问题</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>简单来说，二进制浮点数中的0.1和0.2并不是十分精确，它们相加的结果并非刚好等于0.3，而是一个比较接近的数字0.30000000000000004，所以条件判断结果为false。</p></blockquote><h4 id="整数的安全范围"><a href="#整数的安全范围" class="headerlink" title="整数的安全范围"></a><strong>整数的安全范围</strong></h4><blockquote><p>es6 新增了 Number.MAX_SAFE_INTEGER，Number.MIN_SAFE_INTEGER 储存了最大最小安全整数</p></blockquote><h4 id="整数检测"><a href="#整数检测" class="headerlink" title="整数检测"></a><strong>整数检测</strong></h4><blockquote><p>可以使用ES6中的Number.isInteger(..)方法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>( <span class="number">42</span> );     <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>( <span class="number">42.000</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>( <span class="number">42.3</span> );   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>es6之前的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="title class_">Number</span>.<span class="property">isInteger</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span>.<span class="property">isInteger</span> = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> num == <span class="string">&quot;number&quot;</span> &amp;&amp; num % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="要检测一个值是否是安全的整数"><a href="#要检测一个值是否是安全的整数" class="headerlink" title="要检测一个值是否是安全的整数"></a>要检测一个值是否是安全的整数</h4><blockquote><p>可以使用ES6中的Number.isSafeInteger(..)方法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>( <span class="title class_">Number</span>.<span class="property">MAX</span> <span class="variable constant_">SAFE</span> <span class="variable constant_">INTEGER</span> );    <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>( <span class="title class_">Math</span>.<span class="title function_">pow</span>( <span class="number">2</span>, <span class="number">53</span> ) );          <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>( <span class="title class_">Math</span>.<span class="title function_">pow</span>( <span class="number">2</span>, <span class="number">53</span> ) -<span class="number">1</span> );      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>es6之前方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="title class_">Number</span>.<span class="property">isSafeInteger</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span>.<span class="property">isSafeInteger</span> = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Number</span>.<span class="title function_">isInteger</span>( num ) &amp;&amp;</span><br><span class="line">          <span class="title class_">Math</span>.<span class="title function_">abs</span>( num ) &lt;= <span class="title class_">Number</span>.<span class="property">MAX</span> <span class="variable constant_">SAFE</span> <span class="variable constant_">INTEGER</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><blockquote><p>undefined是一个内置标识符,它的值为undefined，通过void运算符即可得到该值。</p><p>表达式void______没有返回值，因此返回结果是undefined。void并不改变表达式的结果，只是让表达式不返回值：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注：APP.ready由程序自己定义</span></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable constant_">APP</span>.<span class="property">ready</span>) &#123;</span><br><span class="line">      <span class="comment">// 稍后再试</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">void</span> <span class="built_in">setTimeout</span>( doSomething,<span class="number">100</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以了吗？</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">doSomething</span>()) &#123;</span><br><span class="line">    <span class="comment">// 立即执行下一个任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特殊的数字"><a href="#特殊的数字" class="headerlink" title="特殊的数字"></a>特殊的数字</h4><blockquote><p>如果数学运算的操作数不是数字类型（或者无法解析为常规的十进制或十六进制数字），就无法返回一个有效的数字，这种情况下返回值为<strong>NaN</strong>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"></span><br><span class="line">a == <span class="title class_">NaN</span>;   <span class="comment">// false</span></span><br><span class="line">a === <span class="title class_">NaN</span>;  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>aN是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即x === x不成立）的值。而NaN ! =NaN为true，很奇怪吧？</p></blockquote><p><strong>那如何来判断它们呢？</strong></p><blockquote><p>可以使用内建的全局工具函数isNaN(..)来判断一个值是否是NaN。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// NaN</span></span><br><span class="line">b; <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">isNaN</span>( a ); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">isNaN</span>( b ); <span class="comment">// true——晕！</span></span><br></pre></td></tr></table></figure><blockquote><p>它的检查方式过于死板，就是“<strong>检查参数是否不是NaN，也不是数字</strong>”</p><p>很明显”foo”不是一个数字，但是它也不是NaN。这个bug自JavaScript问世以来就一直存在，至今已超过19年。</p></blockquote><blockquote><p>从ES6开始我们可以使用工具函数Number.isNaN(..)。ES6之前的浏览器的polyfill如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="property">isNaN</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span>.<span class="property">isNaN</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          <span class="keyword">typeof</span> n === <span class="string">&quot;number&quot;</span> &amp;&amp;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="built_in">isNaN</span>( n )</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>( a ); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>( b ); <span class="comment">// false——好！</span></span><br></pre></td></tr></table></figure><h4 id="无穷数"><a href="#无穷数" class="headerlink" title="无穷数"></a>无穷数</h4><blockquote><p>JavaScript的运算结果有可能溢出，此时结果为Infinity或者-Infinity。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> / <span class="number">0</span>;  <span class="comment">// Infinity</span></span><br><span class="line"><span class="keyword">var</span> b = -<span class="number">1</span> / <span class="number">0</span>; <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><blockquote><p>Infinity/Infinity是一个未定义操作，结果为NaN。</p><p>有穷正数除以Infinity，结果为0。</p><p>有穷负数除以Infinity，结果为-0。</p></blockquote><h4 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h4><blockquote><p>JavaScript有一个常规的0（也叫作+0）和一个-0。</p></blockquote><p>根据规范，对负零进行字符串化会返回”0”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span> / -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至少在某些浏览器的控制台中显示是正确的</span></span><br><span class="line">a;                           <span class="comment">// -0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是规范定义的返回结果是这样！</span></span><br><span class="line">a.<span class="title function_">toString</span>();               <span class="comment">// &quot;0&quot;</span></span><br><span class="line">a + <span class="string">&quot;&quot;</span>;                     <span class="comment">// &quot;0&quot;</span></span><br><span class="line"><span class="title class_">String</span>( a );                <span class="comment">// &quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON也如此，很奇怪</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a );   <span class="comment">// &quot;0&quot;</span></span><br></pre></td></tr></table></figure><p>如果反过来将其从字符串转换为数字，得到的结果是准确的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">&quot;-0&quot;</span>;              <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">Number</span>( <span class="string">&quot;-0&quot;</span> );     <span class="comment">// -0</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>( <span class="string">&quot;-0&quot;</span> ); <span class="comment">// -0</span></span><br></pre></td></tr></table></figure><p>负零转换为字符串的结果令人费解，它的比较操作也是如此：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span> / -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">a == b;     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">-<span class="number">0</span> == <span class="number">0</span>;    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">a === b;    <span class="comment">// true</span></span><br><span class="line">-<span class="number">0</span> === <span class="number">0</span>;   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> &gt; -<span class="number">0</span>;     <span class="comment">// false</span></span><br><span class="line">a &gt; b;      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>判断是否是 -0</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNegZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    n = <span class="title class_">Number</span>( n );</span><br><span class="line">    <span class="keyword">return</span> (n === <span class="number">0</span>) &amp;&amp; (<span class="number">1</span> / n === -<span class="title class_">Infinity</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">isNegZero</span>( -<span class="number">0</span> );        <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isNegZero</span>( <span class="number">0</span> / -<span class="number">3</span> );    <span class="comment">// true</span></span><br><span class="line"><span class="title function_">isNegZero</span>( <span class="number">0</span> );         <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>为啥需要存在 -0?</strong></p><blockquote><p>有些应用程序中的数据需要以级数形式来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）。此时如果一个值为0的变量失去了它的符号位，它的方向信息就会丢失。所以保留0值的符号位可以防止这类情况发生。</p></blockquote><h4 id="特殊等式"><a href="#特殊等式" class="headerlink" title="特殊等式"></a>特殊等式</h4><blockquote><p>NaN和-0在相等比较时的表现有些特别。由于NaN和自身不相等，所以必须使用ES6中的Number.isNaN(..)。而-0等于0（对于===也是如此），</p><p>ES6中新加入了一个工具方法Object.is(..)来判断两个值是否绝对相等，可以用来处理上述所有的特殊情况：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = -<span class="number">3</span> * <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>( a, <span class="title class_">NaN</span> );    <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>( b, -<span class="number">0</span> );     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>( b, <span class="number">0</span> );      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="值和引用"><a href="#值和引用" class="headerlink" title="值和引用"></a>值和引用</h3><blockquote><p>简单值（即标量基本类型值，scalar primitive）总是通过值复制的方式来赋值/传递，包括null、undefined、字符串、数字、布尔和ES6中的symbol。</p><p>复合值（compound value）——对象（包括数组和封装对象）和函数，则总是通过引用复制的方式来赋值/传递。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">// b是a的值的一个复本</span></span><br><span class="line">b++;</span><br><span class="line">a; <span class="comment">// 2</span></span><br><span class="line">b; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> d = c; <span class="comment">// d是[1,2,3]的一个引用</span></span><br><span class="line">d.<span class="title function_">push</span>( <span class="number">4</span> );</span><br><span class="line">c; <span class="comment">// [1,2,3,4]</span></span><br><span class="line">d; <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>产生的困惑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    x.<span class="title function_">push</span>( <span class="number">4</span> );</span><br><span class="line">    x; <span class="comment">// [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后</span></span><br><span class="line">    x = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    x.<span class="title function_">push</span>( <span class="number">7</span> );</span><br><span class="line">    x; <span class="comment">// [4,5,6,7]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>( a );</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// 是[1,2,3,4]，不是[4,5,6,7]</span></span><br></pre></td></tr></table></figure><blockquote><p>我们不能通过引用x来更改引用a的指向，只能更改a和x共同指向的值。</p></blockquote><p>我们无法自行决定使用值复制还是引用复制，一切由值的类型来决定。</p><h3 id="原生函数"><a href="#原生函数" class="headerlink" title="原生函数"></a>原生函数</h3><ul><li>String()</li><li> Number()</li><li> Boolean()</li><li> Array()</li><li> Object()</li><li> Function()</li><li> RegExp()</li><li> Date()</li><li> Error()</li><li> Symbol()——ES6中新加入的！</li></ul><p>可以这样来用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">String</span>( <span class="string">&quot;Hello World! &quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( s.<span class="title function_">toString</span>() ); <span class="comment">// &quot;Hello World! &quot;</span></span><br></pre></td></tr></table></figure><p>但其构造出来的对象可能会和我们设想的有所出入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">String</span>( <span class="string">&quot;abc&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a;<span class="comment">// 是&quot;object&quot;，不是&quot;String&quot;</span></span><br><span class="line"></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">String</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>( a ); <span class="comment">// &quot;[object String]&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>new String(“abc”)创建的是字符串”abc”的封装对象，而非基本类型值”abc”。</p></blockquote><h4 id="原生函数作为构造函数"><a href="#原生函数作为构造函数" class="headerlink" title="原生函数作为构造函数"></a>原生函数作为构造函数</h4><blockquote><p>关于数组（array）、对象（object）、函数（function）和正则表达式，我们通常喜欢以常量的形式来创建它们。实际上，使用常量和使用构造函数的效果是一样的</p><p><strong>应该尽量避免使用构造函数，除非十分必要，因为它们经常会产生意想不到的结果</strong></p></blockquote><p><strong>Array(..)</strong></p><blockquote><p>我们将包含至少一个“空单元”的数组称为“稀疏数组”。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>( <span class="number">3</span> );</span><br><span class="line"></span><br><span class="line">a.<span class="property">length</span>; <span class="comment">// 3</span></span><br><span class="line">a;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以通过下述方式来创建包含undefined单元（而非“空单元”）的数组：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title class_">Array</span>.<span class="title function_">apply</span>( <span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">3</span> &#125; );</span><br><span class="line">a; <span class="comment">// [ undefined, undefined, undefined ]</span></span><br></pre></td></tr></table></figure><blockquote><p>总之，永远不要创建和使用空单元数组。</p></blockquote><h4 id="Object-、Function-和RegExp"><a href="#Object-、Function-和RegExp" class="headerlink" title="Object(..)、Function(..)和RegExp(..)"></a>Object(..)、Function(..)和RegExp(..)</h4><blockquote><p>同样，除非万不得已，否则尽量不要使用Object(..)/Function(..)/RegExp(..)：</p></blockquote><p>比如动态定义正则表达式时可以使用 RegExp()</p><h4 id="Date-和Error"><a href="#Date-和Error" class="headerlink" title="Date(..)和Error(..)"></a>Date(..)和Error(..)</h4><blockquote><p>这两个构造函数用的比较多</p></blockquote><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol(..)"></a>Symbol(..)</h4><blockquote><p>ES6中新加入了一个基本数据类型 ——符号（Symbol）。符号是具有唯一性的特殊值（并非绝对），用它来命名对象属性不容易导致重名。该类型的引入主要源于ES6的一些特殊构造，此外符号也可以自行定义。</p></blockquote><blockquote><p>ES6中有一些预定义符号，以Symbol的静态属性形式出现，如Symbol.create、Symbol. iterator等，可以这样来使用：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*..*/</span> &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>符号并非对象，而是一种简单标量基本类型</p></blockquote><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><blockquote><p>JavaScript为基本数据类型值提供了封装对象，称为原生函数（如String、Number、Boolean等）。它们为基本数据类型值提供了该子类型所特有的方法和属性（如：String#trim()和Array#concat(..)）。对于简单标量基本类型值，比如”abc”，如果要访问它的length属性或String.prototype方法，JavaScript引擎会自动对该值进行封装（即用相应类型的封装对象来包装它）来实现对这些属性和方法的访问。</p></blockquote><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><h4 id="值类型转换"><a href="#值类型转换" class="headerlink" title="值类型转换"></a>值类型转换</h4><blockquote><p>将值从一种类型转换为另一种类型通常称为类型转换（type casting），这是显式的情况；隐式的情况称为强制类型转换（coercion）。</p><p>JavaScript中的强制类型转换总是返回标量基本类型值。如字符串、数字和布尔值，不会返回对象和函数</p></blockquote><p>然而在JavaScript中通常将它们统称为强制类型转换，我个人则倾向于用“<strong>隐式强制类型转换</strong>”（implicit coercion）和“<strong>显式强制类型转换</strong>”（explicit coercion）来区分。</p><p>二者的区别显而易见：<strong>我们能够从代码中看出哪些地方是显式强制类型转换，而隐式强制类型转换则不那么明显，通常是某些操作产生的副作用。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a + <span class="string">&quot;&quot;</span>;         <span class="comment">// 隐式强制类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title class_">String</span>( a );    <span class="comment">// 显式强制类型转换</span></span><br></pre></td></tr></table></figure><blockquote><p>要是你明白a + “”是怎么回事，它对你来说就是“显式”的。相反，如果你不知道String(..)可以用来做字符串强制类型转换，它对你来说可能就是“隐式”的。</p></blockquote><h5 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h5><blockquote><p>它负责处理非字符串到字符串的强制类型转换。</p><p>基本类型值的字符串化规则为：null转换为”null”, undefined转换为”undefined”, true转换为”true”。数字的字符串化则遵循通用规则，不过前面讲过的那些极小和极大的数字使用指数形式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.07 连续乘以七个 1000</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1.07</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 七个1000一共21位数字</span></span><br><span class="line">a.<span class="title function_">toString</span>(); <span class="comment">// &quot;1.07e21&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>对普通对象来说，除非自行定义，否则toString()（Object.prototype.toString()）返回内部属性[[Class]]的值，如”[object Object]”。</p></blockquote><h5 id="JSON字符串化"><a href="#JSON字符串化" class="headerlink" title="JSON字符串化"></a>JSON字符串化</h5><blockquote><p>工具函数JSON.stringify(..)在将JSON对象序列化为字符串时也用到了ToString。</p></blockquote><p>对大多数简单值来说，JSON字符串化和toString()的效果基本相同，只不过序列化的结果总是字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( <span class="number">42</span> );   <span class="comment">// &quot;42&quot;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( <span class="string">&quot;42&quot;</span> ); <span class="comment">// &quot;&quot;42&quot;&quot;（含有双引号的字符串）</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( <span class="literal">null</span> ); <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( <span class="literal">true</span> ); <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>所有安全的JSON值（JSON-safe）都可以使用JSON.stringify(..)字符串化。安全的JSON值是指能够呈现为有效JSON格式的值。</p><p>不安全的JSON值：</p><p>undefined、function、symbol（ES6+）和包含循环引用（对象之间相互引用，形成一个无限循环）的对象都不符合JSON结构标准，其他支持JSON的语言无法处理它们</p></blockquote><p>如果对象中定义了toJSON()方法，JSON字符串化时会首先调用该方法，然后用它的返回值来进行序列化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">c</span>: o,</span><br><span class="line">  <span class="attr">d</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在a中创建一个循环引用</span></span><br><span class="line">o.<span class="property">e</span> = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环引用在这里会产生错误</span></span><br><span class="line"><span class="comment">// JSON.stringify( a );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的JSON序列化</span></span><br><span class="line">a.<span class="property">toJSON</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 序列化仅包含b</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">b</span>: <span class="variable language_">this</span>.<span class="property">b</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a ); <span class="comment">// &quot;&#123;&quot;b&quot;:42&#125;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>也就是说，toJSON()应该“返回一个能够被字符串化的安全的JSON值”，而不是“返回一个JSON字符串”。</strong></p></blockquote><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">val</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能是我们想要的结果！</span></span><br><span class="line">    <span class="attr">toJSON</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">val</span>.<span class="title function_">slice</span>( <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">val</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能不是我们想要的结果！</span></span><br><span class="line">    <span class="attr">toJSON</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> +</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">val</span>.<span class="title function_">slice</span>( <span class="number">1</span> ).<span class="title function_">join</span>() +</span><br><span class="line">      <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a ); <span class="comment">// &quot;[2,3]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( b ); <span class="comment">// &quot;&quot;[2,3]&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里第二个函数是对toJSON返回的字符串做字符串化，而非数组本身。</p></blockquote><p><strong>JSON.stringify(..)<strong>也可以传递一个可选参数replacer，它可以是</strong>数组或者函数</strong>，<strong>用来指定对象序列化过程中哪些属性应该被处理，哪些应该被排除</strong>，和toJSON()很像。</p><p>如果replacer是一个函数，它会对对象本身调用一次，然后对对象中的每个属性各调用一次，每次传递两个参数，键和值。<strong>如果要忽略某个键就返回undefined，否则返回指定的值。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&quot;42&quot;</span>,</span><br><span class="line">    <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a, [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>] ); <span class="comment">// &quot;&#123;&quot;b&quot;:42, &quot;c&quot;:&quot;42&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a, <span class="keyword">function</span>(<span class="params">k, v</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (k ! == <span class="string">&quot;c&quot;</span>) <span class="keyword">return</span> v;</span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">// &quot;&#123;&quot;b&quot;:42, &quot;d&quot;:[1,2,3]&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>JSON.stringify还有一个可选参数space，用来指定输出的缩进格式。space为正整数时是指定每一级缩进的字符数，它还可以是字符串，此时最前面的十个字符被用于每一级的缩进：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&quot;42&quot;</span>,</span><br><span class="line">    <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a, <span class="literal">null</span>, <span class="number">3</span> );</span><br><span class="line"><span class="comment">// &quot;&#123;</span></span><br><span class="line"><span class="comment">//    &quot;b&quot;: 42,</span></span><br><span class="line"><span class="comment">//    &quot;c&quot;: &quot;42&quot;,</span></span><br><span class="line"><span class="comment">//    &quot;d&quot;: [</span></span><br><span class="line"><span class="comment">//       1,</span></span><br><span class="line"><span class="comment">//       2,</span></span><br><span class="line"><span class="comment">//       3</span></span><br><span class="line"><span class="comment">//    ]</span></span><br><span class="line"><span class="comment">// &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( a, <span class="literal">null</span>, <span class="string">&quot;-----&quot;</span> );</span><br><span class="line"><span class="comment">// &quot;&#123;</span></span><br><span class="line"><span class="comment">// -----&quot;b&quot;: 42,</span></span><br><span class="line"><span class="comment">// -----&quot;c&quot;: &quot;42&quot;,</span></span><br><span class="line"><span class="comment">// -----&quot;d&quot;: [</span></span><br><span class="line"><span class="comment">// ----------1,</span></span><br><span class="line"><span class="comment">// ----------2,</span></span><br><span class="line"><span class="comment">// ----------3</span></span><br><span class="line"><span class="comment">// -----]</span></span><br><span class="line"><span class="comment">// &#125;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>JSON.stringify(..)并不是强制类型转换。在这里介绍是因为它涉及ToString强制类型转换，具体表现在以下两点。</p><p>(1) 字符串、数字、布尔值和null的JSON.stringify(..)规则与ToString基本相同。</p><p>(2) 如果传递给JSON.stringify(..)的对象中定义了toJSON()方法，那么该方法会在字符串化前调用，以便将对象转换为安全的JSON值。</p></blockquote><h5 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h5><blockquote><p>有时我们需要将非数字值当作数字来使用，比如数学运算。</p><p>为此ES5规范在9.3节定义了抽象操作ToNumber。其中<strong>true转换为1, false转换为0。undefined转换为NaN, null转换为0</strong>。</p><p>ToNumber对字符串的处理基本遵循数字常量的相关规则/语法.处理失败时返回NaN。不同之处是ToNumber对以0开头的十六进制数并不按十六进制处理（而是按十进制</p><p>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</p></blockquote><p>为了<strong>将值转换为相应的基本类型值</strong>，抽象操作ToPrimitive（参见ES5规范9.1节）会首先（通过内部操作DefaultValue，参见ES5规范8.12.8节）<strong>检查该值是否有valueOf()方法</strong>。如果有并且返回基本类型值，就使用该值进行强制类型转换。<strong>如果没有就使用toString()的返回值</strong>（如果存在）来进行强制类型转换。如果valueOf()和toString()均不返回基本类型值，会产生TypeError错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;42&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;42&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line">c.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">join</span>( <span class="string">&quot;&quot;</span> ); <span class="comment">// &quot;42&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>( a );                <span class="comment">// 42</span></span><br><span class="line"><span class="title class_">Number</span>( b );                <span class="comment">// 42</span></span><br><span class="line"><span class="title class_">Number</span>( c );                <span class="comment">// 42</span></span><br><span class="line"><span class="title class_">Number</span>( <span class="string">&quot;&quot;</span> );               <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Number</span>( [] );               <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Number</span>( [ <span class="string">&quot;abc&quot;</span> ] );        <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h5 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h5><blockquote><p>在JavaScript中布尔值和数字是不一样的。虽然我们可以将1强制类型转换为true，将0强制类型转换为false，反之亦然，但它们并不是一回事。</p></blockquote><p><strong>假值</strong></p><blockquote><p>• undefined</p><p>• null</p><p>• false</p><p>• +0、-0和NaN</p><p>• “”</p><p>假值的布尔强制类型转换结果为false。从逻辑上说，假值列表以外的都应该是真值（truthy）。</p></blockquote><p><strong>假值对象（falsy object）</strong></p><blockquote><p>前面讲过规范规定所有的对象都是真值，怎么还会有假值对象呢？</p></blockquote><p>有人可能会以为假值对象就是包装了假值的封装对象（如””、0和false，参见第3章），实际不然。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Boolean</span>( <span class="literal">false</span> );</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Number</span>( <span class="number">0</span> );</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title class_">String</span>( <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="title class_">Boolean</span>( a &amp;&amp; b &amp;&amp; c );</span><br><span class="line"></span><br><span class="line">d; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果假值对象并非封装了假值的对象，那它究竟是什么？</p><blockquote><p>最常见的例子是document.all，它是一个类数组对象，包含了页面上的所有元素，由DOM（而不是JavaScript引擎）提供给JavaScript程序使用。它以前曾是一个真正意义上的对象，布尔强制类型转换结果为true，不过现在它是一个假值对象。</p></blockquote><h5 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h5><blockquote><p>真值就是假值列表之外的值。</p></blockquote><h5 id="显示强制转换"><a href="#显示强制转换" class="headerlink" title="显示强制转换"></a><strong>显示强制转换</strong></h5><blockquote><p>在JavaScript开源社区中，一元运算+被普遍认为是显式强制类型转换。</p><p>一元运算符+紧挨着++和–也很容易引起混淆。例如a +++b、a + ++b和a+ + +b</p></blockquote><p>加法运算符（<code>+</code>）为两种不同的运算重载：数字加法和字符串连接。在求值时，它首先<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E5%8E%9F%E5%A7%8B%E5%80%BC%E8%BD%AC%E6%8D%A2">将两个操作数强制转换为基本类型</a>。然后，检查两个操作数的类型：</p><ul><li>如果有一方是字符串，另外一方则会被<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#%E8%BD%AC%E6%8D%A2%E6%95%B0%E5%AD%97%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2">转换为字符串</a>，并且与它们连接起来。</li><li>如果双方都是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>，则执行 BigInt 加法。如果一方是 BigInt 而另一方不是，则会抛出<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError"><code>TypeError</code></a>。</li><li>否则，双方都会被<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number#%E8%BD%AC%E6%8D%A2%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BA%E6%95%B0%E5%AD%97">转换为数字</a>，执行数字加法。</li></ul><p><strong>日期显式转换为数字</strong></p><blockquote><p>一元运算符+的另一个常见用途是将日期（Date）对象强制类型转换为数字，返回结果为Unix时间戳</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>( <span class="string">&quot;Mon, 18 Aug 2014 08:53:06 CDT&quot;</span> );</span><br><span class="line"></span><br><span class="line">+d; <span class="comment">// 1408369986000</span></span><br></pre></td></tr></table></figure><h5 id="奇特的-运算符"><a href="#奇特的-运算符" class="headerlink" title="奇特的~运算符"></a>奇特的~运算符</h5><blockquote><p>~和indexOf()一起可以将结果强制类型转换（实际上仅仅是转换）为真/假值：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line">~a.<span class="title function_">indexOf</span>( <span class="string">&quot;lo&quot;</span> );         <span class="comment">// -4   &lt;-- 真值！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (~a.<span class="title function_">indexOf</span>( <span class="string">&quot;lo&quot;</span> )) &#123;   <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// 找到匹配！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~a.<span class="title function_">indexOf</span>( <span class="string">&quot;ol&quot;</span> );         <span class="comment">// 0    &lt;-- 假值！</span></span><br><span class="line">!~a.<span class="title function_">indexOf</span>( <span class="string">&quot;ol&quot;</span> );        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! ~a.<span class="title function_">indexOf</span>( <span class="string">&quot;ol&quot;</span> )) &#123;  <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// 没有找到匹配！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字位截除"><a href="#字位截除" class="headerlink" title="字位截除"></a>字位截除</h5><blockquote><p>~~来截除数字值的小数部分，以为这和Math.floor(..)的效果一样，实际上并非如此。</p><p>首先它只适用于32位数字，更重要的是它对负数的处理与Math. floor(..)不同。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>( -<span class="number">49.6</span> );    <span class="comment">// -50</span></span><br><span class="line">~~-<span class="number">49.6</span>;                <span class="comment">// -49</span></span><br></pre></td></tr></table></figure><h4 id="字符串和数字之间的隐式强制类型转换"><a href="#字符串和数字之间的隐式强制类型转换" class="headerlink" title="字符串和数字之间的隐式强制类型转换"></a>字符串和数字之间的隐式强制类型转换</h4><blockquote><p>+运算符即能用于数字加法，也能用于字符串拼接。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;42&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a + b; <span class="comment">// &quot;420&quot;</span></span><br><span class="line">c + d; <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><blockquote><p>某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用ToPrimitive抽象操作（规范9.1节），该抽象操作再调用[[DefaultValue]]（规范8.12.8节），以数字作为上下文。</p></blockquote><h4 id="布尔值到数字的隐式强制类型转换"><a href="#布尔值到数字的隐式强制类型转换" class="headerlink" title="布尔值到数字的隐式强制类型转换"></a>布尔值到数字的隐式强制类型转换</h4><blockquote><p>在将某些复杂的布尔逻辑转换为数字加法的时候，隐式强制类型转换能派上大用场。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有一个为真的条件返回true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onlyOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 跳过假值，和处理0一样，但是避免了NaN</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i]) &#123;</span><br><span class="line">          sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onlyOne</span>( b, a );                <span class="comment">// true</span></span><br><span class="line"><span class="title function_">onlyOne</span>( b, a, b, b, b );       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="隐式强制类型转换为布尔值"><a href="#隐式强制类型转换为布尔值" class="headerlink" title="隐式强制类型转换为布尔值"></a>隐式强制类型转换为布尔值</h4><blockquote><p>相对布尔值，数字和字符串操作中的隐式强制类型转换还算比较明显。下面的情况会发生布尔值隐式强制类型转换。</p></blockquote><p>(1) if (..)语句中的条件判断表达式。</p><p>(2) for ( .. ; .. ; .. )语句中的条件判断表达式（第二个）。</p><p>(3) while (..)和do..while(..)循环中的条件判断表达式。</p><p>(4) ? ：中的条件判断表达式。</p><p>(5) 逻辑运算符 ||（逻辑或）和 &amp;&amp;（逻辑与）左边的操作数（作为条件判断表达式）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;yep&quot;</span> );       <span class="comment">// yep</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (c) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;nope, never runs&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = d ? a : b;</span><br><span class="line">c;                               <span class="comment">// &quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((a &amp;&amp; d) || c) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;yep&quot;</span> );       <span class="comment">// yep</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="和-amp-amp"><a href="#和-amp-amp" class="headerlink" title="|| 和 &amp;&amp;"></a>|| 和 &amp;&amp;</h4><blockquote><p>逻辑运算符||（或）和&amp;&amp;（与）应该并不陌生. 它们的返回值是两个操作数中的一个（且仅一个）。即选择两个操作数中的一个，然后返回它的值。 因此 可能 称之为 <strong>操作数选择器运算符</strong> 更恰当</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">a || b;     <span class="comment">// 42</span></span><br><span class="line">a &amp;&amp; b;     <span class="comment">// &quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">c || b;     <span class="comment">// &quot;abc&quot;</span></span><br><span class="line">c &amp;&amp; b;     <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>||和&amp;&amp;首先会对第一个操作数（a和c）执行条件判断，如果其不是布尔值（如上例）就先进行ToBoolean强制类型转换，然后再执行条件判断。</p><blockquote><p>对于||来说，如果条件判断结果为true就返回第一个操作数（a和c）的值，如果为false就返回第二个操作数（b）的值。</p><p>&amp;&amp;则相反，如果条件判断结果为true就返回第二个操作数（b）的值，如果为false就返回第一个操作数（a和c）的值。</p></blockquote><p>换个角度理解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a || b;</span><br><span class="line"><span class="comment">// 大致相当于(roughly equivalent to):</span></span><br><span class="line">a ? a : b;</span><br><span class="line"></span><br><span class="line">a &amp;&amp; b;</span><br><span class="line"><span class="comment">// 大致相当于(roughly equivalent to):</span></span><br><span class="line">a ? b : a;</span><br></pre></td></tr></table></figure><blockquote><p>a = b || “something”和a &amp;&amp; b()用到了“短路”机制</p></blockquote><h4 id="符号的强制类型转换"><a href="#符号的强制类型转换" class="headerlink" title="符号的强制类型转换"></a>符号的强制类型转换</h4><blockquote><p>ES6中引入了符号类型，它的强制类型转换有一个坑，在这里有必要提一下。ES6允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="title class_">Symbol</span>( <span class="string">&quot;cool&quot;</span> );</span><br><span class="line"><span class="title class_">String</span>( s1 );     <span class="comment">// &quot;Symbol(cool)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="title class_">Symbol</span>( <span class="string">&quot;not cool&quot;</span> );</span><br><span class="line">s2 + <span class="string">&quot;&quot;</span>;      <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>符号不能够被强制类型转换为数字</strong>（显式和隐式都会产生错误），但可以<strong>被强制类型转换为布尔值</strong>（显式和隐式结果都是true）。</p></blockquote><h4 id="宽松相等和严格相等"><a href="#宽松相等和严格相等" class="headerlink" title="宽松相等和严格相等"></a>宽松相等和严格相等</h4><blockquote><p>宽松相等（loose equals）==和严格相等（strict equals）===都用来判断两个值是否“相等”，但是它们之间有一个很重要的区别，特别是在判断条件上。</p><p><strong>常见的误区是“==检查值是否相等，===检查值和类型是否相等”。</strong></p><p><strong>正确的解释是：“==允许在相等比较中进行强制类型转换，而===不允许。”</strong></p></blockquote><h4 id="相等比较操作的性能"><a href="#相等比较操作的性能" class="headerlink" title="相等比较操作的性能"></a>相等比较操作的性能</h4><blockquote><p>有人觉得==会比===慢，实际上虽然强制类型转换确实要多花点时间，但仅仅是微秒级（百万分之一秒）的差别而已。</p><p>不用在乎性能</p><p>==和===都会检查操作数的类型。区别在于操作数类型不同时它们的处理方式不同。</p></blockquote><h4 id="抽象相等"><a href="#抽象相等" class="headerlink" title="抽象相等"></a>抽象相等</h4><blockquote><p>“抽象相等”（abstract equality）的这些规则正是隐式强制类型转换被诟病的原因。</p></blockquote><blockquote><p>es5规定 如果两个值的类型相同，就仅比较它们是否相等**。例如，42等于42, “abc”等于”abc”。</p><p>有几个非常规的情况需要注意</p><p>• NaN不等于NaN</p><p>• +0等于-0</p></blockquote><blockquote><p><strong>==在比较两个不同类型的值时会发生隐式强制类型转换</strong>，会将其中之一或两者都转换为相同的类型后再进行比较。</p></blockquote><blockquote><p>宽松不相等（loose not-equality）! =就是==的相反值，! ==同理。</p></blockquote><h5 id="字符串和数字之间的相等比较"><a href="#字符串和数字之间的相等比较" class="headerlink" title="字符串和数字之间的相等比较"></a>字符串和数字之间的相等比较</h5><blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;42&quot;</span>;</span><br><span class="line"></span><br><span class="line">a === b;    <span class="comment">// false</span></span><br><span class="line">a == b;     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>类型不相等时会发生强制类型转换，具体怎么转换？</strong></p><p>ES5规范11.9.3.4-5这样定义：</p><p>(1) 如果Type(x)是数字，Type(y)是字符串，则返回x ==ToNumber(y)的结果。</p><p>(2) 如果Type(x)是字符串，Type(y)是数字，则返回ToNumber(x)== y的结果。</p><blockquote><p>字符串，数字之间比较时，将字符串强制转为数字</p></blockquote><h5 id="其他类型和布尔类型之间的相等比较"><a href="#其他类型和布尔类型之间的相等比较" class="headerlink" title="其他类型和布尔类型之间的相等比较"></a>其他类型和布尔类型之间的相等比较</h5><blockquote><p>==最容易出错的一个地方是true和false与其他类型之间的相等比较。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;42&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">a == b; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>规范11.9.3.6-7是这样说的：</p><p>(1) 如果Type(x)是布尔类型，则返回ToNumber(x) == y的结果；</p><p>(2) 如果Type(y)是布尔类型，则返回x == ToNumber(y)的结果。</p><blockquote><p>先将布尔值转换成数字，在应用数字与其他类型的比较规则</p></blockquote><h5 id="null和undefined之间的相等比较"><a href="#null和undefined之间的相等比较" class="headerlink" title="null和undefined之间的相等比较"></a>null和undefined之间的相等比较</h5><blockquote><p>null和undefined之间的==也涉及隐式强制类型转换。</p></blockquote><p>ES5规范11.9.3.2-3规定：</p><p>(1) 如果x为null, y为undefined，则结果为true。</p><p>(2) 如果x为undefined, y为null，则结果为true。</p><p>除此之外，其他比较结果都是 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title function_">doSomething</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>条件判断a == null仅在doSomething()返回null和undefined时才成立，除此之外其他值都不成立，包括0、false和””这样的假值。</p></blockquote><blockquote><p>这也就是说，在==中null和undefined是一回事，可以相互进行隐式强制类型转换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line">a == b;     <span class="comment">// true</span></span><br><span class="line">a == <span class="literal">null</span>;  <span class="comment">// true</span></span><br><span class="line">b == <span class="literal">null</span>;  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">a == <span class="literal">false</span>; <span class="comment">// false</span></span><br><span class="line">b == <span class="literal">false</span>; <span class="comment">// false</span></span><br><span class="line">a == <span class="string">&quot;&quot;</span>;    <span class="comment">// false</span></span><br><span class="line">b == <span class="string">&quot;&quot;</span>;    <span class="comment">// false</span></span><br><span class="line">a == <span class="number">0</span>;     <span class="comment">// false</span></span><br><span class="line">b == <span class="number">0</span>;     <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="对象和非对象之间的相等比较"><a href="#对象和非对象之间的相等比较" class="headerlink" title="对象和非对象之间的相等比较"></a>对象和非对象之间的相等比较</h5><blockquote><p>关于对象（对象/函数/数组）和标量基本类型（字符串/数字/布尔值）之间的相等比较</p></blockquote><p>ES5规范11.9.3.8-9做如下规定：</p><p>(1) 如果Type(x)是字符串或数字，Type(y)是对象，则返回x ==ToPrimitive(y)的结果；</p><p>(2) 如果Type(x)是对象，Type(y)是字符串或数字，则返回ToPrimitive(x) == y的结果。</p><blockquote><p><strong>toPrimitive</strong>(input,preferedType?):</p><ol><li><p>如果input是原始值，直接返回这个值；</p><ol start="2"><li><p>否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；</p></li><li><p>否则，调用input.toString()。如果结果是原始值，返回结果；</p></li><li><p>否则，抛出错误。</p></li></ol></li></ol></blockquote><blockquote><p>这里没提到布尔值，因为布尔值会先被强制类型转换为数字</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>( a );    <span class="comment">// 和new String( a )一样</span></span><br><span class="line"></span><br><span class="line">a === b;                <span class="comment">// false</span></span><br><span class="line">a == b;                 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但有一些值不这样，原因是==算法中其他优先级更高的规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>( a );    <span class="comment">// 和Object()一样</span></span><br><span class="line">a == b;                 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="title class_">Object</span>( c );    <span class="comment">// 和Object()一样</span></span><br><span class="line">c == d;                 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title class_">Object</span>( e );    <span class="comment">// 和new Number( e )一样</span></span><br><span class="line">e == f;                 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>因为没有对应的封装对象，所以null和undefined不能够被封装（boxed）, Object(null)和Object()均返回一个常规对象。</p><p>NaN能够被封装为数字封装对象，但拆封之后NaN == NaN返回false，因为NaN不等于NaN</p></blockquote><h5 id="比较少见的情况"><a href="#比较少见的情况" class="headerlink" title="比较少见的情况"></a>比较少见的情况</h5><blockquote><p>更改内置原生原型会导致哪些奇怪的结果。</p></blockquote><p><strong>返回其他数字</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>( <span class="number">2</span> ) == <span class="number">3</span>;   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>2 == 3不会有这种问题，因为2和3都是数字基本类型值，不会调用Number.prototype.valueOf()方法。而Number(2)涉及ToPrimitive强制类型转换，因此会调用valueOf()</p></blockquote><p>还有更奇怪的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果让a.valueOf()每次调用都产生副作用，比如第一次返回2，第二次返回3，就会出现这样的情况。这实现起来很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> i++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Number</span>( <span class="number">42</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Yep, this happened.&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是千万不要滥用，我们应该正确合理地运用强制类型转换，避免这些极端的情况。</p><p><strong>假值的相等比较</strong></p><blockquote><p>==中的隐式强制类型转换最为人诟病的地方是假值的相等比较</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;0&quot;</span> == <span class="literal">null</span>;           <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;0&quot;</span> == <span class="literal">undefined</span>;      <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;0&quot;</span> == <span class="literal">false</span>;          <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="string">&quot;0&quot;</span> == <span class="title class_">NaN</span>;            <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;0&quot;</span> == <span class="number">0</span>;              <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;0&quot;</span> == <span class="string">&quot;&quot;</span>;             <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>;         <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>;    <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="title class_">NaN</span>;          <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="number">0</span>;            <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&quot;&quot;</span>;           <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="literal">false</span> == [];           <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="literal">false</span> == &#123;&#125;;           <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">null</span>;            <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">undefined</span>;       <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="title class_">NaN</span>;             <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="number">0</span>;               <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == [];              <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == &#123;&#125;;              <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> == <span class="literal">null</span>;             <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span>;        <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="title class_">NaN</span>;              <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == [];               <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="number">0</span> == &#123;&#125;;               <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>极端情况</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] ==  ![]   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>根据ToBoolean规则，它会进行布尔值的显式强制类型转换（同时反转奇偶校验位）。所以[] == ! []变成了[] == false。布尔值强制转换数字 0，[] == 0, 数字跟对象比较 </p></blockquote><p>其他情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> == [<span class="number">2</span>];       <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == [<span class="literal">null</span>];   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>还有一个坑常常被提到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="string">&quot;\n&quot;</span>;  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>“”、”\n”（或者” “等其他空格组合）等空字符串被ToNumber强制类型转换为0</p></blockquote><h4 id="安全运用隐式强制类型转换"><a href="#安全运用隐式强制类型转换" class="headerlink" title="安全运用隐式强制类型转换"></a>安全运用隐式强制类型转换</h4><blockquote><p>我们要对==两边的值认真推敲，以下两个原则可以让我们有效地避免出错。</p></blockquote><p>• 如果两边的值中有true或者false，千万不要使用==。</p><p>• 如果两边的值中有[]、””或者0，尽量不要使用==。</p><h4 id="抽象关系比较"><a href="#抽象关系比较" class="headerlink" title="抽象关系比较"></a>抽象关系比较</h4><blockquote><p>a &lt; b中涉及的隐式强制类型转换不太引人注意，不过还是很有必要深入了解一下。</p><p>ES5规范11.8.5节定义了“抽象关系比较”（abstract relational comparison），分为两个部分：比较双方都是字符串（后半部分）和其他情况（前半部分）。</p></blockquote><p>比较双方首先调用ToPrimitive，如果结果出现非字符串，就根据ToNumber规则将双方强制类型转换为数字来进行比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="number">42</span> ];</span><br><span class="line"><span class="keyword">var</span> b = [ <span class="string">&quot;43&quot;</span> ];</span><br><span class="line">a &lt; b;  <span class="comment">// true</span></span><br><span class="line">b &lt; a;  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果比较双方都是字符串，则按字母顺序来进行比较：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="string">&quot;42&quot;</span> ];</span><br><span class="line"><span class="keyword">var</span> b = [ <span class="string">&quot;043&quot;</span> ];</span><br><span class="line"></span><br><span class="line">a &lt; b;  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>再比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">b</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">43</span> &#125;;</span><br><span class="line"></span><br><span class="line">a &lt; b;  <span class="comment">// ? ?</span></span><br></pre></td></tr></table></figure><p>结果居然是 false !!!, 🙄这是因为 a,b都被转换成了 “[object Object]”</p><p>下面的例子就有些奇怪了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">b</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">43</span> &#125;;</span><br><span class="line"></span><br><span class="line">a &lt; b;  <span class="comment">// false</span></span><br><span class="line">a == b; <span class="comment">// false</span></span><br><span class="line">a &gt; b;  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">a &lt;= b; <span class="comment">// true</span></span><br><span class="line">a &gt;= b; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对象相等的情况就是引用相同，所以 a!=b,但是如果a &lt; b和a == b结果为false，<strong>为什么a &lt;= b和a &gt;= b的结果会是true呢？</strong></p><blockquote><p>因为根据规范a &lt;= b被处理为b &lt; a，然后将结果反转。因为b &lt;a的结果是false，所以a &lt;= b的结果是true。</p><p>这可能与我们设想的大相径庭，即&lt;=应该是“小于或者等于”。实际上JavaScript中&lt;=是“不大于”的意思（即！(a &gt; b)，处理为！(b &lt; a)）。同理，a &gt;= b处理为b &lt;= a。</p></blockquote><p><strong>为避免出啥幺蛾子，最好保证比较双方类型相同</strong></p><h3 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3><blockquote><p>语句相当于句子，表达式相当于短语，运算符则相当于标点符号和连接词。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> * <span class="number">6</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b;</span><br></pre></td></tr></table></figure><p>这里，3 ＊ 6是一个表达式（结果为18）。第二行的a也是一个表达式，第三行的b也是。表达式a和b的结果值都是18。</p><p><strong>var a = 3 ＊ 6和var b = a称为“声明语句”</strong>（declaration statement），因为它们声明了变量（还可以为其赋值）。a = 3 ＊ 6和b = a<strong>（不带var）叫作“赋值表达式”</strong>。</p><h4 id="语句的结果值"><a href="#语句的结果值" class="headerlink" title="语句的结果值"></a>语句的结果值</h4><blockquote><p>如果你用开发控制台（或者JavaScript REPL——read/evaluate/print/loop工具）调试过代码，应该会看到很多语句的返回值显示为undefined，只是你可能从未探究过其中的原因。其实控制台中显示的就是语句的结果值。但是在代码中没有办法获取这个结果值</p></blockquote><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    b = <span class="number">4</span> + <span class="number">38</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台/REPL中输入以上代码应该会显示42，即最后一个语句/表达式b = 4 + 38的结果值。</p><p>但下面这样的代码无法运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">a = <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    b = <span class="number">4</span> + <span class="number">38</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>因为语法不允许我们获得语句的结果值并将其赋值给另一个变量（至少目前不行）。</p></blockquote><p><strong>那应该怎样获得语句的结果值呢？</strong></p><p>可以使用万恶的eval(..)（又读作“evil”）来获得结果值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">eval</span>( <span class="string">&quot;if (true) &#123; b = 4 + 38; &#125;&quot;</span> );</span><br><span class="line"></span><br><span class="line">a;  <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><h4 id="表达式的副作用"><a href="#表达式的副作用" class="headerlink" title="表达式的副作用"></a>表达式的副作用</h4><blockquote><p>大部分表达式没有副作用。</p><p>最常见的有副作用（也可能没有）的表达式是函数调用：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a = a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">foo</span>();      <span class="comment">// 结果值：undefined。副作用：a的值被改变</span></span><br></pre></td></tr></table></figure><p>其他一些表达式也有副作用，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = a++;</span><br><span class="line"></span><br><span class="line">a;  <span class="comment">// 43</span></span><br><span class="line">b;  <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>语句系列逗号运算符（statement-series comma operator）将多个独立的表达式语句串联成一个语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>, b;</span><br><span class="line">b = ( a++, a );</span><br><span class="line"></span><br><span class="line">a;  <span class="comment">// 43</span></span><br><span class="line">b;  <span class="comment">// 43</span></span><br></pre></td></tr></table></figure><p>a++, a中第二个表达式a在a++之后执行，结果为43，并被赋值给b。</p><p>再如delete运算符。delete用来删除对象中的属性和数组中的单元。它通常以单独一个语句的形式出现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span>;          <span class="comment">// 42</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span>;   <span class="comment">// true</span></span><br><span class="line">obj.<span class="property">a</span>;          <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果操作成功，delete返回true，否则返回false。其副作用是属性被从对象中删除（或者单元从array中删除）。</p><p>另一个有趣的例子是=赋值运算符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line">a = <span class="number">42</span>;     <span class="comment">// 42</span></span><br><span class="line">a;          <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><blockquote><p>组合赋值运算符，如+=和-=等也是如此。例如，a = b += 2首先执行b +=2（即b = b + 2），然后结果再被赋值给a。</p></blockquote><h4 id="上下文规则"><a href="#上下文规则" class="headerlink" title="上下文规则"></a>上下文规则</h4><blockquote><p>在JavaScript语法规则中，有时候同样的语法在不同的情况下会有不同的解释。这些语法规则孤立起来会很难理解。</p></blockquote><h5 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h5><blockquote><p>下面两种情况会用到大括号{ .. }（随着JavaScript的演进会出现更多类似的情况）。</p></blockquote><ol><li><p>对象常量</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定函数bar()已经定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="title function_">bar</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>标签</p><p> 如果将上例中的var a =去掉会发生什么情况呢？</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 bar已定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="title function_">bar</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 很多开发人员以为这里的{ .. }只是一个孤立的对象常量，没有赋值。事实上不是这样。</p><p> 这里涉及JavaScript中一个不太为人知（也不建议使用）的特性，叫作“<strong>标签语句</strong>”（labeled statement）。<strong>foo是语句bar()的标签</strong>（后面没有；）。标签语句具体是做什么用的呢？</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标签为foo的循环</span></span><br><span class="line"><span class="attr">foo</span>: <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// 如果j和i相等，继续外层循环</span></span><br><span class="line">      <span class="keyword">if</span> (j == i) &#123;</span><br><span class="line">          <span class="comment">// 跳转到foo的下一个循环</span></span><br><span class="line">          <span class="keyword">continue</span> foo;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 跳过奇数结果</span></span><br><span class="line">      <span class="keyword">if</span> ((j ＊ i) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 继续内层循环（没有标签的）</span></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( i, j );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 0</span></span><br><span class="line"><span class="comment">// 2 0</span></span><br><span class="line"><span class="comment">// 2 1</span></span><br><span class="line"><span class="comment">// 3 0</span></span><br><span class="line"><span class="comment">// 3 2</span></span><br></pre></td></tr></table></figure><p> break foo不是指“跳转到标签foo所在位置继续执行”，而是“跳出标签foo所在的循环/代码块，继续执行后面的代码”</p><blockquote><p>标签也能用于非循环代码块，但只有break才可以。我们可以对带标签的代码块使用break______，但是不能对带标签的非循环代码块使用continue，也不能对不带标签的代码块使用break：</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标签为bar的代码块</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="attr">bar</span>: &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Hello&quot;</span> );</span><br><span class="line">              <span class="keyword">break</span> bar;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;never runs&quot;</span> );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;World&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">// Hello</span></span><br><span class="line"><span class="comment">// World</span></span><br></pre></td></tr></table></figure><blockquote><p>带标签的循环/代码块十分少见，也不建议使用。</p></blockquote></li></ol><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] + &#123;&#125;; <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line">&#123;&#125; + []; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>第一行代码中，{}出现在+运算符表达式中，因此它被当作一个值（空对象）来处理。[]会被强制类型转换为””，而{}会被强制类型转换为”[object Object]”。</p><p>但在第二行代码中，{}被当作一个独立的空代码块（不执行任何操作）。代码块结尾不需要分号，所以这里不存在语法上的问题。最后+ []将[]显式强制类型转换为0。</p><h5 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h5><blockquote><p>从ES6开始，{ .. }也可用于“解构赋值”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ..</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">42</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> &#123; a, b &#125; = <span class="title function_">getData</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( a, b ); <span class="comment">// 42 &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">&#123; a , b &#125; = .．就是<span class="title class_">ES6</span>中的解构赋值，相当于下面的代码：</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> res = <span class="title function_">getData</span>();</span><br><span class="line">  <span class="keyword">var</span> a = res.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> b = res.<span class="property">b</span>;</span><br></pre></td></tr></table></figure><p>{ a, b }实际上是{ a: a, b: b }的简化版本，两者均可，只不过{ a,b }更简洁。</p><h5 id="else-if和可选代码块"><a href="#else-if和可选代码块" class="headerlink" title="else if和可选代码块"></a>else if和可选代码块</h5><blockquote><p>很多人误以为JavaScript中有else if，因为我们可以这样来写代码：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上JavaScript没有else if，但if和else只包含单条语句的时候可以省略代码块的{ }。下面的代码你一定不会陌生：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) <span class="title function_">doSomething</span>( a );</span><br></pre></td></tr></table></figure><p>很多JavaScript代码检查工具建议对单条语句也应该加上{ }，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123; <span class="title function_">doSomething</span>( a ); &#125;</span><br></pre></td></tr></table></figure><p>else也是如此，所以我们经常用到的else if实际上是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b) &#123;</span><br><span class="line">      <span class="comment">// ..</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>else if极为常见，能省掉一层代码缩进，所以很受青睐。但这只是我们自己发明的用法，切勿想当然地认为这些都属于JavaScript语法的范畴。</p></blockquote><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><blockquote><p>超过一个运算符时表达式的执行顺序。 对此js没有具体介绍<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">参考</a></p></blockquote><p>&amp;&amp;运算符的优先级高于=</p><p>&amp;&amp;运算符先于||执行</p><p>||的优先级又高于？:</p><h5 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h5><blockquote><p>对&amp;&amp;和||来说，如果从左边的操作数能够得出结果，就可以忽略右边的操作数。我们将这种现象称为“短路”（即执行最短路径）。</p></blockquote><p>以a &amp;&amp; b为例，如果a是一个假值，足以决定&amp;&amp;的结果，就没有必要再判断b的值。同样对于a || b，如果a是一个真值，也足以决定||的结果，也就没有必要再判断b的值。</p><h5 id="更强的绑定"><a href="#更强的绑定" class="headerlink" title="更强的绑定"></a>更强的绑定</h5><p>多个运算符串联在一起的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &amp;&amp; b || c ? c || b ? a : c &amp;&amp; b : a</span><br></pre></td></tr></table></figure><p>其中？：运算符的优先级比&amp;&amp;和||高还是低呢？执行顺序是怎样？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a &amp;&amp; b || c) ? (c || b) ? a : (c &amp;&amp; b) : a</span><br></pre></td></tr></table></figure><blockquote><p>因为&amp;&amp;运算符的优先级高于||，而||的优先级又高于？ :。</p></blockquote><h5 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h5><blockquote><p>&amp;&amp;和||运算符先于？：执行，那么如果多个相同优先级的运算符同时出现，又该如何处理呢？它们的执行顺序是从左到右还是从右到左？</p></blockquote><p>一般说来，运算符的关联（associativity）不是从左到右就是从右到左，这取决于组合（grouping）是从左开始还是从右开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>() &amp;&amp; <span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure><p>这里遵循从左到右的顺序（JavaScript的默认执行顺序）。这里foo()首先执行，它的返回结果决定了bar()是否执行。所以如果bar()在foo()之前执行，整个结果会完全不同。</p><p>而a &amp;&amp; b &amp;&amp; c这样的表达式就涉及组合（隐式），这意味着a &amp;&amp; b或b &amp;&amp; c会先执行。</p><blockquote><p>如果&amp;&amp;是右关联的话会被处理为a &amp;&amp; (b &amp;&amp; c)。但这并不意味着c会在b之前执行。右关联不是指从右往左执行，而是指从右往左组合。任何时候，不论是组合还是关联，严格的执行顺序都应该是从左到右，a, b，然后c。</p></blockquote><p>比如？：（三目运算符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ? b : c ? d : e;</span><br></pre></td></tr></table></figure><p>?：是右关联，它的组合顺序是以下哪一种呢？</p><p>• a ? b : (c ? d : e)</p><p>• (a ? b : c) ? d : e</p><p>答案是a ? b : (c ? d : e)。</p><p><strong>更为复杂的赋值表达式的例子：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = a &amp;&amp; b || c ? c || b ? a : c &amp;&amp; b : a;</span><br><span class="line"></span><br><span class="line">d;      <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>掌握了优先级和关联等相关知识之后，就能够根据组合规则将上面的代码分解如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((a &amp;&amp; b) || c) ? ((c || b) ? a : (c &amp;&amp; b)) : a</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="自动分号"><a href="#自动分号" class="headerlink" title="自动分号"></a>自动分号</h4><blockquote><p>有时JavaScript会自动为代码行补上缺失的分号，即自动分号插入（Automatic Semicolon Insertion, ASI）。</p><p>请注意，ASI只在换行符处起作用，而不会在代码行的中间插入分号。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>, b</span><br><span class="line">c;</span><br></pre></td></tr></table></figure><p>JavaScript判断b之后应该有；，所以c；被处理为一个独立的表达式语句。</p><p>语法规定do..while循环后面必须带；,但是大多数开发人员会不记得，所以ASI会自动补上，其他涉及ASI的情况是break、continue、return和yield（ES6）等关键字</p><p><strong>纠错机制</strong></p><p>对于ASI自动添加 ; , js社区争议</p><ul><li><p>正方认为ASI机制大有裨益，能省略掉那些不必要的；，让代码更简洁。</p></li><li><p>反方则认为ASI机制问题太多，对于缺乏经验的初学者尤其如此，自动插入会改变代码逻辑。应该通过linter这样的工具来找出这些错误，而不是依赖JavaScript引擎来改正错误。</p></li></ul><blockquote><p>建议在所有需要的地方加上分号，将对ASI的依赖降到最低。</p></blockquote><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><blockquote><p>JavaScript不仅有各种类型的运行时错误（TypeError、ReferenceError、SyntaxError等），它的语法中也定义了一些编译时错误。</p><p>如非法正则，重名函数，重名属性…</p><p>从语义角度来说，这些错误并非词法错误，而是语法错误，因为它们在词法上是正确的。只不过由于没有GrammarError类型，一些浏览器选择用SyntaxError来代替。</p></blockquote><h5 id="提前使用变量"><a href="#提前使用变量" class="headerlink" title="提前使用变量"></a>提前使用变量</h5><blockquote><p>ES6规范定义了一个新概念，叫作TDZ（Temporal Dead Zone，暂时性死区）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a = <span class="number">2</span>;      <span class="comment">// ReferenceError!</span></span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a = 2试图在let a初始化a之前使用该变量（其作用域在{ .. }内），这里就是a的TDZ，会产生错误。</p><p>有意思的是，对未声明变量使用typeof不会产生错误，但在TDZ中却会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typeof</span> a;   <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">typeof</span> b;   <span class="comment">// ReferenceError! (TDZ)</span></span><br><span class="line">    <span class="keyword">let</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><blockquote><p>另一个TDZ违规的例子是ES6中的参数默认值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"> a = <span class="number">42</span>, b = a + b + <span class="number">5</span> </span>) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>b = a + b + 5在参数b（=右边的b，而不是函数外的那个）的TDZ中访问b，所以会出错。而访问a却没有问题，因为此时刚好跨出了参数a的TDZ。</p></blockquote><h4 id="try-finally"><a href="#try-finally" class="headerlink" title="try..finally"></a>try..finally</h4><blockquote><p>try..catch对我们来说可能已经非常熟悉了。但你是否知道try可以和catch或者finally配对使用，并且必要时两者可同时出现？</p></blockquote><p>在一种情况下需要finally:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">              <span class="comment">// throw 42;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Hello&quot;</span> );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;never runs&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">foo</span>() );</span><br><span class="line"><span class="comment">// Hello</span></span><br><span class="line"><span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>当try 语句用有return 时，finally 会在return 前执行。 当try中 使用 throw 时也是如此</p><p>如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="string">&quot;Oops! &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;never runs&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">foo</span>() );</span><br><span class="line"><span class="comment">// Uncaught Exception: Oops!</span></span><br></pre></td></tr></table></figure><p>continue和break等控制语句也是如此：finally 中语句会在 关键字之前执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>( i );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><p>finally中的return会覆盖try和catch中return的返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// 没有返回语句，所以没有覆盖</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// 覆盖前面的return 42</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// 覆盖前面的return 42</span></span><br><span class="line">              <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();  <span class="comment">// 42</span></span><br><span class="line"><span class="title function_">bar</span>();  <span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">baz</span>();  <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><blockquote><p>通常来说，在函数中省略return的结果和return；及return undefined；是一样的，但是在finally中省略return则会返回前面的return设定的返回值。</p></blockquote><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><blockquote><p>可以把它看作if..else if..else.．的简化版本：a与case的值执行严格相等（===）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="comment">// 执行一些代码</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">42</span>:</span><br><span class="line">              <span class="comment">// 执行另外一些代码</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">              <span class="comment">// 执行缺省代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里a与case表达式逐一进行比较。如果匹配就执行该case中的代码，直到break或者switch代码块结束。</p></blockquote><h2 id="异步现在和将来"><a href="#异步现在和将来" class="headerlink" title="异步现在和将来"></a>异步现在和将来</h2><h3 id="异步和性能"><a href="#异步和性能" class="headerlink" title="异步和性能"></a>异步和性能</h3><h4 id="异步控制台"><a href="#异步控制台" class="headerlink" title="异步控制台"></a>异步控制台</h4><blockquote><p>并没有什么规范或一组需求指定console.＊方法族如何工作——它们并不是JavaScript正式的一部分，而是由宿主环境添加到JavaScript中的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a ); <span class="comment">// ? ?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再然后</span></span><br><span class="line">a.<span class="property">index</span>++;</span><br></pre></td></tr></table></figure><p>正常情况下会输出 { index: 1}， 但如果遇到控制台I/O延迟情况，可能会输出 { index: 2}</p><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><blockquote><p>现在我们来澄清一件事情（可能令人震惊）：尽管你显然能够编写异步JavaScript代码（就像前面我们看到的定时代码），但直到最近（ES6）, JavaScript才真正内建有直接的异步概念。</p><p>宿主环境（浏览器-js，服务器-nodejs）提供了一种机制来处理程序中多个块的执行，且执行每块时调用JavaScript引擎，这种机制被称为事件循环。</p><p>换句话说，JavaScript引擎本身并没有时间的概念，只是一个按需执行JavaScript任意代码片段的环境。“事件”（JavaScript代码执行）调度总是由包含它的环境进行。</p></blockquote><p>通过伪代码了解这个概念：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eventLoop是一个用作队列的数组</span></span><br><span class="line"><span class="comment">//（先进，先出）</span></span><br><span class="line"><span class="keyword">var</span> eventLoop = [ ];</span><br><span class="line"><span class="keyword">var</span> event;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “永远”执行</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 一次tick</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 拿到队列中的下一个事件</span></span><br><span class="line">          event = eventLoop.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 现在，执行下一个事件</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="title function_">event</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">              <span class="title function_">reportError</span>(err);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有一个用while循环实现的持续运行的循环，循环的每一轮称为一个tick。对每个tick而言，如果在队列中有等待事件，那么就会从队列中摘下一个事件并执行。这些事件就是你的回调函数。</p><p>要搞清楚的是，setTimeout(..)并没有把你的回调函数挂在事件循环队列中。它所做的是设定一个定时器。当定时器到时后，环境会把你的回调函数放在事件循环中，这样，在未来某个时刻的tick会摘下并执行这个回调。</p><p>如果这时候事件循环中已经有20个项目了会怎样呢？你的回调就会等待。它得排在其他项目后面——通常没有抢占式的方式支持直接将其排到队首。这也就是为啥说setTimeout()定时器精度不高的原因了</p><p>现在ES6精确指定了事件循环的工作细节，这意味着在技术上将其纳入了JavaScript引擎的势力范围，而不是只由宿主环境来管理。这个改变的一个主要原因是ES6中Promise的引入，因为这项技术要求对事件循环队列的调度运行能够直接进行精细控制</p></blockquote><h4 id="并行线程"><a href="#并行线程" class="headerlink" title="并行线程"></a>并行线程</h4><blockquote><p>术语“异步”和“并行”常常被混为一谈，但实际上它们的意义完全不同。记住，<strong>异步是关于现在和将来的时间间隙，而并行是关于能够同时发生的事情。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a = a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    a = a * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax(..)是某个库中提供的某个Ajax函数</span></span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.1&quot;</span>, foo );</span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.2&quot;</span>, bar );</span><br></pre></td></tr></table></figure><p>根据 foo,bar 的执行顺序不同可能得到不一样的结果a(2/40), 但如果 foo,bar 同时运行？两个操作共享a的内存地址，这是很复杂的操作，好在js是单线程不需要考虑这个问题</p><h4 id="完整运行"><a href="#完整运行" class="headerlink" title="完整运行"></a>完整运行</h4><blockquote><p>由于JavaScript的单线程特性，foo()（以及bar()）中的代码具有原子性。也就是说，一旦foo()开始运行，它的所有代码都会在bar()中的任意代码运行之前完成，或者相反。这称为完整运行（run-to-completion）特性。</p></blockquote><p>foo,bar中的内容越长，其运行的不确定性就越多，但是其确定性肯定比多线程要高</p><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><blockquote><p>现在让我们来设想一个展示状态更新列表（比如社交网络新闻种子）的网站，其随着用户向下滚动列表而逐渐加载更多内容。要正确地实现这一特性，需要（至少）两个独立的“<strong>进程</strong>”同时运行（也就是说，是在同一段时间内，并不需要在同一时刻）。</p><p>【“进程”】这是虚拟进程，并非真正意义上的操作系统进程。之所以使用“进程”而不是“任务”，是因为从概念上来讲，“进程”的定义更符合这里我们使用的意义。</p></blockquote><ul><li><p>第一个“进程”在用户向下滚动页面触发onscroll事件时响应这些事件（发起Ajax请求要求新的内容）。</p></li><li><p>第二个“进程”接收Ajax响应（把内容展示到页面）。</p></li></ul><p>如果用户滚动够快的话，可能会有两个或者更多事件被触发。两个或多个“进程”同时执行就出现了并发</p><p>下面列出了事件循环队列中所有这些交替事件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">onscroll, 请求1       &lt;--- 进程1启动</span><br><span class="line">onscroll, 请求2</span><br><span class="line">响应1                 &lt;--- 进程2启动</span><br><span class="line">onscroll, 请求3</span><br><span class="line">响应2</span><br><span class="line">响应3</span><br><span class="line">onscroll, 请求4</span><br><span class="line">onscroll, 请求5</span><br><span class="line">onscroll, 请求6</span><br><span class="line">响应4</span><br><span class="line">onscroll, 请求7       &lt;--- 进程1结束</span><br><span class="line">响应6</span><br><span class="line">响应5</span><br><span class="line">响应7                 &lt;--- 进程2结束</span><br></pre></td></tr></table></figure><p>单线程事件循环是并发的一种形式</p><h5 id="非交互"><a href="#非交互" class="headerlink" title="非交互"></a>非交互</h5><blockquote><p>两个或多个“进程”在同一个程序内并发地交替运行它们的步骤/事件时，如果这些任务彼此不相关，就不一定需要交互。如果进程间没有相互影响的话，不确定性是完全可以接受的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">results</span>) &#123;</span><br><span class="line">    res.<span class="property">foo</span> = results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">results</span>) &#123;</span><br><span class="line">    res.<span class="property">bar</span> = results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax(..)是某个库提供的某个Ajax函数</span></span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.1&quot;</span>, foo );</span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.2&quot;</span>, bar );</span><br></pre></td></tr></table></figure><h5 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h5><blockquote><p>更常见的情况是，并发的“进程”需要相互交流，通过作用域或DOM间接交互。正如前面介绍的，如果出现这样的交互，就需要对它们的交互进行协调以避免竞态的出现。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">response</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">url</span> == <span class="string">&quot;http://some.url.1&quot;</span>) &#123;</span><br><span class="line">      res[<span class="number">0</span>] = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">url</span> == <span class="string">&quot;http://some.url.2&quot;</span>) &#123;</span><br><span class="line">      res[<span class="number">1</span>] = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax(..)是某个库中提供的某个Ajax函数</span></span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.1&quot;</span>, response );</span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.2&quot;</span>, response );</span><br></pre></td></tr></table></figure><h5 id="协作"><a href="#协作" class="headerlink" title="协作"></a>协作</h5><blockquote><p>还有一种并发合作方式，称为并发协作（cooperative concurrency）。这里的重点不再是通过共享作用域中的值进行交互（尽管显然这也是允许的！）。这里的目标是取到一个长期运行的“进程”，并将其分割成多个步骤或多批任务，使得其他并发“进程”有机会将自己的运算插入到事件循环队列中交替运行。</p></blockquote><p>举例来说，考虑一个需要遍历很长的结果列表进行值转换的Ajax响应处理函数。我们会使用Array#map(..)让代码更简洁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// response(..)从Ajax调用中取得结果数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">response</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 添加到已有的res数组</span></span><br><span class="line">    res = res.<span class="title function_">concat</span>(</span><br><span class="line">      <span class="comment">// 创建一个新的变换数组把所有data值加倍</span></span><br><span class="line">      data.<span class="title function_">map</span>( <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> val * <span class="number">2</span>;</span><br><span class="line">      &#125; )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax(..)是某个库中提供的某个Ajax函数</span></span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.1&quot;</span>, response );</span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.2&quot;</span>, response );</span><br></pre></td></tr></table></figure><p>然而数据量多的话，比如1000万条</p><p>所以，要创建一个协作性更强更友好且不会霸占事件循环队列的并发系统，你可以异步地批处理这些结果 。每次处理之后返回事件循环，让其他等待事件有机会运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// response(..)从Ajax调用中取得结果数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">response</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 一次处理1000个</span></span><br><span class="line">    <span class="keyword">var</span> chunk = data.<span class="title function_">splice</span>( <span class="number">0</span>, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到已有的res组</span></span><br><span class="line">    res = res.<span class="title function_">concat</span>(</span><br><span class="line">      <span class="comment">// 创建一个新的数组把chunk中所有值加倍</span></span><br><span class="line">      chunk.<span class="title function_">map</span>( <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> val * <span class="number">2</span>;</span><br><span class="line">      &#125; )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还有剩下的需要处理吗？</span></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 异步调度下一次批处理</span></span><br><span class="line">      <span class="built_in">setTimeout</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">response</span>( data );</span><br><span class="line">      &#125;, <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ajax(..)是某个库中提供的某个Ajax函数</span></span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.1&quot;</span>, response );</span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.2&quot;</span>, response );</span><br></pre></td></tr></table></figure><p>这里使用setTimeout(..0)（hack）进行异步调度，基本上它的意思就是“把这个函数插入到当前事件循环队列的结尾处”。</p><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><blockquote><p>在ES6中，有一个新的概念建立在事件循环队列之上，叫作任务队列（job queue）。这个概念给大家带来的最大影响可能是Promise的异步特性\</p><p>遗憾的是，目前为止，这是一个没有公开API的机制，因此要展示清楚有些困难。所以我们目前只从概念上进行描述</p></blockquote><p>设想一个调度任务（直接地，不要hack）的API，称其为schedule(..)。考虑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;A&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;B&quot;</span> );</span><br><span class="line">&#125;, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理论上的&quot;任务API&quot;</span></span><br><span class="line"><span class="title function_">schedule</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;C&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">schedule</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;D&quot;</span> );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>可能你认为这里会打印出A B C D，但实际打印的结果是A C D B。因为任务处理是在当前事件循环tick结尾处，而定时器触发是为了调度下一个事件循环tick（如果可用的话！）。</p><h4 id="语句顺序"><a href="#语句顺序" class="headerlink" title="语句顺序"></a>语句顺序</h4><blockquote><p>代码中语句的顺序和JavaScript引擎执行语句的顺序并不一定要一致。</p></blockquote><p>编写的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">a = a + <span class="number">1</span>;</span><br><span class="line">b = b + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a + b ); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>js引擎可能会发现，其实这样执行会更快：重排代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line">b = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a + b ); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>或者甚至这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为a和b不会被再次使用</span></span><br><span class="line"><span class="comment">// 我们可以inline，从而完全不需要它们！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">42</span> ); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>但是这里有一种场景，其中特定的优化是不安全的，因此也是不允许的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们需要a和b处于递增之前的状态！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a * b ); <span class="comment">// 300</span></span><br><span class="line"></span><br><span class="line">a = a + <span class="number">1</span>;</span><br><span class="line">b = b + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a + b ); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>还有其他一些例子，其中编译器重新排序会产生可见的副作用，比如会产生副作用的函数调用（特别是getter函数），或ES6代理对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( b );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5.1 getter字面量语法</span></span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">bar</span>() &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( a );</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">30</span>;</span><br><span class="line">a += <span class="title function_">foo</span>();              <span class="comment">// 30</span></span><br><span class="line">b += c.<span class="property">bar</span>;              <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( a + b );    <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>如果不是代码片段中的语句 console.log(),js引擎本来可以把代码重新排序如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span> + <span class="title function_">foo</span>();</span><br><span class="line">b = <span class="number">30</span> + c.<span class="property">bar</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>尽管JavaScript语义让我们不会见到编译器语句重排序可能导致的噩梦，这是一种幸运，但是代码编写的方式（从上到下的模式）和编译后执行的方式之间的联系非常脆弱，理解这一点也非常重要。</p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><blockquote><p>到目前为止，回调是编写和处理JavaScript程序异步逻辑的最常用方式。确实，回调是这门语言中最基础的异步模式。</p></blockquote><h4 id="continuation"><a href="#continuation" class="headerlink" title="continuation"></a>continuation</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="title function_">ajax</span>( <span class="string">&quot;..&quot;</span>, <span class="keyword">function</span>(<span class="params">..</span>)&#123;</span><br><span class="line">    <span class="comment">// C</span></span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">// B</span></span><br></pre></td></tr></table></figure><p>// A和// B表示程序的前半部分（也就是现在的部分），而// C标识了程序的后半部分（也就是将来的部分）。前半部分立刻执行，然后是一段时间不确定的停顿。在未来的某个时刻，如果Ajax调用完成，程序就会从停下的位置继续执行后半部分。</p><p>换句话说，回调函数包裹或者说封装了程序的延续（continuation）。</p><p>简化代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="built_in">setTimeout</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// C</span></span><br><span class="line">&#125;, <span class="number">1000</span> );</span><br><span class="line"><span class="comment">// B</span></span><br></pre></td></tr></table></figure><h4 id="嵌套回调与链式回调"><a href="#嵌套回调与链式回调" class="headerlink" title="嵌套回调与链式回调"></a>嵌套回调与链式回调</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">listen</span>( <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">ajax</span>( <span class="string">&quot;http://some.url.1&quot;</span>, <span class="keyword">function</span> <span class="title function_">response</span>(<span class="params">text</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> (text == <span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">              <span class="title function_">handler</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (text == <span class="string">&quot;world&quot;</span>) &#123;</span><br><span class="line">              <span class="title function_">request</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; );</span><br><span class="line">    &#125;, <span class="number">500</span>) ;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>你很可能非常熟悉这样的代码。这里我们得到了三个函数嵌套在一起构成的链，其中每个函数代表异步序列（任务，“进程”）中的一个步骤。</p><p>这种代码常常被称为<strong>回调地狱</strong>（callback hell）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doA</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">doB</span>();</span><br><span class="line">    <span class="title function_">doC</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">doD</span>();</span><br><span class="line">    &#125; )</span><br><span class="line"></span><br><span class="line">    <span class="title function_">doE</span>();</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="title function_">doF</span>();</span><br></pre></td></tr></table></figure><p>你第一眼看到前面这段代码就分析出正确的顺序了吗？</p><h4 id="信任问题"><a href="#信任问题" class="headerlink" title="信任问题"></a>信任问题</h4><p>假设你是一名开发人员，为某个销售昂贵电视的网站建立商务结账系统。你已经做好了结账系统的各个界面。在最后一页，当用户点击“确定”就可以购买电视时，你需要调用（假设由某个分析追踪公司提供的）第三方函数以便跟踪这个交易。</p><p>你注意到，可能是为了提高性能，他们提供了一个看似用于异步追踪的工具，这意味着你需要传入一个回调函数。在传入的这个continuation中，你需要提供向客户收费和展示感谢页面的最终代码。代码可能是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">analytics.<span class="title function_">trackPurchase</span>( purchaseData, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">chargeCreditCard</span>();</span><br><span class="line">  <span class="title function_">displayThankyouPage</span>();</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>六个月过去了，没有任何问题。你几乎已经忘了自己写过这么一段代码。某个上班之前的早晨，你像往常一样在咖啡馆里享用一杯拿铁。突然，你的老板惊慌失措地打电话过来，让你放下咖啡赶紧到办公室。</p><p>原因是一位高级客户购买了一台电视，信用卡被刷了5次。老板很生气并询问你为何出现这种事情，这种情况你没有测试过么？</p><p>你甚至都不记得自己写过这段代码。但是，你得深入研究这些代码，并开始寻找问题产生的原因。</p><p>通过分析日志，你得出一个结论：唯一的解释就是那个分析工具出于某种原因把你的回调调用了五次而不是一次。他们的文档中完全没有提到这种情况。</p><p>然后你联系它们的客服，客服表示吃惊并马上联系开发者，明天给你回复。第二天你收到一封很长的信，是他们解释的原因，于是你转发给老板</p><p>然后呢？你和老板讨论此事，他对这种状况却不怎么满意。他坚持认为，你不能再信任他们了（你们受到了伤害）。对此你也只能无奈接受，并且你需要找到某种方法来保护结账代码，保证不再出问题。</p><p>于是乎面临这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tracked = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">analytics.<span class="title function_">trackPurchase</span>( purchaseData, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (! tracked) &#123;</span><br><span class="line">      tracked = <span class="literal">true</span>;</span><br><span class="line">      <span class="title function_">chargeCreditCard</span>();</span><br><span class="line">      <span class="title function_">displayThankyouPage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>再后来，又有人质疑说</p><p>• 调用回调过早（在追踪之前）；</p><p>• 调用回调过晚（或没有调用）；</p><p>• 调用回调的次数太少或太多（就像你遇到过的问题！）；</p><p>• 没有把所需的环境/参数成功传给你的回调函数；</p><p>• 吞掉可能出现的错误或异常；</p><p>• ……</p><p>你可能已经开始慢慢意识到，对于被传给你无法信任的工具的每个回调，你都将不得不创建大量的混乱逻辑。</p><p>现在你应该更加明白回调地狱是多像地狱了吧。</p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><blockquote><p>回忆一下，我们用回调函数来封装程序中的continuation，然后把回调交给第三方（甚至可能是外部代码），接着期待其能够调用回调，实现正确的功能。通过这种形式，我们要表达的意思是：“这是将来要做的事情，要在当前的步骤完成之后发生。”</p><p>但是，如果我们能够把控制反转再反转回来，会怎样呢？如果我们不把自己程序的continuation传给第三方，而是希望第三方给我们提供了解其任务何时结束的能力，然后由我们自己的代码来决定下一步做什么，那将会怎样呢？</p><p>这种范式就称为Promise</p></blockquote><h5 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h5><blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">xPromise, yPromise</span>) &#123;</span><br><span class="line">    <span class="comment">// Promise.all([ .. ])接受一个promise数组并返回一个新的promise，</span></span><br><span class="line">    <span class="comment">// 这个新promise等待数组中的所有promise完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>( [xPromise, yPromise] )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个promise决议之后，我们取得收到的X和Y值并加在一起</span></span><br><span class="line">    .<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">values</span>)&#123;</span><br><span class="line">      <span class="comment">// values是来自于之前决议的promise的消息数组</span></span><br><span class="line">      <span class="keyword">return</span> values[<span class="number">0</span>] + values[<span class="number">1</span>];</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetchX()和fetchY()返回相应值的promise，可能已经就绪，</span></span><br><span class="line"><span class="comment">// 也可能以后就绪</span></span><br><span class="line"><span class="title function_">add</span>( <span class="title function_">fetchX</span>(), <span class="title function_">fetchY</span>() )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们得到一个这两个数组的和的promise</span></span><br><span class="line"><span class="comment">// 现在链式调用then(..)来等待返回promise的决议</span></span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">sum</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( sum ); <span class="comment">// 这更简单！</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><blockquote><p>在add(..)内部，Promise.all([ .. ])调用创建了一个promise（这个promise等待promiseX和promiseY的决议）。链式调用．then(..)创建了另外一个promise。这个promise由return values[0] + values[1]这一行立即决议（得到加运算的结果）。</p><p>因此，链add(..)调用终止处的调用then(..)——在代码结尾处——实际上操作的是返回的第二个promise，而不是由Promise.all([ .. ])创建的第一个promise。还有，尽管第二个then(..)后面没有链接任何东西，但它实际上也创建了一个新的promise，如果想要观察或者使用它的话就可以看到。</p></blockquote><p>new Promise( function(..){ .. } )模式通常称为<a href="http://domenic.me/2014/02/13/the-revealing-constructor-pattern/">revealing constructor</a> <strong>传入的函数会立即执行</strong>（不会像then(..)中的回调一样异步延迟），它有两个参数，在本例中我们将其分别称为resolve和reject。这些是promise的决议函数。resolve(..)通常标识完成，而reject(..)则标识拒绝。</p><p>检查一个对象是否是Promise对象？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p <span class="keyword">instanceof</span> <span class="title class_">Promise</span></span><br></pre></td></tr></table></figure><p>这种方法有缺陷，浏览器不同窗口的 Promise 实例不同，比如当前窗口Promise与，当前窗口iframe的不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    p ! == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    (</span><br><span class="line">      <span class="keyword">typeof</span> p === <span class="string">&quot;object&quot;</span> ||</span><br><span class="line">      <span class="keyword">typeof</span> p === <span class="string">&quot;function&quot;</span></span><br><span class="line">    ) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> p.<span class="property">then</span> === <span class="string">&quot;function&quot;</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// 假定这是一个thenable!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不是thenable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>识别Promise（或者行为类似于Promise的东西）就是定义某种称为thenable的东西，将其定义为任何具有then(..)方法的对象和函数。我们认为，任何这样的值就是Promise一致的thenable。</p></blockquote><p>先回顾一下只用回调编码的信任问题。把一个回调传入工具foo(..)时可能出现如下问题：</p><p>Promise的特性就是专门用来为这些问题提供一个有效的可复用的答案。</p><p>• <strong>调用回调过早</strong>；</p><blockquote><p>根据定义，Promise就不必担心这种问题，因为即使是立即完成的Promise（类似于new Promise(function(resolve){ resolve(42);})）也无法被同步观察到。</p><p>也就是说，对一个Promise调用then(..)的时候，即使这个Promise已经决议，提供给then(..)的回调也总会被异步调用</p></blockquote><p>• <strong>调用回调过晚（或不被调用）</strong>；</p><blockquote><p>和前面一点类似，Promise创建对象调用resolve(..)或reject(..)时，这个Promise的then(..)注册的观察回调就会被自动调度。可以确信，这些被调度的回调在下一个异步事件点上一定会被触发.</p><p>这些回调中的任意一个都无法影响或延误对其他回调的调用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    p.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;C&quot;</span> );</span><br><span class="line">    &#125; );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;A&quot;</span> );</span><br><span class="line">&#125; );</span><br><span class="line">p.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;B&quot;</span> );</span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">// A B C</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里，”C”无法打断或抢占”B”，这是因为Promise的运作方式。</p><p>如果两个promise p1和p2都已经决议，那么p1.then(..);p2.then(..)应该最终会先调用p1的回调，然后是p2的那些。但还有一些微妙的场景可能不是这样的，比如以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>( <span class="string">&quot;B&quot;</span> );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>( p3 );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>( <span class="string">&quot;A&quot;</span> );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line">&#125; );</span><br><span class="line">p2.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="comment">// A B    &lt;-- 而不是像你可能认为的B A</span></span><br></pre></td></tr></table></figure><p>防止不被调用的超时模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于超时一个Promise的工具</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeoutPromise</span>(<span class="params">delay</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">reject</span>( <span class="string">&quot;Timeout! &quot;</span> );</span><br><span class="line">      &#125;, delay );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置foo()超时</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>( [</span><br><span class="line">    <span class="title function_">foo</span>(),                      <span class="comment">// 试着开始foo()</span></span><br><span class="line">    <span class="title function_">timeoutPromise</span>( <span class="number">3000</span> )      <span class="comment">// 给它3秒钟</span></span><br><span class="line">] )</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// foo(..)及时完成！</span></span><br><span class="line">    &#125;,</span><br><span class="line">                  <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">          <span class="comment">// 或者foo()被拒绝，或者只是没能按时完成</span></span><br><span class="line">          <span class="comment">// 查看err来了解是哪种情况</span></span><br><span class="line">      &#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>Promise.race,返回多个Promise中最快的那一个</p><p>• <strong>调用回调次数过少或过多</strong>；</p><blockquote><p>根据定义，回调被调用的正确次数应该是1。“过少”的情况就是调用0次，和前面解释过的“未被”调用是同一种情况。</p><p>如果出于某种原因，Promise创建代码试图调用resolve(..)或reject(..)多次，或者试图两者都调用，那么这个Promise将只会接受第一次决议，并默默地忽略任何后续调用。</p></blockquote><p>• <strong>未能传递所需的环境和参数</strong>；</p><blockquote><p>Promise至多只能有一个决议值（完成或拒绝）。</p><p>如果你没有用任何值显式决议，那么这个值就是undefined，这是JavaScript常见的处理方式。但不管这个值是什么，无论当前或未来，它都会被传给所有注册的（且适当的完成或拒绝）回调。</p><p>如果使用多个参数调用resovle(..)或者reject(..)，第一个参数之后的所有参数都会被默默忽略。</p><p>如果要传递多个值，你就必须要把它们封装在单个值中传递，比如通过一个数组或对象。</p></blockquote><p>• <strong>吞掉可能出现的错误和异常</strong>。</p><blockquote><p>基本上，这部分是上个要点的再次说明。如果拒绝一个Promise并给出一个理由（也就是一个出错消息），这个值就会被传给拒绝回调。</p><p>如果在Promise的创建过程中或在查看其决议结果过程中的任何时间点上出现了一个JavaScript异常错误，比如一个TypeError或ReferenceError，那这个异常就会被捕捉，并且会使这个Promise被拒绝。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    foo.<span class="title function_">bar</span>();  <span class="comment">// foo未定义，所以会出错！</span></span><br><span class="line">    <span class="title function_">resolve</span>( <span class="number">42</span> );  <span class="comment">// 永远不会到达这里 :(</span></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfilled</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// 永远不会到达这里 :(</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rejected</span>(<span class="params">err</span>)&#123;</span><br><span class="line">      <span class="comment">// err将会是一个来自foo.bar()这一行的TypeError异常对象</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>foo.bar()中发生的JavaScript异常导致了Promise拒绝，你可以捕捉并对其作出响应。</p><h5 id="Promise是可信任的么"><a href="#Promise是可信任的么" class="headerlink" title="Promise是可信任的么"></a>Promise是可信任的么</h5><blockquote><p>Promise并没有完全摆脱回调。它们只是改变了传递回调的位置。</p><p>为什么这就比单纯使用回调更值得信任呢？如何能够确定返回的这个东西实际上就是一个可信任的Promise呢？</p></blockquote><p>Promise对这个问题已经有一个解决方案。包含在原生ES6 Promise实现中的解决方案就是Promise.resolve(..)。</p><p>如果向Promise.resolve(..)传递一个非Promise、非thenable的立即值，就会得到一个用这个值填充的promise。下面这种情况下，promise p1和promise p2的行为是完全一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>( <span class="number">42</span> );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>( <span class="number">42</span> );</span><br></pre></td></tr></table></figure><p>更重要的是，如果向Promise.resolve(..)传递了一个非Promise的thenable值，前者就会试图展开这个值，而且展开过程会持续到提取出一个具体的非类Promise的最终值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">      <span class="title function_">cb</span>( <span class="number">42</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这可以工作，但只是因为幸运而已</span></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfilled</span>(<span class="params">val</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( val ); <span class="comment">// 42</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rejected</span>(<span class="params">err</span>)&#123;</span><br><span class="line">      <span class="comment">// 永远不会到达这里</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Promise.resolve(..)提供了可信任的Promise封装工具，可以链接使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要只是这么做：</span></span><br><span class="line"><span class="title function_">foo</span>( <span class="number">42</span> )</span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而要这么做：</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>( <span class="title function_">foo</span>( <span class="number">42</span> ) )</span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h5 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h5><blockquote><p>我们可以把多个Promise连接到一起以表示一系列异步步骤</p><p>这种方式可以实现的关键在于以下两个Promise固有行为特性：</p><p>• 每次你对Promise调用then(..)，它都会创建并返回一个新的Promise，我们可以将其链接起来；</p><p>• 不管从then(..)调用的完成回调（第一个参数）返回的值是什么，它都会被自动设置为被链接Promise（第一点中的）的完成。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>( <span class="number">21</span> );</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );    <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用值42完成连接的promise</span></span><br><span class="line">    <span class="keyword">return</span> v * <span class="number">2</span>;</span><br><span class="line">&#125; )</span><br><span class="line"><span class="comment">// 这里是链接的promise</span></span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );    <span class="comment">// 42</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>在这些例子中，一步步传递的值是可选的。如果不显式返回一个值，就会隐式返回undefined，并且这些promise仍然会以同样的方式链接在一起。</p><p><strong>如果这个Promise链中的某个步骤出错了怎么办？</strong></p><p>这意味着可能在链的任意位置捕捉到这样的错误，而这个捕捉动作在某种程度上就相当于在这一位置将整条链“重置”回了正常运作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 步骤1：</span></span><br><span class="line"><span class="title function_">request</span>( <span class="string">&quot;http://some.url.1/&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2：</span></span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">response1</span>)&#123;</span><br><span class="line">    foo.<span class="title function_">bar</span>(); <span class="comment">// undefined，出错！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 永远不会到达这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>( <span class="string">&quot;http://some.url.2/? v=&quot;</span> + response1 );</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤3：</span></span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfilled</span>(<span class="params">response2</span>)&#123;</span><br><span class="line">      <span class="comment">// 永远不会到达这里</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 捕捉错误的拒绝处理函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rejected</span>(<span class="params">err</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( err );</span><br><span class="line">      <span class="comment">// 来自foo.bar()的错误TypeError</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤4：</span></span><br><span class="line">.<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( msg );           <span class="comment">// 42</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><blockquote><p>调用then(..)时的完成处理函数或拒绝处理函数如果抛出异常，都会导致（链中的）下一个promise因这个异常而立即被拒绝。</p><p>调用promise的then(..)，并且只传入一个完成处理函数，一个默认拒绝处理函数就会顶替上来。默认拒绝处理函数只是把错误重新抛出，这最终会使得链条下一步用同样的错误理由拒绝</p><p>实际上啥都不传也会有一个默认的处理成功的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>第2步出错后，第3步的拒绝处理函数会捕捉到这个错误。拒绝处理函数的返回值（这段代码中是42），如果有的话，会用来完成交给下一个步骤（第4步）的promise，这样，这个链现在就回到了完成状态。</p><h5 id="术语：决议、完成以及拒绝"><a href="#术语：决议、完成以及拒绝" class="headerlink" title="术语：决议、完成以及拒绝"></a>术语：决议、完成以及拒绝</h5><blockquote><p>对于术语决议（resolve）、完成（fulfill）和拒绝（reject），在更深入学习Promise之前，我们还有一些模糊之处需要澄清。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">X, Y</span>)&#123;</span><br><span class="line">    <span class="comment">// X()用于完成</span></span><br><span class="line">    <span class="comment">// Y()用于拒绝</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><p>第一个通常用于标识Promise已经完成，第二个总是用于标识Promise被拒绝.ES6规范将这两个回调命名为onFulfilled(..)和onRejected(..)，所以这两个术语很准确。</p><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><blockquote><p>错误处理最自然的形式就是同步的try..catch结构。遗憾的是，它只能是同步的，无法用于异步代码模式</p></blockquote><p>如果通过无效的方式使用Promise API，并且出现一个错误阻碍了正常的Promise构造，那么结果会得到一个立即抛出的异常，而不是一个被拒绝的Promise。</p><p>例子：new Promise(null)、Promise.all()、Promise.race(42)，等等</p><p>如果一开始你就没能有效使用Promise API真正构造出一个Promise，那就无法得到一个被拒绝的Promise！</p><p>为了避免丢失被忽略和抛弃的Promise错误，一些开发者表示，Promise链的一个最佳实践就是最后总以一个catch(..)结束:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>( <span class="number">42</span> );</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfilled</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">      <span class="comment">// 数字没有string函数，所以会抛出错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( msg.<span class="title function_">toLowerCase</span>() );</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">catch</span>( handleErrors );</span><br></pre></td></tr></table></figure><p>如果handleErrors(..)本身内部也有错误怎么办呢？</p><h5 id="成功的坑"><a href="#成功的坑" class="headerlink" title="成功的坑"></a>成功的坑</h5><blockquote><p>接下来的内容只是理论上的</p><p>• 默认情况下，Promsie在下一个任务或时间循环tick上（向开发者终端）报告所有拒绝，如果在这个时间点上该Promise上还没有注册错误处理函数。</p><p>• 如果想要一个被拒绝的Promise在查看之前的某个时间段内保持被拒绝状态，可以调用defer()，这个函数优先级高于该Promise的自动错误报告。</p></blockquote><p>如果一个Promise被拒绝的话，默认情况下会向开发者终端报告这个事实（而不是默认为沉默）。可以选择隐式（在拒绝之前注册一个错误处理函数）或者显式（通过defer()）禁止这种报告。在这两种情况下，都是由你来控制误报的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>( <span class="string">&quot;Oops&quot;</span> ).<span class="title function_">defer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo(..)是支持Promise的</span></span><br><span class="line"><span class="title function_">foo</span>( <span class="number">42</span> )</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fulfilled</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rejected</span>(<span class="params">err</span>)&#123;</span><br><span class="line">      <span class="comment">// 处理foo(..)错误</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>创建p的时候，我们知道需要等待一段时间才能使用或查看它的拒绝结果，所以我们就调用defer()，这样就不会有全局报告出现。为了便于链接，defer()只是返回这同一个promise。</p><p>从foo(..)返回的promise立刻就被关联了一个错误处理函数，所以它也隐式消除了出错全局报告。</p><h5 id="Promise模式"><a href="#Promise模式" class="headerlink" title="Promise模式"></a>Promise模式</h5><blockquote><p><strong>Promise.all</strong>([ .. ])需要一个参数，是一个数组，通常由Promise实例组成。从Promise. all([ .. ])调用返回的promise会收到一个完成消息（代码片段中的msg）。这是一个由所有传入promise的完成消息组成的数组，与指定的顺序一致（与完成顺序无关）。</p><p>数组中的值可以是Promise、thenable，甚至是立即值</p></blockquote><blockquote><p><strong>Promise.race</strong>([ .. ])就会完成；一旦有任何一个Promise决议为拒绝，它就会拒绝。</p></blockquote><p>变体模式</p><p>• none([ .. ])这个模式类似于all([ .. ])，不过完成和拒绝的情况互换了。所有的Promise都要被拒绝，即拒绝转化为完成值，反之亦然。</p><p>• any([ .. ])这个模式与all([ .. ])类似，但是会忽略拒绝，所以只需要完成一个而不是全部。</p><p>• first([ .. ])这个模式类似于与any([ .. ])的竞争，即只要第一个Promise完成，它就会忽略后续的任何拒绝和完成。</p><p>• last([ .. ])这个模式类似于first([ .. ])，但却是只有最后一个完成胜出。</p><p>自己实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polyfill安全的guard检查</span></span><br><span class="line"><span class="keyword">if</span> (! <span class="title class_">Promise</span>.<span class="property">first</span>) &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="property">first</span> = <span class="keyword">function</span>(<span class="params">prs</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">          <span class="comment">// 在所有promise上循环</span></span><br><span class="line">          prs.<span class="title function_">forEach</span>( <span class="keyword">function</span>(<span class="params">pr</span>)&#123;</span><br><span class="line">              <span class="comment">// 把值规整化</span></span><br><span class="line">              <span class="title class_">Promise</span>.<span class="title function_">resolve</span>( pr )</span><br><span class="line">              <span class="comment">// 不管哪个最先完成，就决议主promise</span></span><br><span class="line">              .<span class="title function_">then</span>( resolve );</span><br><span class="line">          &#125; );</span><br><span class="line">      &#125; );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有的promise都被拒绝，就在主promise上调用reject()。这个实现留给你当练习。</p><h5 id="then-和catch"><a href="#then-和catch" class="headerlink" title="then(..)和catch(..)"></a>then(..)和catch(..)</h5><blockquote><p>catch捕获错误后，设置返回值。那么Promise链后面还能获取到catch的返回值，如果 onReject函数存在语法错误，会走catch语句</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;reject&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没错误：&#x27;</span>,res)   </span><br><span class="line">    &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错！&#x27;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有错误：&#x27;</span>,err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;catch&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下一轮：&#x27;</span>, res)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 出错！ reject</span></span><br><span class="line"><span class="comment">// 下一轮： reject</span></span><br></pre></td></tr></table></figure><p>基于回调的工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polyfill安全的guard检查</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Promise</span>.<span class="property">wrap</span>) &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="property">wrap</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> args = [].<span class="property">slice</span>.<span class="title function_">call</span>( <span class="variable language_">arguments</span> );</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">                  fn.<span class="title function_">apply</span>(</span><br><span class="line">                    <span class="literal">null</span>,</span><br><span class="line">                    args.<span class="title function_">concat</span>( <span class="keyword">function</span>(<span class="params">err, v</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="title function_">reject</span>( err );</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>( v );</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; )</span><br><span class="line">                  );</span><br><span class="line">              &#125; );</span><br><span class="line">          &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="title class_">Promise</span>.<span class="title function_">wrap</span>( ajax );</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>( <span class="string">&quot;http://some.url.1/&quot;</span> )</span><br><span class="line">.<span class="title function_">then</span>( .. )</span><br><span class="line">..</span><br></pre></td></tr></table></figure><p>Promise.wrap(..)并不产出Promise。它产出的是一个将产生Promise的函数。在某种意义上，产生Promise的函数可以看作是一个Promise工厂。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><blockquote><p>一个函数一旦开始执行，就会运行到结束，期间不会有其他代码能够打断它并插入其间。</p><p>生成器就是一类特殊的函数，可以一次或多次启动和停止，并不一定非得要完成。</p></blockquote><h5 id="迭代消息传递"><a href="#迭代消息传递" class="headerlink" title="迭代消息传递"></a>迭代消息传递</h5><blockquote><p>除了能够接受参数并提供返回值之外，生成器甚至提供了更强大更引人注目的内建消息输入输出能力，通过yield和next(..)实现。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = x * (<span class="keyword">yield</span>);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = <span class="title function_">foo</span>( <span class="number">6</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动foo(..)</span></span><br><span class="line">it.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = it.<span class="title function_">next</span>( <span class="number">7</span> );</span><br><span class="line"></span><br><span class="line">res.<span class="property">value</span>;     <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><blockquote><p>根据你的视角不同，yield和next(..)调用有一个不匹配。一般来说，需要的next(..)调用要比yield语句多一个，前面的代码片段有一个yield和两个next(..)调用。</p><p>因为第一个next(..)总是启动一个生成器，并运行到第一个yield处。不过，是第二个next(..)调用完成第一个被暂停的yield表达式，第三个next(..)调用完成第二个yield，以此类推。</p></blockquote><p><strong>注意：在生成器的起始处我们调用第一个next()时，还没有暂停的yield来接受这样一个值。规范和所有兼容浏览器都会默默丢弃传递给第一个next()的任何东西。因此，启动生成器时一定要用不带参数的next()。</strong></p><p>如果你的生成器中没有return的话——在生成器中和在普通函数中一样，return当然不是必需的——总有一个假定的/隐式的return;（也就是return undefined;），<strong>它会在默认情况下回答最后的it.next(7)调用提出的问题</strong>。</p><h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><blockquote><p>它的接口中有一个next()方法。而与其紧密相关的一个术语是iterable（可迭代），即指一个包含可以在其值上迭代的迭代器的对象。</p><p>其名称是专门的ES6符号值Symbol.iterator。调用这个函数时，它会返回一个迭代器。通常每次调用会返回一个全新的迭代器，虽然这一点并不是必须的。</p></blockquote><p>生成器实现标准的迭代器接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// for..of循环需要</span></span><br><span class="line">      [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="variable language_">this</span>; &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 标准迭代器接口方法</span></span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">              nextVal = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>:<span class="literal">false</span>, <span class="attr">value</span>:nextVal &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span>;     <span class="comment">// 1</span></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span>;     <span class="comment">// 9</span></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span>;     <span class="comment">// 33</span></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span>;     <span class="comment">// 105</span></span><br></pre></td></tr></table></figure><p>内置迭代器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = a[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line">it.<span class="title function_">next</span>().<span class="property">value</span>;    <span class="comment">// 1</span></span><br><span class="line">it.<span class="title function_">next</span>().<span class="property">value</span>;    <span class="comment">// 3</span></span><br><span class="line">it.<span class="title function_">next</span>().<span class="property">value</span>;    <span class="comment">// 5</span></span><br><span class="line">..</span><br></pre></td></tr></table></figure><p>前面的代码中列出了定义的something，你可能已经注意到了这一行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for..of循环需要</span></span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="variable language_">this</span>; &#125;</span><br></pre></td></tr></table></figure><p>这段有点令人疑惑的代码是在将something的值（迭代器something的接口）也构建成为一个iterable。现在它既是iterable，也是迭代器。然后我们把something传给for..of循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something) &#123;</span><br><span class="line">    ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成器迭代器"><a href="#生成器迭代器" class="headerlink" title="生成器迭代器"></a>生成器迭代器</h5><blockquote><p>可以把生成器看作一个值的生产者，我们通过迭代器接口的next()调用一次提取出一个值。</p><p>严格说来，生成器本身并不是iterable，尽管非常类似——当你执行一个生成器，就得到了一个迭代器：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params"></span>)&#123; .. &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = <span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>可以通过生成器实现前面的这个something无限数字序列生产者，类似这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">something</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          nextVal = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">yield</span> nextVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• 为什么不能用for (var v of something) .. ？因为这里的something是生成器，并不是iterable。我们需要调用something()来构造一个生产者供for..of循环迭代。</p><p>• something()调用产生一个迭代器，但for..of循环需要的是一个iterable，对吧？是的。生成器的迭代器也有一个Symbol.iterator函数，基本上这个函数做的就是return this，和我们前面定义的iterable something一样。换句话说，生成器的迭代器也是一个iterable！</p><h5 id="停止生成器"><a href="#停止生成器" class="headerlink" title="停止生成器"></a>停止生成器</h5><blockquote><p>something()生成器的迭代器实例在循环中的break调用之后就永远留在了挂起状态。</p><p>其实有一个隐藏的特性会帮助你管理此事。for..of循环的“异常结束”（也就是“提前终止”），通常由break、return或者未捕获异常引起，会向生成器的迭代器发送一个信号使其终止。</p></blockquote><p>如果在生成器内有try..finally语句，它将总是运行，即使生成器已经外部结束。如果需要清理资源的话（数据库连接等），这一点非常有用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">something</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">              nextVal = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              nextVal = (<span class="number">3</span> ＊ nextVal) + <span class="number">6</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">yield</span> nextVal;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理子句</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;cleaning up! &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前的例子中，for..of循环内的break会触发finally语句。但是，也可以在外部通过return(..)手工终止生成器的迭代器实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> it = <span class="title function_">something</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> it) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( v );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不要死循环！</span></span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="comment">// 完成生成器的迭代器</span></span><br><span class="line">          it.<span class="keyword">return</span>( <span class="string">&quot;Hello World&quot;</span> ).<span class="property">value</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 这里不需要break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 9 33105 321969</span></span><br><span class="line"><span class="comment">// cleaning up!</span></span><br><span class="line"><span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><h5 id="异步迭代生成器"><a href="#异步迭代生成器" class="headerlink" title="异步迭代生成器"></a>异步迭代生成器</h5><p>如果想要通过生成器来表达同样的任务流程控制，可以这样实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(</span><br><span class="line">      <span class="string">&quot;http://some.url.1/? x=&quot;</span> + x + <span class="string">&quot;&amp;y=&quot;</span> + y,</span><br><span class="line">      <span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              <span class="comment">// 向*main()抛出一个错误</span></span><br><span class="line">              it.<span class="keyword">throw</span>( err );</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 用收到的data恢复＊main()</span></span><br><span class="line">              it.<span class="title function_">next</span>( data );</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>( <span class="number">11</span>, <span class="number">31</span> );</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( text );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>( err );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> it = <span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里启动！</span></span><br><span class="line">  it.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><p>这是如何工作的呢？调用foo(..)是异步完成的，难道try..catch不是无法捕获异步错误，就像我们在第3章中看到的一样吗？</p><p>我们已经看到yield是如何让赋值语句暂停来等待foo(..)完成，使得响应完成后可以被赋给text。精彩的部分在于yield暂停也使得生成器能够捕获错误。通过这段前面列出的代码把错误抛出到生成器中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 向*main()抛出一个错误</span></span><br><span class="line">      it.<span class="keyword">throw</span>( err );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成器yield暂停的特性意味着我们不仅能够从异步函数调用得到看似同步的返回值，还可以同步捕获来自这些异步函数调用的错误！</p><h5 id="生成器-Promise"><a href="#生成器-Promise" class="headerlink" title="生成器+Promise"></a>生成器+Promise</h5><blockquote><p>ES6中最完美的世界就是生成器（看似同步的异步代码）和Promise（可信任可组合）的结合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">&quot;http://some.url.1/? x=&quot;</span> + x + <span class="string">&quot;&amp;y=&quot;</span> + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="keyword">yield</span> <span class="title function_">foo</span>( <span class="number">11</span>, <span class="number">31</span> );</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( text );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>( err );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> it = <span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = it.<span class="title function_">next</span>().<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待promise p决议</span></span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">text</span>)&#123;</span><br><span class="line">      it.<span class="title function_">next</span>( text );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">      it.<span class="keyword">throw</span>( err );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用专门设计用来以我们前面展示的方式运行Promise-yielding生成器的工具。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在此感谢Benjamin Gruenbaum（@benjamingr on GitHub）的巨大改进！</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">gen</span>) &#123;</span><br><span class="line">    <span class="comment">// 去除第一个参数</span></span><br><span class="line">    <span class="keyword">var</span> args = [].<span class="property">slice</span>.<span class="title function_">call</span>( <span class="variable language_">arguments</span>, <span class="number">1</span>), it;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前上下文中初始化生成器</span></span><br><span class="line">    it = gen.<span class="title function_">apply</span>( <span class="variable language_">this</span>, args );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个promise用于生成器完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">        .<span class="title function_">then</span>( <span class="keyword">function</span> <span class="title function_">handleNext</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="comment">// 对下一个yield出的值运行</span></span><br><span class="line">            <span class="keyword">var</span> next = it.<span class="title function_">next</span>( value );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">function</span> <span class="title function_">handleResult</span>(<span class="params">next</span>)&#123;</span><br><span class="line">                <span class="comment">// 生成器运行完毕了吗？</span></span><br><span class="line">                <span class="keyword">if</span> (next.<span class="property">done</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> next.<span class="property">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 否则继续运行</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>( next.<span class="property">value</span> )</span><br><span class="line">                    .<span class="title function_">then</span>(</span><br><span class="line">                        <span class="comment">// 成功就恢复异步循环，把决议的值发回生成器</span></span><br><span class="line">                        handleNext,</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 如果value是被拒绝的promise，</span></span><br><span class="line">                        <span class="comment">// 就把错误传回生成器进行出错处理</span></span><br><span class="line">                        <span class="keyword">function</span> <span class="title function_">handleErr</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">                            it.<span class="keyword">throw</span>( err )</span><br><span class="line">                            .<span class="title function_">then</span>( handleResult );</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(next);</span><br><span class="line">        &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上边例子使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>( main );</span><br></pre></td></tr></table></figure><h5 id="ES7-async与await"><a href="#ES7-async与await" class="headerlink" title="ES7:async与await?"></a>ES7:async与await?</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(</span><br><span class="line">      <span class="string">&quot;http://some.url.1/? x=&quot;</span> + x + <span class="string">&quot;&amp;y=&quot;</span> + y</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="keyword">await</span> <span class="title function_">foo</span>( <span class="number">11</span>, <span class="number">31</span> );</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( text );</span><br><span class="line">    &#125;</span><br><span class="line">                <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>( err );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="程序性能"><a href="#程序性能" class="headerlink" title="程序性能"></a>程序性能</h3><h4 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h4><blockquote><p>如果你有一些处理密集型的任务要执行，但不希望它们都在主线程运行（这可能会减慢浏览器/UI），可能你就会希望JavaScript能够以多线程的方式运行。</p><p>浏览器这样的环境，很容易提供多个JavaScript引擎实例，各自运行在自己的线程上，这样你可以在每个线程上运行不同的程序。程序中每一个这样的独立的多线程部分被称为一个（Web）Worker。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w1 = <span class="keyword">new</span> <span class="title class_">Worker</span>( <span class="string">&quot;http://some.url.1/mycoolworker.js&quot;</span> );</span><br></pre></td></tr></table></figure><p>这个<strong>URL应该指向一个JavaScript文件的位置</strong>，还可以通过提供一个<strong>Blob URL</strong>（另外一个HTML5特性）创建一个在线Worker（Inline Worker)，本质上就是一个存储在单个（二进制）值中的在线文件</p><p>Worker之间以及<strong>它们和主程序之间，不会共享任何作用域或资源</strong>，那会把所有多线程编程的噩梦带到前端领域，而是通过一个基本的<strong>事件消息机制相互联系</strong>。</p><p>Worker w1对象是一个事件侦听者和触发者，可以通过订阅它来获得这个Worker发出的事件以及发送事件给这个Worker。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 worker 消息发送</span></span><br><span class="line">w1.<span class="title function_">addEventListener</span>( <span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">    <span class="comment">// evt.data</span></span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">// 主动向worker 发送消息</span></span><br><span class="line">w1.<span class="title function_">postMessage</span>( <span class="string">&quot;something cool to say&quot;</span> );</span><br></pre></td></tr></table></figure><p>Worker内部，收发消息是完全对称的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &quot;mycoolworker.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>( <span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line"><span class="comment">// evt.data</span></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="title function_">postMessage</span>( <span class="string">&quot;a really cool reply&quot;</span> );</span><br></pre></td></tr></table></figure><p>Worker 也可以实例化子Worker，称为 subworker.有时候吧这个工作交给主worker创建其他worker处理部分很有用，不幸的是，到写作本书时为止，Chrome还不支持subworker，不过Firefox支持。</p><h5 id="终止Worker"><a href="#终止Worker" class="headerlink" title="终止Worker"></a><strong>终止Worker</strong></h5><blockquote><p>突然终止Worker线程不会给它任何机会完成它的工作或者清理任何资源。这就类似于通过关闭浏览器标签页来关闭页面。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w1.<span class="title function_">terminate</span>()</span><br></pre></td></tr></table></figure><p>如果浏览器中有两个或多个页面（或同一页上的多个tab!）试图从同一个文件URL创建Worker，那么最终得到的实际上是完全独立的Worker。后面我们会简单介绍如何共享Worker。</p><h5 id="Worker环境"><a href="#Worker环境" class="headerlink" title="Worker环境"></a><strong>Worker环境</strong></h5><blockquote><p>在Worker内部是无法访问主程序的任何资源的。这意味着你不能访问它的任何全局变量，也不能访问页面的DOM或者其他资源。这是一个完全独立的线程</p><p>但是，你可以执行<strong>网络操作（Ajax、WebSockets）以及设定定时器</strong>。还有，Worker可以访问几个重要的全局变量和功能的本地复本，包括<strong>navigator、location、JSON和applicationCache</strong>。</p></blockquote><p>可以通过importScripts(..)向Worker加载额外的JavaScript脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Worker内部</span></span><br><span class="line"><span class="title function_">importScripts</span>( <span class="string">&quot;foo.js&quot;</span>, <span class="string">&quot;bar.js&quot;</span> );</span><br></pre></td></tr></table></figure><p>这些脚本加载是同步的。也就是说，importScripts(..)调用会阻塞余下Worker的执行，直到文件加载和执行完成。</p><p>Web Worker通常应用于哪些方面呢？</p><p>• 处理密集型数学计算</p><p>• 大数据集排序</p><p>• 数据处理（压缩、音频分析、图像处理等）</p><p>• 高流量网络通信</p><h5 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h5><blockquote><p>你可能已经注意到这些应用中的大多数有一个共性，就是需要在线程之间通过事件机制传递大量的信息，可能是双向的。</p></blockquote><p>早期 Worker中，唯一的选择就是把所有数据序列化到一个字符串值中。除了双向序列化导致的速度损失之外，另一个主要的负面因素是数据需要被复制，这意味着两倍的内存使用（及其引起的垃圾收集方面的波动）。</p><p><strong>结构化克隆算法</strong></p><blockquote><p>如果要传递一个对象，可以<strong>使用结构化克隆算法把这个对象复制到另一边</strong>。这个算法非常高级，甚至可以处理要复制的对象有循环引用的情况。</p></blockquote><p><strong>Transferable对象</strong></p><blockquote><p>对于大数据集而言，就是使用Transferable对象。这时发生的是<strong>对象所有权的转移</strong>，数据本身并没有移动。一旦你把对象传递到一个Worker中，在原来的位置上，它就变为空的或者是不可访问的，这样就消除了多线程编程作用域共享带来的混乱。当然，所有权传递是可以双向进行的。</p></blockquote><p>如果选择Transferable对象的话，其实不需要做什么。任何实现了Transferable接口（<a href="http://developer.mozilla.org/en-US/docs/Web/API/Transferable%EF%BC%89%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%B1%E8%87%AA%E5%8A%A8%E6%8C%89%E7%85%A7%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BC%A0%E8%BE%93%EF%BC%88Firefox%E5%92%8CChrome%E9%83%BD%E6%94%AF%E6%8C%81%EF%BC%89%E3%80%82">http://developer.mozilla.org/en-US/docs/Web/API/Transferable）的数据结构就自动按照这种方式传输（Firefox和Chrome都支持）。</a></p><p>下面是如何使用postMessage(..)发送一个Transferable对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如foo是一个Uint8Array</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">postMessage</span>( foo.<span class="property">buffer</span>, [ foo.<span class="property">buffer</span> ] );</span><br></pre></td></tr></table></figure><p>不支持Transferable对象的浏览器就降级到结构化克隆，这会带来性能下降而不是彻底的功能失效。</p><h5 id="共享Worker"><a href="#共享Worker" class="headerlink" title="共享Worker"></a>共享Worker</h5><blockquote><p>如果你的站点或app允许加载同一个页面的多个tab（一个常见的功能），那你可能非常希望通过防止重复专用Worker来降低系统的资源使用。在这一方面最常见的有限资源就是socket网络连接，因为浏览器限制了到同一个主机的同时连接数目。当然，限制来自于同一客户端的连接数也减轻了你的资源压力。</p></blockquote><p>这称为SharedWorker，可通过下面的方式创建（只有Firefox和Chrome支持这一功能）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w1 = <span class="keyword">new</span> <span class="title class_">SharedWorker</span>( <span class="string">&quot;http://some.url.1/mycoolworker.js&quot;</span> );</span><br></pre></td></tr></table></figure><p>Worker需要通过某种方式来得知消息来自于哪个程序。这个唯一标识符称为端口（port），可以类比网络socket的端口。因此，调用程序必须使用Worker的port对象用于通信：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w1.<span class="property">port</span>.<span class="title function_">addEventListener</span>( <span class="string">&quot;message&quot;</span>, handleMessages );</span><br><span class="line"></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"></span><br><span class="line">w1.<span class="property">port</span>.<span class="title function_">postMessage</span>( <span class="string">&quot;something cool&quot;</span> );</span><br></pre></td></tr></table></figure><p>端口连接必须初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w1.<span class="property">port</span>.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><p>在共享Worker内部，必须要处理额外的一个事件：”connect”。这个事件为这个特定的连接提供了端口对象。保持多个连接独立的最简单办法就是使用port上的闭包就像下面的代码一样，把这个链接上的事件侦听和传递定义在”connect”事件的处理函数内部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在共享Worker内部</span></span><br><span class="line"><span class="title function_">addEventListener</span>( <span class="string">&quot;connect&quot;</span>, <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">  <span class="comment">// 这个连接分配的端口</span></span><br><span class="line">  <span class="keyword">var</span> port = evt.<span class="property">ports</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  port.<span class="title function_">addEventListener</span>( <span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line"></span><br><span class="line">    port.<span class="title function_">postMessage</span>( .. );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125; );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化端口连接</span></span><br><span class="line">  port.<span class="title function_">start</span>();</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h5 id="模拟Web-Worker"><a href="#模拟Web-Worker" class="headerlink" title="模拟Web Worker"></a>模拟Web Worker</h5><blockquote><p>为了在缺乏对此支持的老浏览器中运行代码</p><p>因为Worker是一种API而不是语法，所以我们可以作为扩展来模拟它。如果浏览器不支持Worker，那么从性能的角度来说是没法模拟多线程的。通常认为Iframe提供了并行环境，但是在所有的现代浏览器中，它们实际上都是和主页面运行在同一个线程中的，所以并不足以模拟并发。</p></blockquote><p><a href="https://gist.github.com/getify/1b26accb1a09aa53ad25">模拟worker</a></p><h5 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h5><blockquote><p>单指令多数据（SIMD）是一种数据并行（data parallelism）方式，与Web Worker的任务并行（task parallelism）相对，因为这里的重点实际上不再是把程序逻辑分成并行的块，而是并行处理数据的多个位。</p><p>通过SIMD，线程不再提供并行。取而代之的是，现代CPU通过数字“向量”（特定类型的数组），以及可以在所有这些数字上并行操作的指令，来提供SIMD功能。这是利用低级指令级并行的底层运算。</p></blockquote><h5 id="asm-js"><a href="#asm-js" class="headerlink" title="asm.js"></a>asm.js</h5><blockquote><p>asm.js（<a href="http://asmjs.org)这个标签是指javascript语言中可以高度优化的一个子集.通过小心避免某些难以优化的机制和模式(垃圾收集、类型强制转换,等等)/">http://asmjs.org）这个标签是指JavaScript语言中可以高度优化的一个子集。通过小心避免某些难以优化的机制和模式（垃圾收集、类型强制转换，等等）</a>, asm.js风格的代码可以被JavaScript引擎识别并进行特别激进的底层优化。</p></blockquote><h4 id="性能测试与调优"><a href="#性能测试与调优" class="headerlink" title="性能测试与调优"></a>性能测试与调优</h4><h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><blockquote><p>如果被问到如何测试某个运算的速度（执行时间），绝大多数JavaScript开发者都会从类似下面的代码开始：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">getTime</span>(); <span class="comment">// 或者Date.now()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行一些操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> end = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&quot;Duration:&quot;</span>, (end - start) );</span><br></pre></td></tr></table></figure><p>这个方案有很多错误。不管报告的时长是多少，你能知道的唯一一点就是，这个运算的这次特定的运行消耗了大概这么长时间。而它是不是总是以这样的速度运行，你基本上一无所知。你不知道引擎或系统在这个时候有没有受到什么影响，以及其他时候这个运算会不会运行得更快。</p><h5 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h5><blockquote><p>“好吧，”你现在会说，“那就用一个循环把它包起来，这样整个测试的运行时间就会更长一些了。”如果重复一个运算100次，然后整个循环报告共消耗了137ms，那你就可以把它除以100，得到每次运算的平均用时为1.37ms，是这样吗？</p></blockquote><p>并不完全是这样。</p><p>简单的数学平均值绝对不足以对你要外推到整个应用范围的性能作出判断。迭代100次，即使只有几个（过高或过低的）的异常值也可以影响整个平均值，然后在重复应用这个结论的时候，你还会扩散这个误差，产生更大的欺骗性。</p><p>你也可以不以固定次数执行运算，转而循环运行测试，直到达到某个固定的时间。这可能会更可靠一些，但如何确定要执行多长时间呢？你可能会猜测，执行时间应该是你的运算执行的单次时长的若干倍。错。</p><p>实际上，重复执行的时间长度应该根据使用的定时器的精度而定，专门用来最小化不精确性。定时器的精度越低，你需要运行的时间就越长，这样才能确保错误率最小化。15ms的定时器对于精确的性能测试来说是非常差劲的。要最小化它的不确定性（也就是出错率）到小于1%，需要把你的每轮测试迭代运行750ms。而1ms定时器时只需要每轮运行50ms就可以达到同样的置信度。</p><h5 id="Benchmark-js"><a href="#Benchmark-js" class="headerlink" title="Benchmark.js"></a>Benchmark.js</h5><blockquote><p>幸运的是，像John-David Dalton和Mathias Bynens这样的聪明人了解这些概念，并编写了一个统计学上有效的性能测试工具，名为Benchmark.js（<a href="http://benchmarkjs.com/%EF%BC%89%E3%80%82%E5%9B%A0%E6%AD%A4%EF%BC%8C%E5%AF%B9%E4%BA%8E%E8%BF%99%E4%B8%AA%E6%82%AC%E8%80%8C%E6%9C%AA%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E6%88%91%E7%9A%84%E7%AD%94%E6%A1%88%E5%B0%B1%E6%98%AF%EF%BC%9A%E2%80%9C%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E5%B0%B1%E5%A5%BD%E4%BA%86%E3%80%82%E2%80%9D">http://benchmarkjs.com/）。因此，对于这个悬而未决的问题，我的答案就是：“使用这个工具就好了。”</a></p></blockquote><p>使用Benchmark.js来运行一个快速的性能测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 要测试的运算</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bench = <span class="keyword">new</span> <span class="title class_">Benchmark</span>(</span><br><span class="line">  <span class="string">&quot;foo test&quot;</span>,             <span class="comment">// 测试名称</span></span><br><span class="line">    foo,                    <span class="comment">// 要测试的函数（也即内容）</span></span><br><span class="line">                &#123;</span><br><span class="line">        <span class="comment">// ..             // 可选的额外选项（参见文档）</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">bench.<span class="property">hz</span>;                <span class="comment">// 每秒运算数</span></span><br><span class="line">bench.<span class="property">stats</span>.<span class="property">moe</span>;         <span class="comment">// 出错边界</span></span><br><span class="line">bench.<span class="property">stats</span>.<span class="property">variance</span>;    <span class="comment">// 样本方差</span></span><br><span class="line"><span class="comment">// ..</span></span><br></pre></td></tr></table></figure><h5 id="环境为王"><a href="#环境为王" class="headerlink" title="环境为王"></a>环境为王</h5><blockquote><p>对特定的性能测试来说，不要忘了检查测试环境，特别是比较任务Ⅹ和Y这样的比对测试。仅仅因为你的测试显示Ⅹ比Y快，并不能说明结论Ⅹ比Y快就有实际的意义。</p></blockquote><h5 id="引擎优化"><a href="#引擎优化" class="headerlink" title="引擎优化"></a>引擎优化</h5><blockquote><p>你无法可靠地推断，如果在你的独立测试中Ⅹ比Y要快上10μs，就意味着Ⅹ总是比Y要快，就应该总是使用Ⅹ。性能并不是这样发挥效力的。它要比这复杂得多。</p></blockquote><h5 id="jsPerf-com"><a href="#jsPerf-com" class="headerlink" title="jsPerf.com"></a>jsPerf.com</h5><blockquote><p>尽管在所有的JavaScript运行环境下，Benchmark.js都可用于测试代码的性能，但有一点一定要强调，如果你想要得到可靠的测试结论的话，就需要在很多不同的环境（桌面浏览器、移动设备，等等）中测试汇集测试结果。</p></blockquote><p>有一个很棒的网站正是因这样的需求而诞生的，名为jsPerf（<a href="http://jsperf.com).它使用我们前面介绍的benchmark.js库来运行统计上精确可靠的测试,并把测试结果放在一个公开可得的url上,你可以把这个url转发给别人./">http://jsperf.com）。它使用我们前面介绍的Benchmark.js库来运行统计上精确可靠的测试，并把测试结果放在一个公开可得的URL上，你可以把这个URL转发给别人。</a></p><p>每次测试运行的时候，测试结果就会被收集并持久化，累积的测试结果会被图形化，并展示到一个页面上以供查看。</p><h5 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h5><blockquote><p>简单地说，尾调用就是一个出现在另一个函数“结尾”处的函数调用。这个调用结束后就没有其余事情要做了（除了可能要返回结果值）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">foo</span>( y + <span class="number">1</span> );     <span class="comment">// 尾调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="title function_">bar</span>( <span class="number">40</span> );    <span class="comment">// 非尾调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">baz</span>();                       <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>不详细谈那么多本质细节的话，调用一个新的函数需要额外的一块预留内存来管理调用栈，称为栈帧。所以前面的代码一般会同时需要为每个baz()、bar(..)和foo(..)保留一个栈帧。</p><p>然而，如果支持TCO的引擎能够意识到foo(y+1)调用位于尾部，这意味着bar(..)基本上已经完成了，那么在调用foo(..)时，它就不需要创建一个新的栈帧，而是可以重用已有的bar(..)的栈帧。这样不仅速度更快，也更节省内存。</p><p>在简单的代码片段中，这类优化算不了什么，但是在处理递归时，这就解决了大问题，特别是如果递归可能会导致成百上千个栈帧的时候。有了TCO，引擎可以用同一个栈帧执行所有这类调用！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;LHS与RHS&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LHS和RHS的含义是“赋值操作的左侧或右侧”并不一定意味着就是“=赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最好将其理解为“赋值操作的目标是谁（LHS）”以及“谁是赋值操作的源头（RHS）”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;title function_&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;1．找到其中所有的LHS查询。（这里有3处！）&lt;/p&gt;
&lt;p&gt;2．找到其中所有的RHS查询。（这里有4处！）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ReferenceError&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果RHS查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出ReferenceError异常.&lt;/p&gt;
&lt;p&gt;相较之下，当引擎执行LHS查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非“严格模式”下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;TypeError&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReferenceError同作用域判别失败相关，而TypeError则代表作用域判别成功了，但是对结果的操作是非法或不合理的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="js" scheme="https://wyf195075595.github.io/tags/js/"/>
    
  </entry>
  
</feed>
