<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  <subtitle>前端小趴菜</subtitle>
  <link href="https://wyf195075595.github.io/atom.xml" rel="self"/>
  
  <link href="https://wyf195075595.github.io/"/>
  <updated>2023-11-02T02:24:04.310Z</updated>
  <id>https://wyf195075595.github.io/</id>
  
  <author>
    <name>王不留行</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>虚拟机安装Ubuntu ssh 连接</title>
    <link href="https://wyf195075595.github.io/2023/11/01/programming/linux/ubuntu/"/>
    <id>https://wyf195075595.github.io/2023/11/01/programming/linux/ubuntu/</id>
    <published>2023-11-01T02:23:10.000Z</published>
    <updated>2023-11-02T02:24:04.310Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ubuntu 与 conteos 最大区别就是 Ubuntu 安装后自带操作界面。很流畅，虽然conteos 也能安装界面但是不好用，卡的一批。然后就是包管理工具，编辑 等一些命令不一样</p></blockquote><p>下载好 Ubuntu ISO镜像后，在虚拟机上安装好。登录后发现 连接工具 无法访问 Ubuntu</p><p>​    ubuntu18.04中只默认安装了openssh-client,所以如果想用ssh远程登录ubuntu，需要下载安装openssh-server，并启动ssh服务</p><h3 id="安装-openssh-server"><a href="#安装-openssh-server" class="headerlink" title="安装 openssh-server"></a>安装 openssh-server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><h4 id="编辑配置文件-sshd-config"><a href="#编辑配置文件-sshd-config" class="headerlink" title="编辑配置文件 sshd_config"></a>编辑配置文件 sshd_config</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到：PermitRootLogin prohibit-password 禁用</p><p>添加：PermitRootLogin yes</p><p>配置重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h4 id="防火墙管理"><a href="#防火墙管理" class="headerlink" title="防火墙管理"></a>防火墙管理</h4><p>安装 ufw 系统自带的防火墙管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><p>常用命令</p><ul><li>启用/关闭</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable(开启)/disable(关闭)</span><br><span class="line">sudo ufw default deny</span><br></pre></td></tr></table></figure><ul><li>打开或关闭某个端口打开或关闭某个端口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow smtp　//允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class="line">sudo ufw allow 22/tcp //允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class="line">sudo ufw allow 53 //允许外部访问53端口(tcp/udp)</span><br><span class="line">sudo ufw allow from 192.168.1.100 //允许此IP访问所有的本机端口</span><br><span class="line">sudo ufw allow proto tcp from 192.168.0.1 to 192.168.0.2 port 22 //允许192.168.0.1访问192.168.0.2的22/tcp（ssh）端口</span><br><span class="line">sudo ufw deny smtp //禁止外部访问smtp服务</span><br><span class="line">sudo ufw delete allow smtp //删除上面建立的某条规则</span><br></pre></td></tr></table></figure><ul><li><p>查看防火墙状态</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></li></ul><p>一般用户，只需如下设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br><span class="line">sudo ufw enable</span><br><span class="line">sudo ufw default deny</span><br></pre></td></tr></table></figure><p>以上三条命令已经足够安全了，如果你需要开放某些服务，再使用sudo ufw allow开启。</p><h3 id="vi-常用命令"><a href="#vi-常用命令" class="headerlink" title="vi 常用命令"></a>vi 常用命令</h3><blockquote><p>进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到「插入模式（Insert mode）」再说吧！</p></blockquote><h4 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h4><blockquote><p>ESC 可从插入模式回到命令模式</p></blockquote><ol><li>i    光标当前位置插入</li><li>a   光标位置后面追加</li><li>o   换行追加，插入新的一行</li></ol><h4 id="保存退出"><a href="#保存退出" class="headerlink" title="保存退出"></a>保存退出</h4><p>在命令模式下输入 : 开头</p><ul><li>「w」：在冒号输入字母「w」就可以将文件保存起来。</li><li>「 E」 离开vi</li><li>「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。</li><li>「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</li></ul><h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><blockquote><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p></blockquote><ul><li>按「ctrl」+「b」：屏幕往“后”移动一页。</li><li>按「ctrl」+「f」：屏幕往“前”移动一页。</li><li>按「ctrl」+「u」：屏幕往“后”移动半页。</li><li>按「ctrl」+「d」：屏幕往“前”移动半页。</li><li>按数字「0」：移到文章的开头。</li><li>按「G」：移动到文章的最后。</li><li>按「$」：移动到光标所在行的“行尾”。</li><li>按「^」：移动到光标所在行的“行首”</li><li>按「w」：光标跳到下个字的开头</li><li>按「e」：光标跳到下个字的字尾</li><li>按「b」：光标回到上个字的开头</li><li>按「#l」：光标移到该行的第#个位置，如：5l,56l</li></ul><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li>「x」：每按一次，删除光标所在位置的“后面”一个字符。</li><li>「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。</li><li>「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。</li><li>「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。</li><li>「dd」：删除光标所在行。</li><li>「#dd」：从光标所在行开始删除#行</li></ul><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul><li>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。</li><li>「#yw」：复制#个字到缓冲区</li><li>「yy」：复制光标所在行到缓冲区。</li><li>「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。</li><li>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</li></ul><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><ul><li>「r」：替换光标所在处的字符。</li><li>「R」：替换光标所到之处的字符，直到按下「ESC」键为止</li></ul><h4 id="恢复-撤消-还原上一次操作"><a href="#恢复-撤消-还原上一次操作" class="headerlink" title="恢复/撤消/还原上一次操作"></a>恢复/撤消/还原上一次操作</h4><p>「u」：如果误执行一个命令，可以马上按下「u」，撤消上一个操作。按多次“u”可以执行多次撤消。</p><h4 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h4><ul><li>「cw」：更改光标所在处的字到字尾处</li><li>「c#w」：例如，「c3w」表示更改3个字</li></ul><h4 id="跳至指定的行"><a href="#跳至指定的行" class="headerlink" title="跳至指定的行"></a>跳至指定的行</h4><ul><li>「ctrl」+「g」列出光标所在行的行号。</li><li>「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</li></ul><h4 id="列出行号"><a href="#列出行号" class="headerlink" title="列出行号"></a>列出行号</h4><p>「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</p><h4 id="跳到文件中的某一行"><a href="#跳到文件中的某一行" class="headerlink" title="跳到文件中的某一行"></a>跳到文件中的某一行</h4><p>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</p><h4 id="查找字符"><a href="#查找字符" class="headerlink" title="查找字符"></a>查找字符</h4><ul><li>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。</li><li>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</li></ul><h4 id="vi命令列表"><a href="#vi命令列表" class="headerlink" title="vi命令列表"></a>vi命令列表</h4><ul><li>h    左移光标一个字符</li><li>l    右移光标一个字符</li><li>k    光标上移一行</li><li>j    光标下移一行</li><li>^    光标移动至行首</li><li>0    数字“0”，光标移至文章的开头</li><li>G    光标移至文章的最后</li><li>$    光标移动至行尾</li><li>Ctrl+f    向前翻屏</li><li>Ctrl+b    向后翻屏</li><li>Ctrl+d    向前翻半屏</li><li>Ctrl+u    向后翻半屏</li><li>wq filename    储存正在编辑的文件为filename，并退出vi</li></ul><h3 id="安装-ffmpeg"><a href="#安装-ffmpeg" class="headerlink" title="安装 ffmpeg"></a>安装 ffmpeg</h3><blockquote><p><a href="https://www.myfreax.com/how-to-install-ffmpeg-on-ubuntu-18-04/">参考链接</a></p></blockquote><p>ubuntu 18.04 版本 安装 4.x版本 ffmpeg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/ffmpeg-4</span><br><span class="line"></span><br><span class="line">sudo apt install ffmpeg</span><br><span class="line"></span><br><span class="line">// 下载到多少，突然报网络问题断联，补全下载</span><br><span class="line">sudo apt install ffmpeg --prefix</span><br></pre></td></tr></table></figure><p>如果安装ppa 失败，那么要安装这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><blockquote><p>默认安装的 nodejs 是8版本，连npm都不带，不大行。</p><p><a href="https://nodejs.org/dist/">查询nodejs版本</a>,下载 linux-x64.tar.gz 后缀文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>安装后解压，放到 /usr/local/nodejs-xxx 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nodejs-xxx </span><br></pre></td></tr></table></figure><h3 id="安装-PM2"><a href="#安装-PM2" class="headerlink" title="安装 PM2"></a>安装 PM2</h3><blockquote><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pm2 -g</span><br></pre></td></tr></table></figure><h3 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="设置全局变量"></a>设置全局变量</h3><ol><li><p>临时设置</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/yan/share/usr/local/arm/3.4.1/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>当前用户全局</p><p> 打开 ~/.bashrc,添加下面配置</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/yan/share/usr/local/arm/3.4.1/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>所有用户的全局配置</p><p> 修改 /etc/profile</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/yan/share/usr/local/arm/3.4.1/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>配置修改生效</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source profile</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Ubuntu 与 conteos 最大区别就是 Ubuntu 安装后自带操作界面。很流畅，虽然conteos 也能安装界面但是不好用，卡的一批。然后就是包管理工具，编辑 等一些命令不一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载好 Ubunt</summary>
      
    
    
    
    <category term="linux" scheme="https://wyf195075595.github.io/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="https://wyf195075595.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>c基础</title>
    <link href="https://wyf195075595.github.io/2023/10/31/programming/c/base/"/>
    <id>https://wyf195075595.github.io/2023/10/31/programming/c/base/</id>
    <published>2023-10-31T06:23:10.000Z</published>
    <updated>2023-11-06T03:09:00.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在vscode 中运行c++</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><a href="https://blog.csdn.net/Winda_shi/article/details/129463163">环境搭建</a></h2><span id="more"></span><ol><li><p><strong>搜索安装 C/C++ 和 code runner 插件</strong></p></li><li><p>下载mingb64,解压，配置环境变量</p></li><li><p>在这个 .vscode 文件夹下新建2个文件作为配置文件（launch.json和tasks.json）</p><p> launch.json</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program Files\\mingw64\bin\\gdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">//**********要修改为自己的编译器所在的bin路径，形如 c:\\***\\bin\\gdb.exe</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gc&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p> tasks.json</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;relative&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>按ctrl+shit+p，搜索找到编辑配置（JSON）文件，并打开检查自己的“includePath”</strong></p><p> 搜索 c/c++, 编辑配置文件</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/Program Files/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>g++ -v -E -x c++ -，进行查看路径并复制下来</strong></p><p> 上边里面D盘路径都是这个命令查出来的</p></li><li><p>重启vscode</p></li><li><p>编写示例 hello.c</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行 runCode</p></li></ol><h2 id="常用基本类型"><a href="#常用基本类型" class="headerlink" title="常用基本类型"></a>常用基本类型</h2><ul><li>short,int,long  整形</li><li>float,double 浮点型</li><li>char 字符串</li><li>void</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><blockquote><p>有序的元素序列</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数组</span></span><br><span class="line"><span class="type">char</span> arr[<span class="number">2</span>]</span><br><span class="line"><span class="comment">// 整形数组</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><blockquote><p>类似于对象的概念</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">em</span> &#123;</span></span><br><span class="line">    red_color = <span class="number">0</span>,</span><br><span class="line">    green_color, <span class="comment">// 1</span></span><br><span class="line">    black_color <span class="comment">// 2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>储存地址的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义指针</span></span><br><span class="line">type* var</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用指针</span></span><br><span class="line">*var</span><br></pre></td></tr></table></figure><h3 id="堆内存的分配于释放"><a href="#堆内存的分配于释放" class="headerlink" title="堆内存的分配于释放"></a>堆内存的分配于释放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分配内存</span></span><br><span class="line"><span class="type">void</span>* mem = <span class="built_in">malloc</span>(size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="built_in">free</span>(mem)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 给内存位置1赋值</span></span><br><span class="line">    *p = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">// 给内存位置2赋值</span></span><br><span class="line">    *(p+<span class="number">1</span>) = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&#x27;%s&#x27;</span>, p);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="comment">// 不设置为 Null, 依然可以通过 p 操作内存。类似于bug一样</span></span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数定义没有提升，只能写在调用之前</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span> <span class="params">(<span class="type">int</span> a)</span> &#123; ...&#125;</span><br></pre></td></tr></table></figure><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><blockquote><p>返回值类型(*<strong>指针变量</strong>名)([<strong>形参</strong>列表])</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数指针</span></span><br><span class="line"><span class="type">void</span> (*f) (<span class="type">int</span> a) &#123; ...&#125;</span><br><span class="line"><span class="comment">// 将函数地址赋值给函数指针，可通过f调用函数</span></span><br><span class="line">f = func;</span><br></pre></td></tr></table></figure><h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><blockquote><p>通过 FILE* file;</p></blockquote><p>打开文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE* <span class="title function_">fopen</span><span class="params">(path, mode)</span>;</span><br></pre></td></tr></table></figure><p>关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(FILE*);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在vscode 中运行c++&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/Winda_shi/article/details/129463163&quot;&gt;环境搭建&lt;/a&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="c" scheme="https://wyf195075595.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://wyf195075595.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>音视频基础</title>
    <link href="https://wyf195075595.github.io/2023/10/31/programming/%E9%9F%B3%E8%A7%86%E9%A2%91/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://wyf195075595.github.io/2023/10/31/programming/%E9%9F%B3%E8%A7%86%E9%A2%91/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2023-10-31T01:23:10.000Z</published>
    <updated>2023-11-06T03:08:40.511Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需要了解下Linux和c语言基础，主要用到的工具 ffmpeg</p></blockquote><h3 id="安装-ffmpeg"><a href="#安装-ffmpeg" class="headerlink" title="安装  ffmpeg"></a>安装  ffmpeg</h3><p>mac 环境下推荐 brew 方式， 其他环境推荐使用源码方式下载安装</p><ol><li><p><a href="http://ffmpeg.org/download.html">下载 ffmpeg</a></p><p> 可以选择 git 下载，慢的话用 http方式下载快照版本</p></li><li><p>编译 ffmpeg</p><p> 如果出现操作权限不够，可以同过在命令前面加 sudo 提高权限</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 指定安装目录 /usr/local/ffmpeg，设置debug模式3</span><br><span class="line">./configure -prefix=/usr/local/ffmpeg -enable-debug=3</span><br><span class="line">// 指定 4核模式</span><br><span class="line">make -j 4</span><br><span class="line">// 安装</span><br><span class="line">make install</span><br></pre></td></tr></table></figure> <span id="more"></span></li></ol><h3 id="直播客户端处理流程"><a href="#直播客户端处理流程" class="headerlink" title="直播客户端处理流程"></a>直播客户端处理流程</h3><p>共享端</p><ol><li>音视频采集</li><li>音视频编码</li></ol><p>观管端</p><ol><li>音视频解码</li><li>音视频渲染</li></ol><h3 id="音频数据流"><a href="#音频数据流" class="headerlink" title="音频数据流"></a>音频数据流</h3><blockquote><p>采集的音视频数据为 PCM 数据</p></blockquote><ol><li>PCM  原始数据</li><li>acc/mp3  编码</li><li>mp4/flv  封装生成多媒体文件</li></ol><h3 id="声音的三要素"><a href="#声音的三要素" class="headerlink" title="声音的三要素"></a>声音的三要素</h3><ol><li>音调  由震动的频率快慢决定</li><li>音量  由振幅的高低决定</li><li>音色  影响的决定因素是谐波</li></ol><h3 id="音频的原始数据格式"><a href="#音频的原始数据格式" class="headerlink" title="音频的原始数据格式"></a>音频的原始数据格式</h3><ol><li>PCM</li><li>WAV  此格式是在PCM数据套上指定格式头部信息</li></ol><h3 id="量化基本概念"><a href="#量化基本概念" class="headerlink" title="量化基本概念"></a>量化基本概念</h3><ol><li>采样大小：一个采样放置多少bit数据。通常16bit</li><li>采样率：采样频率8k,16k,44.1k,48k（1s钟采样次数）</li><li>声道数：单声道，双声道，多声道</li></ol><h3 id="码率计算"><a href="#码率计算" class="headerlink" title="码率计算"></a>码率计算</h3><p>要算一个PCM音频流的码率是一件很轻松的事情，采样率x采样大小x声道数。</p><p>例如:<strong>采样率</strong>为44.1KHz，<strong>采样大小</strong>为16bit，<strong>双声道</strong>的 PCM 编码的<strong>WAV文件</strong>，它的码率为44.1Kx16x2=1411.2Kb/s.</p><h3 id="音频采集"><a href="#音频采集" class="headerlink" title="音频采集"></a>音频采集</h3><blockquote><p>通过 ffmpeg 封装的api对Android，ios,pc 等端 采集，不需要了解各端的具体api</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 通过avfoundation库对 mac 端音频采集，不同端采集命令会有所不同</span><br><span class="line">ffmpeg -f avfoundation -i :0 out.wav</span><br><span class="line"></span><br><span class="line">ffplay out.wav</span><br></pre></td></tr></table></figure><h3 id="音频压缩"><a href="#音频压缩" class="headerlink" title="音频压缩"></a>音频压缩</h3><ol><li><p>有损压缩：压缩后去除冗余信息（人类听觉范围之外的频段），并且无法恢复成未压缩前的状态</p></li><li><p>无损压缩：编码压缩后，可以通过解码还原会压缩前的状态</p><p> 熵编码</p><ul><li>哈夫曼编码</li><li>算数编码</li><li>香浓编码</li></ul></li></ol><h3 id="常见的音频编码器"><a href="#常见的音频编码器" class="headerlink" title="常见的音频编码器"></a>常见的音频编码器</h3><p>OPUS&gt;AAC&gt;Ogg&gt;other</p><ul><li>OPUS 较新,比较强</li><li>AAC  直播应用，成熟应用范围广（取代mp3）</li><li>Ogg</li><li>Speex</li><li>iLBC</li><li>AMR</li><li>G.711 固话应用</li></ul><h3 id="AAC规格描术"><a href="#AAC规格描术" class="headerlink" title="AAC规格描术"></a>AAC规格描术</h3><ul><li>AAC LC :(Low Complexity) 低复杂度规格,码流是<strong>128k</strong>，音质好。</li><li>AAC HE:等于 AAC LC + SBR (Spectral Band Replication)。其核心思相是按频谱分保存。低频编码保存主要成分，高频单独放大编码保存音质。码流在<strong>64k左右</strong></li><li>AAC HE V2:等于 AAC LC + SBR + PS(Parametric Stereo)。其核心思相是双声道中的声音存在某种相似性，只需存储一个声道的全部信息，然后，花很少的字节用参数描述另一个声道和它不同的地方。</li></ul><h3 id="AAC格式"><a href="#AAC格式" class="headerlink" title="AAC格式"></a>AAC格式</h3><ul><li>ADIF ( Audio Data Interchange Format )<br>  这种格式的特征是可以确定的找到这个音频数据的开始，<strong>只能从头开始解码</strong>，不能在音频数据流中间开始。这种格式常用在磁盘文件中</li><li>ADTS( Audio Data Transport Stream<br>  这种格式的特征是每一帧都有一个同步字，所以<strong>可以在音频流的任何位置开始解码</strong>。它类似于数据流格式。</li></ul><h3 id="ffmpeg-生成-AAC-文件"><a href="#ffmpeg-生成-AAC-文件" class="headerlink" title="ffmpeg 生成 AAC 文件"></a>ffmpeg 生成 AAC 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//-vn 没有视频 指定音频编码器 libfdk_aac,-profile 设置编码器参数,  采样率 44100</span><br><span class="line">ffmpeg -i xxx.mp4</span><br><span class="line">-vn -c:a libfdk_aac</span><br><span class="line">-ar 44100 -channels 2 -profile:a aac_he_v2 3.aac</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;需要了解下Linux和c语言基础，主要用到的工具 ffmpeg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装-ffmpeg&quot;&gt;&lt;a href=&quot;#安装-ffmpeg&quot; class=&quot;headerlink&quot; title=&quot;安装  ffmpeg&quot;&gt;&lt;/a&gt;安装  ffmpeg&lt;/h3&gt;&lt;p&gt;mac 环境下推荐 brew 方式， 其他环境推荐使用源码方式下载安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://ffmpeg.org/download.html&quot;&gt;下载 ffmpeg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 可以选择 git 下载，慢的话用 http方式下载快照版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译 ffmpeg&lt;/p&gt;
&lt;p&gt; 如果出现操作权限不够，可以同过在命令前面加 sudo 提高权限&lt;/p&gt;
 &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 指定安装目录 /usr/local/ffmpeg，设置debug模式3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure -prefix=/usr/local/ffmpeg -enable-debug=3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 指定 4核模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make -j 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="音视频" scheme="https://wyf195075595.github.io/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="音视频" scheme="https://wyf195075595.github.io/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>GeoServer</title>
    <link href="https://wyf195075595.github.io/2023/10/09/programming/java/geoserver/"/>
    <id>https://wyf195075595.github.io/2023/10/09/programming/java/geoserver/</id>
    <published>2023-10-09T03:00:00.000Z</published>
    <updated>2023-10-11T05:30:32.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GeoServer 是一个优秀得开源的GIS服务器，它相较于商用的GIS软件 ArcGIS Server\SuperMap iServer 等服务器软件，它能实现大多数场景下项目对GIS的功能要求，而且有活跃的社区支持，在实际生产中也越来越受到开发者的青睐。</p></blockquote><h3 id="GeoServer的诞生历史"><a href="#GeoServer的诞生历史" class="headerlink" title="GeoServer的诞生历史"></a><strong>GeoServer的诞生历史</strong></h3><blockquote><p>GeoServer于2001年由总部位于纽约的非盈利技术孵化器open planning project (TOPP),启动TOPP正在创建一套工具，以实现开放民主，并帮助政府更加透明。第一个是GeoServer，这是因为人们认识到，共享空间数据的能力将(成为) 大大增强公民参与政府和城市规划的一套工具。</p><p>GeoServer的创始人设想了一个类似于万维网的地理空间网。通过万维网，人们可以搜索和下载文本。通过地理空间网，人们可以搜索和下载空问数据。数据提供者将能够直接将他们的数据发布到这个网站上，用户可以直接访问它，而不是现在存在的间接和繁琐的数据共享方法。</p><p>GeoServer的相关人员创建了<strong>GeoTools</strong>项目，这是一个开源的GIS Java工具包。通过GeoTools，增加了对shapefile、Oracle数据库、ArcSDE集成等的支持</p><p>其他项目变得相互关联。Refractions Research创建了一个免费开放的空间数据库<strong>PostGIS</strong>，使GeoServer能够连接到一个免费的数据库。另外，MetaCarta最初创建了<strong>OpenLayers</strong>.一个基于开源浏览器的地图查看工具。这些工具一起增强了GeoServer的功能。</p><p><strong>这使得使用开源技术路线构建GIS工作流成为可能，数据可以从PostGIS流入GeoServer、再应用OpenLayers将GeoServer发布的地图服务在前端进行展现和互操作。</strong></p></blockquote><h3 id="WebGIS开发环境搭建"><a href="#WebGIS开发环境搭建" class="headerlink" title="WebGIS开发环境搭建"></a>WebGIS开发环境搭建</h3><p><a href="https://pan.baidu.com/s/19pQDJzOeI_-7VtA-JVtwHQ">下载</a>完成后可参考b站视频<a href="https://www.bilibili.com/video/BV1vk4y127P8/?spm_id_from=333.337.search-card.all.click&vd_source=727712d64f5d5487bf0a89c7b9de461d">教程</a></p><h3 id="安装-GeoServer"><a href="#安装-GeoServer" class="headerlink" title="安装 GeoServer"></a>安装 GeoServer</h3><p><a href="https://geoserver.org/download/">下载地址</a>: 选择stable 稳定的版本。此软件不需要安装，解压后进入 bin 目录，找到 startup.bat/sh。 windows,linux，ios都行，执行对应脚本即可。</p><blockquote><p>提示：选择jdk11+版本环境，低版本不支持</p></blockquote><p>启动</p><blockquote><p><a href="http://ip:8080/geoserver">http://ip:8080/geoserver</a></p><p>找到对应ip然后访问</p><p>系统默认账户密码</p><p>admin    geoserver</p></blockquote><h3 id="发布-shapefile"><a href="#发布-shapefile" class="headerlink" title="发布 shapefile"></a>发布 shapefile</h3><ol><li><p>准备shapefile文件数据</p><p> <a href="https://docs.geoserver.org/stable/en/user/_downloads/30e405b790e068c43354367cb08e71bc/nyc_roads.zip">测试数据链接</a></p></li><li><p>创建工作区</p></li><li><p>创建数据存储</p></li><li><p>发布图层</p></li><li><p>图层预览，客户端调用</p></li></ol><h3 id="发布GeoTIFF-影像文件"><a href="#发布GeoTIFF-影像文件" class="headerlink" title="发布GeoTIFF 影像文件"></a>发布GeoTIFF 影像文件</h3><blockquote><p><strong>TIFF</strong>(Tag Image File Format) 图像文件是图形图像处理中常用的格式之一,其图像格式很复杂,但由于它对图像信息的存放灵活多变,可以支持很多色彩系统,而且独立于操作系统<br>因此得到了广泛应用。在各种地理信息系统、摄影测量与遥感等应用中,要求图像具有地理编码信息,例如图像所在的坐标系、比例尺、图像上点的坐标、经纬度、长度单位及角度单位等等。对于存储和读取这些信息,纯TIFF 格式的图像文件是很难做到的,而GeOTIFF 作为TIFF 的一种扩展,在TIFF 的基础上定义了一些GeoTag (地理标签),来对各种坐标系统、椭球基准、投影信息等进行定义和存储,使图像数据和地理数据存储在同一图像文件中,这样就为广大用户制作和使用带有地理信息的图像提供了方便的途径。</p></blockquote><p>发布步骤和上面基本一致，只是在创建数据存储时选择 TIFF 格式文件</p><h3 id="使用-postgreSQL-创建-postgis-数据库"><a href="#使用-postgreSQL-创建-postgis-数据库" class="headerlink" title="使用 postgreSQL 创建 postgis 数据库"></a>使用 postgreSQL 创建 postgis 数据库</h3><blockquote><p>储存空间数据的数据库</p></blockquote><ol><li><p>安装 postgreSQL 数据库管理系统</p></li><li><p>安装 postgis 数据库</p></li><li><p>使用postgreSQL 创建 postgis 数据库</p><p> postgreSQL  创建数据库后执行下面语句创建一个 postgis 数据库</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTENSION postgis;</span><br><span class="line">CREATE EXTENSION postgis_topology;</span><br><span class="line">CREATE EXTENSION postgis_sfcgal;</span><br><span class="line">CREATE EXTENSION fuzzystrmatch;</span><br><span class="line">CREATE EXTENSION address_standardizer;</span><br><span class="line">CREATE EXTENSION address_standardizer_data_us;</span><br><span class="line">CREATE EXTENSION postgis_tiger_geocoder;</span><br></pre></td></tr></table></figure><p> <a href="https://docs.geoserver.org/stable/en/user/_downloads/bbd4b941ceb36074c9d19feab3f57609/nyc_buildings.zip">测试数据</a>，下载后是一个sql文件。导入数据库</p></li><li><p>GeoServer 访问 postgreSQL 数据库</p></li></ol><h3 id="使用-openlayer-访问wms服务"><a href="#使用-openlayer-访问wms服务" class="headerlink" title="使用 openlayer  访问wms服务"></a>使用 openlayer  访问wms服务</h3><p>下边的参数配置可以去图层预览页面，openlayer 预览页面可以查看请求信息找到下面的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.<span class="property">layer</span>.<span class="title class_">Tile</span>(&#123;</span><br><span class="line">    <span class="attr">source</span>: <span class="keyword">new</span> ol.<span class="property">source</span>.<span class="title class_">TileWMS</span>(&#123;</span><br><span class="line">        <span class="attr">ratio</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://192.168.94.128:8080/geoserver/test/wms&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;FORMAT&#x27;</span>: <span class="string">&#x27;image/png8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;VERSION&#x27;</span>: <span class="string">&#x27;1.1.1&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;LAYERS&quot;</span>: <span class="string">&#x27;test:nyc_roads&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;exceptions&quot;</span>: <span class="string">&#x27;application/vnd.ogc.se_inimage&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;SRS&quot;</span>: <span class="string">&quot;EPSG:2908&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重要的一点，要配置好正确的坐标系，不然显示不出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">view</span>: <span class="keyword">new</span> ol.<span class="title class_">View</span>(&#123;</span><br><span class="line">    <span class="attr">center</span>: [<span class="number">984018.1663741902</span> , <span class="number">207673.09513056703</span>], <span class="comment">//地图初始中心点</span></span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">7</span>,  <span class="comment">//地图初始显示级别</span></span><br><span class="line">    <span class="attr">projection</span>: <span class="keyword">new</span> ol.<span class="property">proj</span>.<span class="title class_">Projection</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&#x27;EPSG:2908&#x27;</span>,</span><br><span class="line">        <span class="attr">units</span>: <span class="string">&#x27;m&#x27;</span>,</span><br><span class="line">        <span class="attr">global</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="使用geoserver生产wmts瓦片"><a href="#使用geoserver生产wmts瓦片" class="headerlink" title="使用geoserver生产wmts瓦片"></a>使用geoserver生产wmts瓦片</h3><ol><li><p>发布一个wms服务</p></li><li><p>在wms服务器基础上，生产wmts瓦片</p><p> 瓦片缓存地址可以在geoserver目录下的 web.xml 文件中修改</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>GEOSERVER_DATA_DIR<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>C:\eclipse\workspace\geoserver_trunk\cite\confCiteWFSPostGIS<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 瓦片生成可以在选择 切图策略，在 gridsets 中设置。添加策略需要在图层中的 瓦片策略中添加</p></li><li><p>发布wmts 服务</p></li></ol><h3 id="瓦片的迁移使用"><a href="#瓦片的迁移使用" class="headerlink" title="瓦片的迁移使用"></a>瓦片的迁移使用</h3><ol><li>在目标GIS服务器上发布wms服务，不生产瓦片。(或者发布空服务，只是为了构建bbox )</li><li>在其他GeoServer服务器上创建wms服务，生产wmts瓦片。</li><li>将所有其他GeoServer服务器上生产的wmts瓦片复制到目标GeoServer服务器对应服务瓦片目录下。</li></ol><h3 id="geoserver进行属性和几何要素的增删改查"><a href="#geoserver进行属性和几何要素的增删改查" class="headerlink" title="geoserver进行属性和几何要素的增删改查"></a><a href="https://zhuanlan.zhihu.com/p/381601300">geoserver进行属性和几何要素的增删改查</a></h3><blockquote><p>通过操作，影响图层数据</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;GeoServer 是一个优秀得开源的GIS服务器，它相较于商用的GIS软件 ArcGIS Server\SuperMap iServer 等服务器软件，它能实现大多数场景下项目对GIS的功能要求，而且有活跃的社区支持，在实际生产中也越来越受到开发</summary>
      
    
    
    
    <category term="WebGIS" scheme="https://wyf195075595.github.io/categories/WebGIS/"/>
    
    
    <category term="WebGIS" scheme="https://wyf195075595.github.io/tags/WebGIS/"/>
    
  </entry>
  
  <entry>
    <title>vue反编译</title>
    <link href="https://wyf195075595.github.io/2023/08/11/programming/vue/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>https://wyf195075595.github.io/2023/08/11/programming/vue/%E5%8F%8D%E7%BC%96%E8%AF%91/</id>
    <published>2023-08-11T08:18:10.000Z</published>
    <updated>2023-08-12T02:05:28.638Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近遇到一个需求，将一个打包的vue项目反编译回源代码模式。以下就是探索过程</p></blockquote><h4 id="使用-vue反编译库-reverse-sourcemap"><a href="#使用-vue反编译库-reverse-sourcemap" class="headerlink" title="使用  vue反编译库 reverse-sourcemap"></a>使用  <strong>vue反编译库 reverse-sourcemap</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global reverse-sourcemap</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>将源码映射文件 xxx.js.map 编译到 src目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse-sourcemap --output-dir src xxx.js.map</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230811163011325.png" alt="image-20230811163011325"></p><h4 id="1、执行反编译"><a href="#1、执行反编译" class="headerlink" title="1、执行反编译"></a>1、执行反编译</h4><blockquote><p>执行反编译的前提：打包文件有 映射的 map 文件</p></blockquote><p>如上面的打包文件有5个map文件 我们需要执行5次 命令，都解压到src文件夹，结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230811163434584.png" alt="image-20230811163434584"></p><p>此时反编译结果就出现了项目的目录及文件信息，展开的 src 目录就是我们需要的。（其中的public 是自己建的,不要管）</p><h4 id="2、获取package-json"><a href="#2、获取package-json" class="headerlink" title="2、获取package.json"></a>2、获取package.json</h4><p>此时我们需要反编译生成 package.json，到 node_modules 目录下，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm shrinkwrap</span><br></pre></td></tr></table></figure><p>得到 npm-shrinkwrap.json 文件</p><p>这个json文件有所有依赖信息，但是没有版本（版本信息取node_modules 目录下查看依赖信息）。那我们怎么还原package.json 呢？</p><blockquote><p>我的办法是拉取一个完整vue-cli项目,或vite项目，看你反编译项目的的vue版本而定（2版本就vue-cli,3就vite）,然后把脚手架项目的package.json拿来，基础依赖就有了，只要把第三方的包添加进去就行了。</p></blockquote><h4 id="3、补全静态文件及相关文件"><a href="#3、补全静态文件及相关文件" class="headerlink" title="3、补全静态文件及相关文件"></a>3、补全静态文件及相关文件</h4><p>这就是为啥前面自建了 public 文件夹，里边就是 index.html(用脚手架里的，然后对照反编译的文件看要不要修改（一般不需要)，补全后大致如下</p><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230812095910538.png" alt="image-20230812095910538"></p><h4 id="4、最后"><a href="#4、最后" class="headerlink" title="4、最后"></a>4、最后</h4><p>就是执行脚手架运行命令如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>可能会出现依赖缺失，静态文件确实等问题，需要自己还原或配置 vue.config.js.项目越复杂配置问题越多。解决完后就大功告成</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/625650481?utm_id=0">参考链接</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近遇到一个需求，将一个打包的vue项目反编译回源代码模式。以下就是探索过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用-vue反编译库-reverse-sourcemap&quot;&gt;&lt;a href=&quot;#使用-vue反编译库-reverse-sourcemap&quot; class=&quot;headerlink&quot; title=&quot;使用  vue反编译库 reverse-sourcemap&quot;&gt;&lt;/a&gt;使用  &lt;strong&gt;vue反编译库 reverse-sourcemap&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --global reverse-sourcemap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;使用方式&quot;&gt;&lt;a href=&quot;#使用方式&quot; class=&quot;headerlink&quot; title=&quot;使用方式&quot;&gt;&lt;/a&gt;使用方式&lt;/h4&gt;&lt;p&gt;将源码映射文件 xxx.js.map 编译到 src目录&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reverse-sourcemap --output-dir src xxx.js.map&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="vue" scheme="https://wyf195075595.github.io/categories/vue/"/>
    
    
    <category term="反编译" scheme="https://wyf195075595.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>mixin 实战</title>
    <link href="https://wyf195075595.github.io/2023/07/20/programming/vue/mixin/"/>
    <id>https://wyf195075595.github.io/2023/07/20/programming/vue/mixin/</id>
    <published>2023-07-20T00:23:10.000Z</published>
    <updated>2023-07-20T01:09:39.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个简单的mixin 使用示例，用于管理 项目中的 字典，下拉数据</p></blockquote><h3 id="通用字典"><a href="#通用字典" class="headerlink" title="通用字典"></a>通用字典</h3><span id="more"></span><p>vuex 准备</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">const state = <span class="punctuation">&#123;</span></span><br><span class="line">  dict<span class="punctuation">:</span> new Array()<span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br><span class="line">const mutations = <span class="punctuation">&#123;</span></span><br><span class="line">  SET_DICT<span class="punctuation">:</span> (state<span class="punctuation">,</span> <span class="punctuation">&#123;</span> key<span class="punctuation">,</span> value <span class="punctuation">&#125;</span>) =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    if (key !== <span class="keyword">null</span> &amp;&amp; key !== <span class="string">&quot;&quot;</span>) <span class="punctuation">&#123;</span></span><br><span class="line">      state.dict.push(<span class="punctuation">&#123;</span></span><br><span class="line">        key<span class="punctuation">:</span> key<span class="punctuation">,</span></span><br><span class="line">        value<span class="punctuation">:</span> value<span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span>);</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  REMOVE_DICT<span class="punctuation">:</span> (state<span class="punctuation">,</span> key) =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    try <span class="punctuation">&#123;</span></span><br><span class="line">      for (let i = <span class="number">0</span>; i &lt; state.dict.length; i++) <span class="punctuation">&#123;</span></span><br><span class="line">        if (state.dict<span class="punctuation">[</span>i<span class="punctuation">]</span>.key == key) <span class="punctuation">&#123;</span></span><br><span class="line">          state.dict.splice(i<span class="punctuation">,</span> i);</span><br><span class="line">          return <span class="keyword">true</span>;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span> catch (e) <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  CLEAN_DICT<span class="punctuation">:</span> (state) =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    state.dict = new Array();</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br><span class="line"></span><br><span class="line">const actions = <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 设置字典</span></span><br><span class="line">  setDict(<span class="punctuation">&#123;</span> commit <span class="punctuation">&#125;</span><span class="punctuation">,</span> data) <span class="punctuation">&#123;</span></span><br><span class="line">    commit(<span class="string">&quot;SET_DICT&quot;</span><span class="punctuation">,</span> data);</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 删除字典</span></span><br><span class="line">  removeDict(<span class="punctuation">&#123;</span> commit <span class="punctuation">&#125;</span><span class="punctuation">,</span> key) <span class="punctuation">&#123;</span></span><br><span class="line">    commit(<span class="string">&quot;REMOVE_DICT&quot;</span><span class="punctuation">,</span> key);</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 清空字典</span></span><br><span class="line">  cleanDict(<span class="punctuation">&#123;</span> commit <span class="punctuation">&#125;</span>) <span class="punctuation">&#123;</span></span><br><span class="line">    commit(<span class="string">&quot;CLEAN_DICT&quot;</span>);</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br><span class="line"></span><br><span class="line">export default <span class="punctuation">&#123;</span></span><br><span class="line">  namespaced<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  state<span class="punctuation">,</span></span><br><span class="line">  mutations<span class="punctuation">,</span></span><br><span class="line">  actions<span class="punctuation">,</span></span><br><span class="line">  getters<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    getDict(state) <span class="punctuation">&#123;</span></span><br><span class="line">        return state.dict;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、编写组件 dict.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="keyword">function</span> (<span class="params">Vue, options </span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(options) &#123;</span><br><span class="line">        options = options</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全局注册组件 component-name</span></span><br><span class="line">    <span class="comment">// Vue.component(&#x27;component-name&#x27;,&#123;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">//添加实例方法 $Notice</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$Notice</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加全局方法或属性</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">globalMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加全局混合</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span> === <span class="literal">undefined</span> || <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">dicts</span> === <span class="literal">undefined</span> || <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">dicts</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> dict = <span class="keyword">new</span> <span class="title class_">Dict</span>()</span><br><span class="line">            dict.<span class="property">owner</span> = <span class="variable language_">this</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                dict</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(<span class="variable language_">this</span>.<span class="property">dict</span> <span class="keyword">instanceof</span> <span class="title class_">Dict</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">dict</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dict</span>.<span class="title function_">init</span>(<span class="variable language_">this</span> ,<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">dicts</span> , options).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@classdesc</span> 字典</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">Object</span>&#125; label 标签对象，内部属性名为字典类型名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">Object</span>&#125; dict 字段数组，内部属性名为字典类型名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">Array.&lt;DictMeta&gt;</span>&#125; _dictMetas 字典元数据数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dict</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 当前组件实例</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">owner</span> = <span class="literal">null</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 用于将 code 回显成值</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         &#123;</span></span><br><span class="line"><span class="comment">            sys_normal_disable: &#123;</span></span><br><span class="line"><span class="comment">                0: &quot;正常&quot;,</span></span><br><span class="line"><span class="comment">                1: &quot;异常&quot;,</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         *  */</span> </span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">label</span> = &#123;&#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * DictData</span></span><br><span class="line"><span class="comment">         * 用于下拉框展示</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         &#123;</span></span><br><span class="line"><span class="comment">            sys_normal_disable: [</span></span><br><span class="line"><span class="comment">                &#123; labelName: &quot;异常&quot;, labelValue: 0&#125;</span></span><br><span class="line"><span class="comment">            ]</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         *  */</span> </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params">Vue ,dicts, options</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> rs = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> dictType <span class="keyword">of</span> dicts) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> d = <span class="keyword">await</span> options.<span class="title function_">request</span>(dictType);</span><br><span class="line">                rs.<span class="title function_">push</span>(d)</span><br><span class="line">                d.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title class_">Vue</span>.$set(<span class="title class_">Vue</span>.<span class="property">dict</span>.<span class="property">label</span>, [item.<span class="property">dictValue</span>], item.<span class="property">dictLabel</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="title class_">Vue</span>.$set(<span class="title class_">Vue</span>.<span class="property">dict</span>.<span class="property">type</span>, dictType, d)</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`load faild <span class="subst">$&#123;dictType&#125;</span>,`</span>,error);         </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(rs)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、main.js 注册 组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 store 中查询此字典是否已加载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">searchDictByKey</span>(<span class="params">dict, key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="literal">null</span> &amp;&amp; key == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dict.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dict[i].<span class="property">key</span> == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> dict[i].<span class="property">value</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(dict, &#123;</span><br><span class="line">  <span class="attr">labelField</span>: <span class="string">&#x27;dictLabel&#x27;</span>,</span><br><span class="line">  <span class="attr">valueField</span>: <span class="string">&#x27;dictValue&#x27;</span>,</span><br><span class="line">  <span class="title function_">request</span>(<span class="params">dictType</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> storeDict = <span class="title function_">searchDictByKey</span>(store.<span class="property">getters</span>[<span class="string">&quot;dictModule/getDict&quot;</span>], dictType)</span><br><span class="line">    <span class="keyword">if</span> (storeDict) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123; <span class="title function_">resolve</span>(storeDict) &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">`http://localhost:8081/api/system/dict/data/type/<span class="subst">$&#123;dictType&#125;</span>`</span>, &#123;</span><br><span class="line">            <span class="attr">headers</span>: &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">`Bearer eyJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VyX2tleSI6IjFhZWNjYmM2LTJmNDItNDMyNS05ZTkxLTViNGEyZTc1MmUxMCIsInVzZXJuYW1lIjoiYWRtaW4ifQ.c8w0X5ydwbxBFANwfykVC3WjDS-0X6LCBXd_5nnc05I25YLxmkIyRRsR9fAaitkuNYqUHkcQXca99ZWbNxPKyw`</span>&#125;</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> res.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;dictModule/setDict&#x27;</span>, &#123; <span class="attr">key</span>: dictType, <span class="attr">value</span>: res.<span class="property">data</span> &#125;)</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、在页面使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;val&quot; placeholder=&quot;系统内置&quot; clearable&gt;</span><br><span class="line">          &lt;el-option</span><br><span class="line">              v-for=&quot;dict in dict.type.sys_yes_no&quot;</span><br><span class="line">              :key=&quot;dict.dictValue&quot;</span><br><span class="line">              :label=&quot;dict.dictLabel&quot;</span><br><span class="line">              :value=&quot;dict.dictValue&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">  dicts: [&#x27;sys_normal_disable&#x27;,&#x27;sys_yes_no&#x27;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      val: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;输出mixin 中的 dict&quot;, this.dict);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>dicts 在组件 dict 中 通过 $options 获取，然后在 created 函数中 初始化 对应的字典，然后在 mixin 中 暴露 dict 变量，存放字典数据</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个简单的mixin 使用示例，用于管理 项目中的 字典，下拉数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;通用字典&quot;&gt;&lt;a href=&quot;#通用字典&quot; class=&quot;headerlink&quot; title=&quot;通用字典&quot;&gt;&lt;/a&gt;通用字典&lt;/h3&gt;</summary>
    
    
    
    <category term="vue" scheme="https://wyf195075595.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://wyf195075595.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 实践与优化</title>
    <link href="https://wyf195075595.github.io/2023/06/15/programming/vue/vue-cli%E5%AE%9E%E8%B7%B5%E4%BC%98%E5%8C%96%E9%A1%B9/"/>
    <id>https://wyf195075595.github.io/2023/06/15/programming/vue/vue-cli%E5%AE%9E%E8%B7%B5%E4%BC%98%E5%8C%96%E9%A1%B9/</id>
    <published>2023-06-15T02:23:10.000Z</published>
    <updated>2023-09-05T01:35:40.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集一些常见的基于vue-cli的优化项</p><p>vue-cli 配置项结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;@vue/cli-service&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="设置全局样式"><a href="#设置全局样式" class="headerlink" title="设置全局样式"></a>设置全局样式</h3><span id="more"></span><p>依赖插件 style-resources-loader, vue-cli-plugin-style-resources-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="string">&quot;style-resources-loader&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">preProcessor</span>: <span class="string">&quot;less&quot;</span>,</span><br><span class="line">      <span class="attr">patterns</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src/styles/variable.less&quot;</span>)],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="css样式抽取"><a href="#css样式抽取" class="headerlink" title="css样式抽取"></a>css样式抽取</h3><blockquote><p>vue-cli5 默认配置 生产环境抽取组件的 style 样式为css文件放在 dist/css 文件夹中，还可以设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="comment">// 是否生成映射文件，方便调试</span></span><br><span class="line">    <span class="attr">sourceMap</span>: isProduction ? <span class="literal">false</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">extract</span>: &#123;</span><br><span class="line">      <span class="comment">// 输出的每个 CSS 文件的名称</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">`css/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.css`</span>,</span><br><span class="line">      <span class="comment">// 非入口的 chunk 文件名称 </span></span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">`css/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.css`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.thinbug.com/q/54267580">关于 chunkFilename</a>  作用：不在<code>output.entry</code>中的文件，但是需要单独打包的文件名配置。（<br>设置使用<code>require.ensure</code>或者<code>import</code>异步加载模块打包后的名称。）</p></blockquote><h3 id="js组件打包"><a href="#js组件打包" class="headerlink" title="js组件打包"></a>js组件打包</h3><blockquote><p>vue-cli5 默认组件打包后输出到 /dist/js下， 文件名格式 <code>文件夹名-文件名.hash值.后缀</code>, 也可以手动配置。</p><p>eg:defectControlConfiguration-consumptionUnit.2e496dd8.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、方式<span class="number">1</span></span><br><span class="line"><span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">config.<span class="property">output</span>.<span class="title function_">filename</span>(</span><br><span class="line">      <span class="string">`js/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.js`</span></span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">chunkFilename</span>(</span><br><span class="line">      <span class="string">`js/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.js`</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、方式<span class="number">2</span></span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">output</span>.<span class="property">filename</span> = <span class="string">`js/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.js`</span>;</span><br><span class="line">    config.<span class="property">output</span>.<span class="property">chunkFilename</span> = <span class="string">`js/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.js`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="资源压缩"><a href="#资源压缩" class="headerlink" title="资源压缩"></a>资源压缩</h3><p>对静态资源的压缩，一般只在生产模式下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  config.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(js|css|jpeg|jpg|png|svg|gif|json|txt|ico)$/i</span>,</span><br><span class="line">      <span class="attr">threshold</span>: <span class="number">10240</span>, <span class="comment">// 单位字节 只有大小大于10k的资源会被处理</span></span><br><span class="line">      <span class="attr">minRatio</span>: <span class="number">0.8</span>, <span class="comment">// 只有压缩率小于这个值的资源才会被处理</span></span><br><span class="line">      <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>, <span class="comment">// 删除原文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启gzip压缩"><a href="#开启gzip压缩" class="headerlink" title="开启gzip压缩"></a>开启gzip压缩</h3><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="title function_">chainWebpack</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 生产模式下启用gzip压缩 需要配置nginx支持gzip</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      config.<span class="title function_">plugin</span>(<span class="string">&#x27;CompressionWebpackPlugin&#x27;</span>).<span class="title function_">use</span>(<span class="title class_">CompressionWebpackPlugin</span>, [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;[path][base].gz&#x27;</span>,</span><br><span class="line">          <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">          <span class="attr">test</span>: <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\.(js|css)$&#x27;</span>),</span><br><span class="line">          <span class="comment">// 只处理大于xx字节 的文件，默认：0</span></span><br><span class="line">          <span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line">          <span class="comment">// 示例：一个1024b大小的文件，压缩后大小为768b，minRatio : 0.75</span></span><br><span class="line">          <span class="attr">minRatio</span>: <span class="number">0.8</span>, <span class="comment">// 默认: 0.8</span></span><br><span class="line">          <span class="comment">// 是否删除源文件，默认: false</span></span><br><span class="line">          <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx 配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>;    </span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">    <span class="attribute">gzip_proxied</span>  any;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line">    </span><br><span class="line">    //找到nginx的这个文件 /usr/local/nginx/conf/nginx.<span class="attribute">conf</span> 然后配置</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">4300</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /home/static/web/wechat;</span><br><span class="line">            <span class="attribute">index</span> /index.html;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">            <span class="attribute">gzip_static</span> <span class="literal">on</span>; <span class="comment">#开启压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公共代码抽离"><a href="#公共代码抽离" class="headerlink" title="公共代码抽离"></a>公共代码抽离</h3><p>将第三方模块,样式抽离成单个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">optimization</span> = &#123;</span><br><span class="line">      <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">        <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">        <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">minSize</span>: <span class="number">1024</span> * <span class="number">5</span>,</span><br><span class="line">        <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;~&quot;</span>,</span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]vue[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">vuex</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;vuex&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]vuex[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;vue-router&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;vue-router&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]vue-router[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;element-ui&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]element-ui[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">echarts</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;echarts&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]echarts[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">dayjs</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;dayjs&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]dayjs[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">jquery</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]jquery[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;chunk-vendors&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;chunk-vendors&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">styles</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;styles&quot;</span>,</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(le|c)ss$/</span>,</span><br><span class="line">            <span class="attr">priority</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码拆分功能</span></span><br><span class="line">config.<span class="property">optimization</span>.<span class="property">splitChunks</span> = &#123;</span><br><span class="line">  <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 表示选择哪些 chunks 进行分割，可选值有：async，initial和all</span></span><br><span class="line">  <span class="attr">maxInitialRequests</span>: <span class="number">10</span>, <span class="comment">// </span></span><br><span class="line">  <span class="attr">minSize</span>: <span class="number">30000</span>, <span class="comment">// 依赖包超过30KB将被单独打包</span></span><br><span class="line">  <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;-&quot;</span>,<span class="comment">// 抽取出来的文件的自动生成名字的分割符，默认为 ~；</span></span><br><span class="line">  <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">    <span class="attr">vendor</span>: &#123; <span class="comment">// vendors用于提取所有node_modules中符合条件的模块</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">      <span class="title function_">name</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> packageNames = <span class="variable language_">module</span>.<span class="property">context</span>.<span class="title function_">match</span>(</span><br><span class="line">          <span class="regexp">/[\\/]node_modules[\\/](.*?)([\\/]|$)/</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(packageNames) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`chunk.<span class="subst">$&#123;packageNames[<span class="number">1</span>].replace(<span class="string">&quot;@&quot;</span>, <span class="string">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">priority</span>: <span class="number">10</span> <span class="comment">// 当一个模块同时符合多个cacheGroups时，则根据其中的priority配置项确定优先级</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="性能提示优化"><a href="#性能提示优化" class="headerlink" title="性能提示优化"></a>性能提示优化</h3><p>但项目越来越大，资源越来越多时，打包可能会报错。此时可能需要调整性能提示。</p><blockquote><p>原因： node编译的<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA&spm=1001.2101.3001.7020">内存溢出</a>了。原因就是打包文件过大，超出了内存的限制大小造成了编译中断。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">performance</span> = &#123;</span><br><span class="line">      <span class="attr">hints</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      <span class="comment">// 入口起点的最大体积</span></span><br><span class="line">      <span class="attr">maxEntrypointSize</span>: <span class="number">30000000</span>,</span><br><span class="line">      <span class="comment">// 生成文件的最大体积</span></span><br><span class="line">      <span class="attr">maxAssetSize</span>: <span class="number">30000000</span>,</span><br><span class="line">      <span class="comment">// 只给出 js 文件的性能提示</span></span><br><span class="line">      <span class="attr">assetFilter</span>: <span class="keyword">function</span> (<span class="params">assetFilename</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> assetFilename.<span class="title function_">endsWith</span>(<span class="string">&quot;.js&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;serve2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --max_old_space_size=4096 node_modules/@vue/cli-service/bin/vue-cli-service.js serve --open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --max_old_space_size=4096 node_modules/@vue/cli-service/bin/vue-cli-service.js build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/Tiger_lin1/article/details/125634867">相关解决方法</a></p></blockquote><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><blockquote><p>这样就优雅了不少</p></blockquote><p>普通懒加载，打包后名称</p><p>chunk_59de86678e4fdfa6_1.0.0_1686820955003.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/pmsLogin&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;pmsLogin&quot;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">keepAlive</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">transitionName</span>: <span class="string">&quot;opacity-scale&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&quot;@/views/pmsLogin/index.vue&quot;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>升级版, 这种方式注册的路由打包后名称</p><p>pmsLogin_59de86678e4fdfa6_1.0.0_1686820955003.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/pmsLogin&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;pmsLogin&quot;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">keepAlive</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">transitionName</span>: <span class="string">&quot;opacity-scale&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;pmsLogin&quot; */</span> <span class="string">&quot;@/views/pmsLogin/index.vue&quot;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="懒加载动态路由打包时的问题"><a href="#懒加载动态路由打包时的问题" class="headerlink" title="懒加载动态路由打包时的问题"></a>懒加载动态路由打包时的问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loadView</span> = (<span class="params">view</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>`</span>], resolve)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 import 实现生产环境的路由懒加载 </span></span><br><span class="line">    <span class="comment">// import(`/* webpackChunkName: &quot;$&#123;name&#125;&quot; */ @/views/$&#123;view&#125;.vue`), 这种写法不行</span></span><br><span class="line">    <span class="comment">// 从 webpack 2.6.0 开始，占位符 [index] 和 [request] 被支持为递增的数字或实际解析的文件名。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;[request]&quot; */</span> <span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>.vue`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用cdn加速"><a href="#使用cdn加速" class="headerlink" title="使用cdn加速"></a>使用cdn加速</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cdn = &#123;</span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">    <span class="comment">//雪碧图样式</span></span><br><span class="line">    <span class="string">&quot;https://**/**/icon.css&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/vue/3.2.33/vue.cjs.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/vuex/4.0.2/vuex.cjs.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/vue-router/4.0.14/vue-router.cjs.min.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/axios/0.26.1/axios.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/core-js/3.22.0/minified.js&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProd = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span></span><br><span class="line">cdn = isProd ? cdn : &#123;<span class="attr">css</span>:[],<span class="attr">js</span>:[]&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line"> <span class="comment">// 采用cdn的方式,所以将以下这些文件配置不打包</span></span><br><span class="line">    <span class="attr">externals</span>:&#123;</span><br><span class="line">       <span class="attr">vue</span>:<span class="string">&quot;Vue&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">       <span class="attr">vuex</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">       <span class="attr">axios</span>:<span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;core-js&#x27;</span>:<span class="string">&#x27;core-js&#x27;</span>,</span><br><span class="line">       <span class="attr">vant</span>:<span class="string">&#x27;vant&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">chainWebpack</span>:<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 注入cdn</span></span><br><span class="line">    config.<span class="title function_">plugin</span>(<span class="string">&quot;html&quot;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">        args[<span class="number">0</span>].<span class="property">cdn</span> = cdn</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.html 模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hans&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line">    &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt; &quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but app doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br><span class="line">    &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看性能分析报告"><a href="#查看性能分析报告" class="headerlink" title="查看性能分析报告"></a>查看性能分析报告</h3><p>通过查看性能分析报告确定哪些大模块使用cdn加速</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;report&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build --report --mode production&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="去除-console-log"><a href="#去除-console-log" class="headerlink" title="去除 console.log"></a>去除 console.log</h3><p>1、方式1</p><p>npm i terser-webpack-plugin -D</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="attr">chainWebpack</span>:<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>)&#123;</span><br><span class="line">      <span class="comment">// 去除console.log输出</span></span><br><span class="line">      config.<span class="property">optimization</span></span><br><span class="line">      .<span class="title function_">minimizer</span>(<span class="string">&#x27;terser&#x27;</span>)</span><br><span class="line">      .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(args[<span class="number">0</span>].<span class="property">terserOptions</span>.<span class="property">compress</span>, &#123; </span><br><span class="line">          <span class="comment">// 生产模式去除console.log</span></span><br><span class="line">          <span class="attr">pure_funcs</span>: [<span class="string">&#x27;console.log&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、方式2</p><p>安装  babel-plugin-transform-remove-console</p><p>.babel.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> plugins = [];</span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (isProduction) &#123;</span><br><span class="line">  plugins.<span class="title function_">push</span>([<span class="string">&quot;transform-remove-console&quot;</span>, &#123; <span class="attr">exclude</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;warn&quot;</span>] &#125;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: plugins,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="webpack-chain-语法"><a href="#webpack-chain-语法" class="headerlink" title="webpack-chain 语法"></a>webpack-chain 语法</h3><blockquote><p><a href="https://blog.51cto.com/feng/5289791">参考链接</a></p></blockquote><h3 id="完整示例参考"><a href="#完整示例参考" class="headerlink" title="完整示例参考"></a>完整示例参考</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: 打包配置</span></span><br><span class="line"><span class="comment"> * @Author:  wyf</span></span><br><span class="line"><span class="comment"> * @Date: 2023-07-03 08:48:44</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2023-08-29 11:01:04</span></span><br><span class="line"><span class="comment"> * @LastEditors:  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; type &#125; = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"><span class="comment">// 是否为生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// const &#123; config &#125; = require(&#x27;process&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(&quot;process.config&quot;, config);</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: isProduction ? <span class="string">&quot;/&quot;</span> : <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">// target: &quot;http://192.18.1.12:8080/&quot;, // 我们要代理的真实接口地址</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://60.173.195.163:18000/&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">performance</span> = &#123;</span><br><span class="line">      <span class="attr">hints</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      <span class="comment">// 入口起点的最大体积</span></span><br><span class="line">      <span class="attr">maxEntrypointSize</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 生成文件的最大体积</span></span><br><span class="line">      <span class="attr">maxAssetSize</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 只给出 js 文件的性能提示</span></span><br><span class="line">      <span class="attr">assetFilter</span>: <span class="keyword">function</span> (<span class="params">assetFilename</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> assetFilename.<span class="title function_">endsWith</span>(<span class="string">&quot;.js&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;preload&#x27;</span>) <span class="comment">// <span class="doctag">TODO:</span> need test</span></span><br><span class="line">    config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;prefetch&#x27;</span>) <span class="comment">// <span class="doctag">TODO:</span> need test</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isProduction)&#123;</span><br><span class="line">      <span class="comment">// 去除console.log输出</span></span><br><span class="line">      config.<span class="property">optimization</span></span><br><span class="line">      .<span class="title function_">minimizer</span>(<span class="string">&#x27;terser&#x27;</span>)</span><br><span class="line">      .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(args[<span class="number">0</span>].<span class="property">terserOptions</span>.<span class="property">compress</span>, &#123; </span><br><span class="line">          <span class="comment">// 生产模式去除console.log</span></span><br><span class="line">          <span class="attr">pure_funcs</span>: [<span class="string">&#x27;console.log&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// set svg-sprite-loader</span></span><br><span class="line">    config.<span class="property">module</span></span><br><span class="line">      .<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">      .<span class="property">exclude</span>.<span class="title function_">add</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;src/assets/icons&#x27;</span>))</span><br><span class="line">      .<span class="title function_">end</span>()</span><br><span class="line">    config.<span class="property">module</span></span><br><span class="line">      .<span class="title function_">rule</span>(<span class="string">&#x27;icons&#x27;</span>)</span><br><span class="line">      .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">      .<span class="property">include</span>.<span class="title function_">add</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;src/assets/icons&#x27;</span>))</span><br><span class="line">      .<span class="title function_">end</span>()</span><br><span class="line">      .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">      .<span class="title function_">options</span>(&#123;</span><br><span class="line">        <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">end</span>()</span><br><span class="line"></span><br><span class="line">    config.<span class="property">optimization</span>.<span class="title function_">splitChunks</span>(&#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 表示选择哪些 chunks 进行分割，可选值有：async，initial和all</span></span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">10</span>, <span class="comment">// </span></span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">30000</span>, <span class="comment">// 依赖包超过30KB将被单独打包</span></span><br><span class="line">      <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;-&quot;</span>,<span class="comment">// 抽取出来的文件的自动生成名字的分割符，默认为 ~；</span></span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendor</span>: &#123; <span class="comment">// vendors用于提取所有node_modules中符合条件的模块</span></span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="title function_">name</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> packageNames = <span class="variable language_">module</span>.<span class="property">context</span>.<span class="title function_">match</span>(</span><br><span class="line">              <span class="regexp">/[\\/]node_modules[\\/](.*?)([\\/]|$)/</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span>(packageNames) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">`chunk.<span class="subst">$&#123;packageNames[<span class="number">1</span>].replace(<span class="string">&quot;@&quot;</span>, <span class="string">&quot;&quot;</span>)&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">priority</span>: <span class="number">10</span> <span class="comment">// 当一个模块同时符合多个cacheGroups时，则根据其中的priority配置项确定优先级</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    config.<span class="property">output</span></span><br><span class="line">      .<span class="title function_">filename</span>(</span><br><span class="line">        <span class="string">`js/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.js`</span></span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">chunkFilename</span>(</span><br><span class="line">        <span class="string">`js/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.js`</span></span><br><span class="line">      );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 系统名称</span></span><br><span class="line">    config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">        args[<span class="number">0</span>].<span class="property">title</span> = <span class="string">&quot;智慧营业厅管理平台&quot;</span></span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">sourceMap</span>: isProduction ? <span class="literal">false</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">extract</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">`css/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.css`</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">`css/[name]_[hash]_<span class="subst">$&#123;process.env.VUE_APP_VERSION&#125;</span>_<span class="subst">$&#123;timestamp&#125;</span>.css`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">    <span class="string">&quot;style-resources-loader&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">preProcessor</span>: <span class="string">&quot;less&quot;</span>,</span><br><span class="line">      <span class="attr">patterns</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src/styles/variable.less&quot;</span>)],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;收集一些常见的基于vue-cli的优化项&lt;/p&gt;
&lt;p&gt;vue-cli 配置项结构&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; defineConfig &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;@vue/cli-service&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;title function_&quot;&gt;defineConfig&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;/blockquote&gt;
&lt;h3 id=&quot;设置全局样式&quot;&gt;&lt;a href=&quot;#设置全局样式&quot; class=&quot;headerlink&quot; title=&quot;设置全局样式&quot;&gt;&lt;/a&gt;设置全局样式&lt;/h3&gt;</summary>
    
    
    
    <category term="vue" scheme="https://wyf195075595.github.io/categories/vue/"/>
    
    
    <category term="vue-cli" scheme="https://wyf195075595.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>低代码平台</title>
    <link href="https://wyf195075595.github.io/2023/06/02/programming/others/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0/"/>
    <id>https://wyf195075595.github.io/2023/06/02/programming/others/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0/</id>
    <published>2023-06-02T10:23:10.000Z</published>
    <updated>2023-07-31T01:04:25.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过低代码开发（apaas）——<strong>研发人员可以通过低代码平台为企业快速构建应用程序，非技术人员也可以通过低代码平台，使用简单的“拖、拉、拽”来创建应用。</strong></p><p>简单来说，低代码开发（apaas）<strong>面向每个人，让我们（不管是否懂编程、不管是何职业）都能快速的设计出一个管理应用。</strong></p></blockquote><h3 id="Appsmith-pageplug-cn"><a href="#Appsmith-pageplug-cn" class="headerlink" title="Appsmith / pageplug.cn/"></a><a href="https://link.juejin.cn/?target=https://www.appsmith.com/">Appsmith</a> / <a href="https://link.juejin.cn/?target=https://pageplug.cn/">pageplug.cn/</a></h3><blockquote><p>Appsmith 是一款开源低代码框架，主要用于构建管理面板、内部工具和仪表板等，允许拖放 UI 组件来构建页面，通过连接到任何 API、数据库或 GraphQL 源，并使用 JavaScript 语言编写逻辑，可以在短时间内创建内部应用程序。</p><p>PagePlug是Appsmith 的中国化项目，基于Appsmith做了整体性能优化及汉化，也集合了特色表单解决方案Formily组件、图表解决方案Echarts组件、低代码小程序开发等，是面向研发使用的一个开源的、声明式的、可视化的、符合开发者直觉的前端低代码框架。</p></blockquote><h3 id="阿里低代码平台"><a href="#阿里低代码平台" class="headerlink" title="阿里低代码平台"></a><a href="https://lowcode-engine.cn/index">阿里低代码平台</a></h3><p><a href="https://docs-cn.nocobase.com/welcome/introduction">nocobase</a></p><blockquote><p>NocoBase 是一个极易扩展的开源无代码开发平台。 无需编程，使用 NocoBase 搭建自己的协作平台、管理系统，只需要数小时时间。</p><p>NocoBase 正处在早期开发阶段，可能变动频繁，请谨慎用于生产环境。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;通过低代码开发（apaas）——&lt;strong&gt;研发人员可以通过低代码平台为企业快速构建应用程序，非技术人员也可以通过低代码平台，使用简单的“拖、拉、拽”来创建应用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单来说，低代码开发（apaas）&lt;strong</summary>
      
    
    
    
    <category term="other" scheme="https://wyf195075595.github.io/categories/other/"/>
    
    
    <category term="低代码" scheme="https://wyf195075595.github.io/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>RPA 流程自动化机器人</title>
    <link href="https://wyf195075595.github.io/2023/05/29/programming/others/RPA/"/>
    <id>https://wyf195075595.github.io/2023/05/29/programming/others/RPA/</id>
    <published>2023-05-29T00:23:10.000Z</published>
    <updated>2023-05-29T01:15:21.638Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件的流程自动化并不是一个新概念，比如微软的Office办公软件中，早在二十多年前就自带了“宏”（Macro）的功能，可以自动化操作Office来工作。</p><p>但是，RPA和早期的软件流程自动化有所不同，RPA强调对已有系统的“无侵入”，这是什么意思呢？就是说，如果一个软件本身不支持自动化的功能，那么RPA就可以大显身手了。RPA不需要对这个软件进行任何修改，而是通过模拟人的阅读和操作软件的方式，让这个软件实现自动化。不仅如此，如果有两个、三个甚至更多的软件需要一起工作，如果采用传统的Office“宏”的方式，那就必须让这些软件都进行修改，实现一套统一的接口才行。有一个不改，流程就不能自动化，这显然有点儿强人所难，毕竟这些软件很可能不是同一个厂商开发的！但是，如果采用RPA，这些软件 <strong>全部</strong> 都不需要经过任何修改，RPA会制造一个“软件机器人”，模拟人的阅读和操作，让“软件机器人”自动完成这个流程，这种“无侵入”的特点是RPA的核心魅力之一。</p></blockquote><h3 id="RPA产品"><a href="#RPA产品" class="headerlink" title="RPA产品"></a>RPA产品</h3><p><a href="https://zhuanlan.zhihu.com/p/275757075">参考连接</a></p><p><strong>国内产品</strong></p><p>影刀,艺赛旗,容智,弘玑,Uibot,云扩,阿里云RPA,达观,英诺森</p><p><strong>国外产品</strong></p><p>UiPath,Blue Prism,Automation Anywhere,Power Automation,Pega,WorkFusion,Jacada,WinAutomation,NICE,Contextor</p><blockquote><p>2022年8月更新</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件的流程自动化并不是一个新概念，比如微软的Office办公软件中，早在二十多年前就自带了“宏”（Macro）的功能，可以自动化操作Office来工作。&lt;/p&gt;
&lt;p&gt;但是，RPA和早期的软件流程自动化有所不同，RPA强调对已有系统的“无侵入”，这</summary>
      
    
    
    
    <category term="other" scheme="https://wyf195075595.github.io/categories/other/"/>
    
    
    <category term="RPA" scheme="https://wyf195075595.github.io/tags/RPA/"/>
    
  </entry>
  
  <entry>
    <title>免费的在线数据库</title>
    <link href="https://wyf195075595.github.io/2023/05/29/programming/others/freeOnlineDB/"/>
    <id>https://wyf195075595.github.io/2023/05/29/programming/others/freeOnlineDB/</id>
    <published>2023-05-29T00:23:10.000Z</published>
    <updated>2023-06-19T06:49:59.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集一些白嫖的平台资源</p></blockquote><h2 id="1-db4free"><a href="#1-db4free" class="headerlink" title="1.db4free"></a>1.db4free</h2><p><a href="https://link.zhihu.com/?target=https://db4free.net/">db4free.net - 免费的 MySQL 数据库db4free.net/</a></p><blockquote><p>mysql数据库，基本最新版本，服务器在国外，可能比较慢但是是稳定的。</p><p>无需注册账号，不定时清空超过200MB的资料库。</p></blockquote><span id="more"></span><h2 id="2-sqlpub"><a href="#2-sqlpub" class="headerlink" title="2.sqlpub"></a>2.sqlpub</h2><p><a href="https://link.zhihu.com/?target=http://sqlpub.com/">SQLPub - 免费的MySQL数据库sqlpub.com/</a></p><blockquote><p>mysql数据库，基本最新版本，服务器在国内。</p><p>无需注册账号，最大36000次/小时的请求、同时10个连接和500M存储空间。</p></blockquote><h2 id="3-memfire"><a href="#3-memfire" class="headerlink" title="3. memfire"></a>3. memfire</h2><p><a href="https://link.zhihu.com/?target=https://cloud.memfiredb.com/">MemFireDBcloud.memfiredb.com/</a></p><blockquote><p>只支持PostgreSQL,不支持mysql，服务器在国内。</p><p>需要注册账号，每个账号限一个。 每月读写100万读额度，10万写，1G内存限制</p></blockquote><h2 id="4-SQL-Online"><a href="#4-SQL-Online" class="headerlink" title="4.SQL Online"></a>4.<a href="https://sqliteonline.com/">SQL Online</a></h2><blockquote><p>这个只能学习使用练习 SQL 语句，不能在应用上使用</p><p>SQL Online 提供了 MariaDB、PostgreSQL、SQLite 以及 SQL Server 数据库环境，Oracle 数据库正在计划中。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;收集一些白嫖的平台资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-db4free&quot;&gt;&lt;a href=&quot;#1-db4free&quot; class=&quot;headerlink&quot; title=&quot;1.db4free&quot;&gt;&lt;/a&gt;1.db4free&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https://db4free.net/&quot;&gt;db4free.net - 免费的 MySQL 数据库db4free.net/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql数据库，基本最新版本，服务器在国外，可能比较慢但是是稳定的。&lt;/p&gt;
&lt;p&gt;无需注册账号，不定时清空超过200MB的资料库。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="other" scheme="https://wyf195075595.github.io/categories/other/"/>
    
    
    <category term="db" scheme="https://wyf195075595.github.io/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>kettle基础</title>
    <link href="https://wyf195075595.github.io/2023/05/10/programming/java/kettle/"/>
    <id>https://wyf195075595.github.io/2023/05/10/programming/java/kettle/</id>
    <published>2023-05-10T13:00:00.000Z</published>
    <updated>2023-05-29T00:30:21.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>ETL</strong>(Extract-Transform-Load 的缩写，即<strong>数据抽取、转换、装载的过程)<strong>，对于企业或行业应用来说，我们经常会遇到各种</strong>数据的处理，转换，迁移</strong>，所以了解并掌握一种 ETL 工具的使用，必不可少。“<br>市面上常用的 ETL 工具有很多，比如 <strong>Sqoop，Daax，Kettle，Talend 等</strong>，作为一个大数据工程师，我们最好要掌握其中的两到三种，这里我们要学习的 ETL 工具是 Kettle!“</p><p>**Kettle (新名字PDI，但大家都叫老名字)**是一款国外开源的 ETL 工具，纯java 编写，可以在Window、Linux、Unix 上运行，绿色无需安装，数据抽取高效稳定。</p></blockquote><span id="more"></span><h3 id="输入控件"><a href="#输入控件" class="headerlink" title="输入控件"></a>输入控件</h3><h3 id="输出控件"><a href="#输出控件" class="headerlink" title="输出控件"></a>输出控件</h3><h4 id="Excel输出"><a href="#Excel输出" class="headerlink" title="Excel输出"></a>Excel输出</h4><blockquote><p>将输入格式转为Excel输出</p></blockquote><h4 id="文本文件输出"><a href="#文本文件输出" class="headerlink" title="文本文件输出"></a>文本文件输出</h4><blockquote><p>将输入格式转为 txt 输出</p></blockquote><h4 id="更新-amp-插入-更新"><a href="#更新-amp-插入-更新" class="headerlink" title="更新&amp;插入/更新"></a>更新&amp;插入/更新</h4><blockquote><p><strong>更新</strong></p><p>将表输入进行 更新操作，要求输入表与输出表数量一致</p><h4 id="插入-更新"><a href="#插入-更新" class="headerlink" title="插入/更新"></a>插入/更新</h4><p>将表输入进行 插入/更新操作，输出表数量少时会自动插入</p></blockquote><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>以输入表数据为依据 删除输出表中的数据</p></blockquote><h4 id="表输出"><a href="#表输出" class="headerlink" title="表输出"></a>表输出</h4><blockquote><p>将输入表数据输出道 输出表</p></blockquote><h3 id="转换控件"><a href="#转换控件" class="headerlink" title="转换控件"></a>转换控件</h3><h4 id="Concat-fields"><a href="#Concat-fields" class="headerlink" title="Concat fields"></a>Concat fields</h4><blockquote><p>将多个字段拼接成新的字段</p></blockquote><h4 id="值映射"><a href="#值映射" class="headerlink" title="值映射"></a>值映射</h4><blockquote><p>值映射就是把字段的一个值映射成其他的值。在数据质量规范上使用非常多，比如很多系统对应性别 sex 字段的定义不同。所以我们需要利用此控件，将同一个字段的不同的值映射转换成我们需要的值。“</p><ol><li>选择映射的字段“</li><li>还可以自定义映射完以后的新字段名</li><li>可以设置不匹配时的默认值</li><li>设置映射的值“</li></ol></blockquote><h4 id="增加常量-amp-增加序列"><a href="#增加常量-amp-增加序列" class="headerlink" title="增加常量&amp;增加序列"></a>增加常量&amp;增加序列</h4><blockquote><p>增加常量就是在本身的数据流里面添加一列数据，该列的数据都是相同的值。</p><p>增加序列是给数据流添加一个序列字段，可以自定义该序列字段的递增步长。“</p></blockquote><h4 id="字段选择"><a href="#字段选择" class="headerlink" title="字段选择"></a>字段选择</h4><blockquote><p>可以删除字段，修改字段名称，数据类型等等</p></blockquote><h4 id="字符串剪切-操作-替换"><a href="#字符串剪切-操作-替换" class="headerlink" title="字符串剪切/操作/替换"></a>字符串剪切/操作/替换</h4><blockquote><p>字符串的剪切替换，字符串操作可以操作转大小写</p></blockquote><h4 id="去重-排序"><a href="#去重-排序" class="headerlink" title="去重/排序"></a>去重/排序</h4><blockquote><p>去重前必须排序</p></blockquote><p><strong>唯一行（哈希值）</strong></p><blockquote><p>唯一行(哈希值)是给每一行的数据建立哈希值，通过哈希值来比较数据是否重复，因此唯一行(哈希值) 去重效率比较高，也更建议大家使用。</p></blockquote><p><strong>拆分字段</strong></p><blockquote><p>例如将 名字 拆分成 firstName,lastName.注意：<strong>拆分字段后原字段就没有了</strong></p></blockquote><h4 id="列拆分为多行"><a href="#列拆分为多行" class="headerlink" title="列拆分为多行"></a>列拆分为多行</h4><blockquote><p>列拆分为多行就是把指定字段按指定分隔符进行拆分为多行，然后其他字段直接复制。</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230516112232376.png" alt="image-20230516112232376"></p><h4 id="列扁平化"><a href="#列扁平化" class="headerlink" title="列扁平化"></a>列扁平化</h4><blockquote><p>相当于 列拆分为多行 的反向操作。操作前请先排序。用的少</p></blockquote><h4 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h4><blockquote><p><strong>注意:列转行之前数据流必须按照分组字段进行排序，否则数据会错乱!</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230516115235973.png" alt="image-20230516115235973"></p><ol><li>关键字段:从数据内容变成列名的字段、</li><li>分组字段:列转行，转变以后的分组字段</li><li>目标字段:增加的列的列名字段</li><li>数据字段:目标字段的数据字段</li><li>关键字值:数据字段查询时的关键字，也可以理解为 key</li></ol><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230516120412862.png" alt="image-20230516120412862"></p><h4 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h4><blockquote><p>与列转行相反</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230516120342116.png" alt="image-20230516120342116"></p><ol><li>Key 字段:行转列，生成的列名字段名“</li><li>字段名称: 原本数据流中的字段名“</li><li>Key 值: Key 字段的值，这个是自己自定义的，一般都跟前面的字段名称一样</li><li>Value 字段:对应的 Key 值的数据列的列名“</li></ol><h3 id="应用控件"><a href="#应用控件" class="headerlink" title="应用控件"></a>应用控件</h3><h4 id="替换NULL值"><a href="#替换NULL值" class="headerlink" title="替换NULL值"></a>替换NULL值</h4><blockquote><p>可以将NULL值替换成其他默认值，全局替换和针对某个字段</p></blockquote><h4 id="写日志"><a href="#写日志" class="headerlink" title="写日志"></a>写日志</h4><blockquote><p>将日志输出道kettle控制台</p></blockquote><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="Switch-case"><a href="#Switch-case" class="headerlink" title="Switch/case"></a>Switch/case</h4><blockquote><p>根据不同的条件<strong>跳</strong>到不同的操作</p></blockquote><h4 id="过滤记录"><a href="#过滤记录" class="headerlink" title="过滤记录"></a>过滤记录</h4><blockquote><p>和 Switch/case 做对比的话，过滤记录相当于 if-else，可以自定义输入一个判断条件，然后将数据流中的数据一路分为两路。</p></blockquote><h4 id="空操作"><a href="#空操作" class="headerlink" title="空操作"></a>空操作</h4><blockquote><p>一般设置为数据流终点，啥也不做。会在控制台输出报错信息</p></blockquote><h3 id="查询控件"><a href="#查询控件" class="headerlink" title="查询控件"></a>查询控件</h3><blockquote><p>查询是转换里面的第九个分类，查询控件是用来查询数据源里面的数据，并合并到主数据流中。</p></blockquote><h4 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h4><blockquote><p>将表输入的数据，与数据库查询的数据经行左连接</p></blockquote><h4 id="流查询"><a href="#流查询" class="headerlink" title="流查询"></a>流查询</h4><blockquote><p>将两个表输入经行连接查询，设置 lookup 的表为次表，另一个为主表</p></blockquote><h3 id="连接控件"><a href="#连接控件" class="headerlink" title="连接控件"></a>连接控件</h3><h4 id="合并记录"><a href="#合并记录" class="headerlink" title="合并记录"></a>合并记录</h4><blockquote><p>​    合并记录是用于将两个不同来源的数据合并，这两个来源的数据分别为旧数据和新数据，该步骤将旧数据和新数据按照指定的关键字匹配、比较、合并。注意旧数据和新数据需要事先按照关键字段排序，并且旧数据和新数据要有相同的字段名称。“<br>​    合并后的数据将包括旧数据来源和新数据来源里的所有数据，对于变化的数据，使用新数据代替旧数据，同时在结果里用一个标示字段，来指定新旧数据的比较结果。</p></blockquote><p>合并操作前先排序记录    主要是用作两个文件的对比</p><h4 id="记录集连接"><a href="#记录集连接" class="headerlink" title="记录集连接"></a>记录集连接</h4><blockquote><p>记录集连接可以对两个步骤中的数据流进行左连接，右连接，内连接，外连接。此控件功能比较强大，企业做 ETL 开发会经常用到此控件，但是需要注意在<strong>进行记录集连接之前需要对记录集的数据进行排序</strong>，<strong>并且排序的字段还一定要选两个表关联的字段，否则数据错乱，出现null 值</strong>。</p></blockquote><h3 id="kettle-统计控件"><a href="#kettle-统计控件" class="headerlink" title="kettle 统计控件"></a>kettle 统计控件</h3><p>提供数据采样和统计功能</p><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>按什么字段分组，就需要按什么字段排序</p><h3 id="kettle映射控件"><a href="#kettle映射控件" class="headerlink" title="kettle映射控件"></a>kettle映射控件</h3><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><blockquote><p>映射类似于Java中的方法，在另一个转换中调用我们的映射</p></blockquote><h3 id="kettle脚本控件"><a href="#kettle脚本控件" class="headerlink" title="kettle脚本控件"></a>kettle脚本控件</h3><h4 id="执行SQL脚本"><a href="#执行SQL脚本" class="headerlink" title="执行SQL脚本"></a>执行SQL脚本</h4><blockquote><p>跟连接工具差不多，没啥用</p></blockquote><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>作业项是作业的基本构成部分。如同转换的步骤，作业项也可以使用图标的方式图形化展示。但是，作业项和转换步骤有下面几点不同:</p><ol><li>转换步骤与步骤之间是数据流，作业项之间是步骤流。</li><li>转换启动以后，所有步骤一起并行启动等待数据行的输入，而作业项是严格按照执行顺序启动，一个作业项执行完以后，再执行下一个作业项。</li><li>“在作业项之间可以传递一个结果对象 (result object)。这个结果对象里面包含了数3据行，它们不是以数据流的方式来传递的。而是等待一个作业项执行完了，再传递个下一个作业项。“</li><li>因为作业顺序执行作业项，所以必须定义一个起点。有一个叫“开始”的作业项就定义了这个点。一个作业只能定一个开始作业项</li></ol><p><strong>作业跳</strong></p><blockquote><p>分三种类型</p><ol><li>无论上次执行结果成功失败都继续执行下一跳，图标🔒</li><li>运行当前结果为true时才执行下一个作业，图标，✔</li><li>当前运行结果失败才执行下一个作业，图标，❌</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ETL&lt;/strong&gt;(Extract-Transform-Load 的缩写，即&lt;strong&gt;数据抽取、转换、装载的过程)&lt;strong&gt;，对于企业或行业应用来说，我们经常会遇到各种&lt;/strong&gt;数据的处理，转换，迁移&lt;/strong&gt;，所以了解并掌握一种 ETL 工具的使用，必不可少。“&lt;br&gt;市面上常用的 ETL 工具有很多，比如 &lt;strong&gt;Sqoop，Daax，Kettle，Talend 等&lt;/strong&gt;，作为一个大数据工程师，我们最好要掌握其中的两到三种，这里我们要学习的 ETL 工具是 Kettle!“&lt;/p&gt;
&lt;p&gt;**Kettle (新名字PDI，但大家都叫老名字)**是一款国外开源的 ETL 工具，纯java 编写，可以在Window、Linux、Unix 上运行，绿色无需安装，数据抽取高效稳定。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java" scheme="https://wyf195075595.github.io/categories/java/"/>
    
    
    <category term="kettle基础" scheme="https://wyf195075595.github.io/tags/kettle%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux命令</title>
    <link href="https://wyf195075595.github.io/2023/05/04/programming/linux/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://wyf195075595.github.io/2023/05/04/programming/linux/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2023-05-04T02:57:10.000Z</published>
    <updated>2023-10-31T02:47:04.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>linux 由 unix 演化而来</p><p>基于Linux 开源的内核，不同厂商开发出了不同名称的系统: 如 Redhat,CentOSE, Ubuntu,Suse,红旗等。</p></blockquote><p><strong>虚拟机的网络连接形式</strong></p><ul><li><p>桥连接</p><p>  Linux 可以和其他的通信，但是可能造成IP冲突</p></li><li><p>NAT</p><p>  网络地址转换方式，linux 可以访问外网，不会造成IP冲突</p></li><li><p>主机模式</p><p>  你的Linux是一个独立的主机，不能访问外网</p></li></ul><p><strong>Vmtools</strong></p><blockquote><p>此工具可以让 centOS 与主机共享文件，剪切板</p></blockquote><span id="more"></span><h4 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h4><blockquote><p>采用层级式树状目录结构。Linux中一切皆文件，usb,摄像头，网卡等硬件，都会映射成一个文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-/# 根目录</span><br><span class="line">-bin#指令</span><br><span class="line">-dev#设备管理,硬件的映射文件</span><br><span class="line">-home#创建用户会生成对应文件</span><br><span class="line">-lib64#静态库</span><br><span class="line">-mnt#挂载目录</span><br><span class="line">-proc#内核相关，虚拟目录，内存映射</span><br><span class="line">-run</span><br><span class="line">-srv#存放服务启动之后所需数据</span><br><span class="line">-tmp#临时文件</span><br><span class="line">-var#变量</span><br><span class="line">-boot#启动Linux的核心文件</span><br><span class="line">-etc#配置文件</span><br><span class="line">-lib#动态连接共享库</span><br><span class="line">-media#如dvd</span><br><span class="line">-opt#要安装的软件</span><br><span class="line">-root#root相关</span><br><span class="line">-sbin#高级权限指令</span><br><span class="line">-sys#该目录安装了linux2.6内核中新出现的文件系统ysfs</span><br><span class="line">-usr#用户，用户很多应用程序和文件都放在这个目录</span><br><span class="line">--local#给主机额外安装软件所安装的目录</span><br><span class="line">-selinux#安全子系统，控制程序只能访问特定文件</span><br></pre></td></tr></table></figure><h4 id="Linux-编辑器-Vi、Vim"><a href="#Linux-编辑器-Vi、Vim" class="headerlink" title="Linux 编辑器 Vi、Vim"></a>Linux 编辑器 Vi、Vim</h4><p>三种模式：</p><ol><li><p>正常模式</p><p> 只能查看</p></li><li><p>插入编辑模式</p><p> 按下 i,I,o,O,a,A,r，R 任意字母进入</p></li><li><p>命令行模式</p><p> 通过上面方式切换VI到VIM 模式， 命令 :wq, :q, :q! </p><p> 查找命令：/关键字，回车查找, 按n查找下一个</p><p> 拷贝当前行：yy</p><p> 拷贝当前行向下5行：5yy</p><p> 粘贴：p, 拷贝后使用</p><p> 删除当前行：dd</p><p> 删除当前行向下5行：5dd</p><p> 光标回到顶部：gg</p><p> 光标回到底部：G</p><p> 撤销操作：u</p></li></ol><h4 id="开-关-重启"><a href="#开-关-重启" class="headerlink" title="开/关/重启"></a>开/关/重启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">立马关机</span></span><br><span class="line">shutdowm -h now </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定时1分钟后关机</span></span><br><span class="line">shoutdown -h 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">立即重启</span></span><br><span class="line">shoutdown -r now</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用 ，等价于关机</span></span><br><span class="line">half</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把内存数据写入到磁盘，重启关机前建议执行一次</span></span><br><span class="line">sync</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用户的登录和注销"><a href="#用户的登录和注销" class="headerlink" title="用户的登录和注销"></a>用户的登录和注销</h4><blockquote><p>由于管理员账户权限较高，为避免操作失误。一般采用普通用户登录，在切换管理员权限。</p><p>注销命令 logout ，在图形界面级别无效。在级别3下有效</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出远程连接,注销登陆</span></span><br><span class="line">logout</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换用户</span></span><br><span class="line">su -用户名</span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><p>用户，用户组（可理解为角色）概念。用户被分配给某个组。组不同权限不同。</p><p>/home/ ： 目录下有各个创建的用户对于家目录，当用户登陆时，会自动进入到自己的家目录</p></blockquote><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a><strong>创建用户</strong></h4><blockquote><p>Linux用户需要向管理员申请，并被分配到某个组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">useradd [选项] 用户名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建用户小明，默认会创建一个组 xm,并把小明放进去</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建用户后，会自动创建和用户同名的家目录，也可以通过 `useradd -d 指定目录名称 新用户名` ,为用户指定家目录</span></span><br><span class="line">useradd xm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给新用户设置密码， 注意要在root权限下</span></span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户，保留家目录</span></span><br><span class="line">userdel 用户名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户及家目录</span></span><br><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure><h4 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法， 没有信息返回 提示</span></span><br><span class="line">id 用户名</span><br></pre></td></tr></table></figure><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换用户， 高权限切换低权限不需要密码</span></span><br><span class="line">su - 切换的用户名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回到切换之前用户</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户/登录用户"></a>查看当前用户/登录用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami/ who am i</span><br></pre></td></tr></table></figure><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><blockquote><p>每个用户都有一个组，通过组来控制用户权限管理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加组</span></span><br><span class="line">groupadd 组名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除组</span></span><br><span class="line">groupdel 组名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加用户时直接加上组</span></span><br><span class="line">useradd -g 用户组 用户名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将用户 zwj 改到 wudang</span></span><br><span class="line">usermod -g wudang zwj</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改变该用户初始的登录目录</span></span><br><span class="line">usermod -d 目录名 用户名</span><br></pre></td></tr></table></figure><h4 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a>用户和组的相关文件</h4><ul><li><p>/etc/passwd</p><p>  用户user配置文件，记录用户的各种信息</p></li><li><p>/etc/shadow</p><p>  口令（密码）配置文件【信息会加密】，每行的意义</p><p>  登录名:加密口令:最后修改时间:最小使劲啊间隔:最大时间间隔:告警时间:不活动时间:失效时间:标志</p></li><li><p>/etc/group</p><p>  组配置文件，每行含义</p><p>  组名:口令:组标识号:组内用户列表</p></li></ul><h3 id="组管理、权限管理"><a href="#组管理、权限管理" class="headerlink" title="组管理、权限管理"></a>组管理、权限管理</h3><blockquote><p>在Linux中每个用户必须属于一个组，不能独立于组外。</p><p>Linux中的文件：</p><ul><li>所有者</li><li>所在组</li><li>其他组</li><li>改变用户所在组</li></ul></blockquote><h4 id="查看文件所有者，目录所在组"><a href="#查看文件所有者，目录所在组" class="headerlink" title="查看文件所有者，目录所在组"></a>查看文件所有者，目录所在组</h4><blockquote><p>当前用户创建文件时，这个文件所有者是当前用户，所在组为当前用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure><h4 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h4><p>改变所有者不会修改文件所有组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件名</span><br><span class="line"></span><br><span class="line">chowm root test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改变用户所有者和所有组</span></span><br><span class="line">chowm newowner:newgroup file</span><br><span class="line">-R如果是目录，则使其下所有子文件或目录递归生效</span><br></pre></td></tr></table></figure><h4 id="文件目录所在组"><a href="#文件目录所在组" class="headerlink" title="文件目录所在组"></a>文件目录所在组</h4><blockquote><p>当某个用户创建一个文件内后，这个文件的所在组就是该用户的所在组</p></blockquote><h5 id="修改文件所在组"><a href="#修改文件所在组" class="headerlink" title="修改文件所在组"></a>修改文件所在组</h5><p>改变文件所在组不会影响文件所有者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件 test.txt 所有组改为 class1</span></span><br><span class="line">chgrp class1 test.txt</span><br><span class="line">-R如果是目录，则使其下所有子文件或目录递归生效</span><br></pre></td></tr></table></figure><h4 id="权限基本介绍"><a href="#权限基本介绍" class="headerlink" title="权限基本介绍"></a>权限基本介绍</h4><blockquote><p>文件的类型</p><p><strong>对于文件来说</strong>：</p><p>r：读 cat</p><p>w：写 vim echo</p><p>x：执行 运行命名或者脚本</p><p><strong>对于目录来说</strong>：</p><p>r：读（看到目录里面有什么） ls</p><p>w：在目录里面新建文件，删除，移动 touch mkdir rm mv cp</p><p>x：目录是不能直接运行的，对目录赋予 x 权限，代表用户可以进入目录，也就是说，赋予 x 权限的用户或群组可以使用 cd 命令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">drwxr-xr-x.  2 jysp class1    6 6月  24 2020 音乐</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一个字母判断文件的类型</span></span><br><span class="line">-:普通文件</span><br><span class="line">d:目录</span><br><span class="line">l: 软链接 </span><br><span class="line">c: 字符设备[键盘，鼠标]</span><br><span class="line">b:块文件，硬盘</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rwx,2-4字母为一组：表示文件所有者拥有的权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">r-x,5-7字母为一组：文件所在组的用户的权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">r-x，8-10字母为一组：表示文件其他组的用户的权限</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2， 这个数字。如果是文件-表示硬链接数量，如果是目录-表示子目录数量</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jysp, 用户名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">class1，用户所在组名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6，表示文件大小，如果是目录则是4096</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6月  24 2020，问件最后修改时间</span></span><br></pre></td></tr></table></figure><h5 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h5><blockquote><p>通过chmod命令，可以修改文件或者目录的权限</p></blockquote><p><strong>方式1：+，-，=</strong></p><p>​    u：所有者</p><p>​    g：所有组</p><p>​    o：其他人</p><p>​    a：所有人（u,g,o的总和）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部重新复制</span></span><br><span class="line">chmod u=rwx,g=rx,o=x</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础上加</span></span><br><span class="line">chmod a+w</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础上减</span></span><br><span class="line">chmod a-x</span><br></pre></td></tr></table></figure><p><strong>方式2：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如 将文件 /home/abc.txt 赋值权限：rwxr-xr-x</span><br><span class="line">rwx = 4 + 2 + 1 = 7</span><br><span class="line">r-x = 4 + 1 = 5</span><br><span class="line">r-x = 4 + 1 = 5</span><br><span class="line"></span><br><span class="line">chmod 755 /home/abc.txt</span><br></pre></td></tr></table></figure><h3 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h3><blockquote><p>一定情况下可以找回丢失root密码：</p><p>重启进入按 enter键（回车）（6及一下 enter, 7版本按e键）</p><p>进入单用户模式以root用户（root不需要密码</p><p>改密码</p></blockquote><p>系统运行级别 配置文件： /etc/inittab</p><table><thead><tr><th>级别</th><th>环境</th></tr></thead><tbody><tr><td>0</td><td>关机</td></tr><tr><td>1</td><td>单用户（找回丢失root密码</td></tr><tr><td>2</td><td>多用户无网络服务</td></tr><tr><td>3</td><td>多用户有网络服务</td></tr><tr><td>4</td><td>保留</td></tr><tr><td>5</td><td>图形界面</td></tr><tr><td>6</td><td>重启</td></tr></tbody></table><p>切换运行级别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init [0/1/2/3/4/5/6]</span><br></pre></td></tr></table></figure><h3 id="指令帮助"><a href="#指令帮助" class="headerlink" title="指令帮助"></a>指令帮助</h3><blockquote><p>都是英文，看不明白就百度</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man 命令</span><br><span class="line"></span><br><span class="line">help 命令</span><br></pre></td></tr></table></figure><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><blockquote><p>显示当前工作目录绝对路径</p></blockquote><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法：</span></span><br><span class="line">ls [选项] [目录或是文件]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用选项</span></span><br><span class="line">-a: 显示所有文件及目录，包括隐藏</span><br><span class="line">-l: 以列表方式展示</span><br></pre></td></tr></table></figure><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到自己的家目录</span></span><br><span class="line">cd ~ / cd :</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回上一级</span></span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> 指令用于创建目录</span></span><br><span class="line"></span><br><span class="line">mkdir [选项] 要创建的目录</span><br><span class="line">-p: 创建多级目录</span><br><span class="line"></span><br><span class="line">mkdir -p /home/www/html</span><br></pre></td></tr></table></figure><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除空目录， 非空目录无法删除，需要用到 <span class="built_in">rm</span> -rf 要删除的目录</span></span><br><span class="line">rmdir [选项] 要删除的空白目录</span><br></pre></td></tr></table></figure><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建空文件</span></span><br><span class="line">touch 文件名称</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝文件到指定目录</span></span><br><span class="line">cp [选项] source dest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用选项</span></span><br><span class="line">-r: 递归复制整个文件夹</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">细节： 强制覆盖不提示</span></span><br><span class="line">\cp</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line">cp a.text bbb/</span><br></pre></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移出文件或目录</span></span><br><span class="line">rm [选项] 要删除的文件或目录</span><br><span class="line"></span><br><span class="line">常用指令</span><br><span class="line">-r: 递归整个文件夹</span><br><span class="line">-f: 强制删除不提示</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删库跑路</span></span><br><span class="line">rm -rf *</span><br></pre></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动文件或重命名</span></span><br><span class="line"></span><br><span class="line">mv oldFilaName newFileName</span><br><span class="line">mv /temp/moveFile /targetFloder</span><br></pre></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件内容，</span></span><br><span class="line">cat [选项] 要查看的文件</span><br><span class="line"></span><br><span class="line">常用命令</span><br><span class="line">-n: 显示行号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方便查看都会带上管道符| more</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">more指令是一个基于VI编辑器的文本过滤器，它以全屏的方式按页显示文本文件内容。more指令中内置了若干快捷键</span></span><br><span class="line">more 吞噬星空.txt</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空格</td><td>下一页</td></tr><tr><td>enter</td><td>下一行</td></tr><tr><td>q</td><td>立刻离开，退出预览</td></tr><tr><td>ctrl+F</td><td>滚下一屏</td></tr><tr><td>ctrl+B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">less 指令用来显示分屏查看文件内容，与more类似，按需加载显示内容，效率高</span></span><br><span class="line">less 吞噬星空.txt</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空格</td><td>向下翻一页</td></tr><tr><td>pagedown</td><td>下一页</td></tr><tr><td>pageup</td><td>上一页</td></tr><tr><td>/字串</td><td>向下搜索【字串】，n：下找，N：上找</td></tr><tr><td>?字串</td><td>向上搜索【字串】，n：下找，N：上找</td></tr><tr><td>q</td><td>离开查看</td></tr></tbody></table><h4 id="输出重定向（-gt-）和追加-gt-gt"><a href="#输出重定向（-gt-）和追加-gt-gt" class="headerlink" title="输出重定向（&gt;）和追加(&gt;&gt;)"></a>输出重定向（&gt;）和追加(&gt;&gt;)</h4><blockquote><p>重定向会覆盖原先内容，追加不会</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列表中的内容写入文件a.txt</span></span><br><span class="line">ls -l &gt;文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列表内容追加到文件末尾</span></span><br><span class="line">ls -al &gt;&gt;文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件1覆盖到文件2</span></span><br><span class="line">cat 文件1&gt;文件2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;内容&#x27;</span>&gt;&gt;文件</span></span><br></pre></td></tr></table></figure><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><blockquote><p>输出内容到控制台</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">echo [选项] [输出内容]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出当前环境变量</span></span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><blockquote><p>head用于显示文件的开头部分内容，默认显示文件前10行内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件前10行</span></span><br><span class="line">head 文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件前5行</span></span><br><span class="line">head -n 5 文件</span><br></pre></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><blockquote><p>用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件后10行</span></span><br><span class="line">tail 文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件后5行</span></span><br><span class="line">tail -n 5 文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实时追踪改文档所有更新，工作中常用于监听日志文件</span></span><br><span class="line">tail -f 文件</span><br></pre></td></tr></table></figure><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><blockquote><p>软李艾i你姐也叫符号连接，类似于windows里的快捷方式，主要是存放了链接其他文件的路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">　基本语法</span></span><br><span class="line">ln -s [源文件或目录] [软链接名]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接</span></span><br><span class="line">ln -s /home/jysp/test/hello.txt test_link</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软连接,路径不要带/</span></span><br><span class="line">rm -rm test_link</span><br></pre></td></tr></table></figure><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><blockquote><p>查看已执行过的历史命令，也可以执行历史指令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">history</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有历史命令</span></span><br><span class="line">history</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示最近使用过的10个指令</span></span><br><span class="line">history 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行历史编号为5的指令</span></span><br><span class="line">!5</span><br></pre></td></tr></table></figure><h3 id="时间日期类的指令"><a href="#时间日期类的指令" class="headerlink" title="时间日期类的指令"></a>时间日期类的指令</h3><blockquote><p>date 指令-显示当前日期</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础语法</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前时间</span></span><br><span class="line">date</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前年份</span></span><br><span class="line">date +%Y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前月份</span></span><br><span class="line">date +%m</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前哪一天</span></span><br><span class="line">date +%d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示年月日时分秒</span></span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br></pre></td></tr></table></figure><h4 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">date -s 字符串时间</span><br></pre></td></tr></table></figure><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><blockquote><p>查看日历指令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">cal [选项]</span><br><span class="line">-h  查看帮助</span><br></pre></td></tr></table></figure><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><blockquote><p>将指令从指定目录向下递归遍历其个个子目录，将满足条件的文件或者目录 显示在终端</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">find [搜索范围] [选项]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项</span></span><br><span class="line">-name按照文件名查找模式</span><br><span class="line">-user查找指定用户所有文件</span><br><span class="line">-size按照指定文件大小查找文件</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 /home/jysp 目录下 login.html 文件</span></span><br><span class="line">find /home/jysp/ -name login.html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 /home/jysp 目录下 gif 文件</span></span><br><span class="line">find /home/jysp/ -name *.gif</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索 / 目录下 大小超过20M的 文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-20M小于20M</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">20M等于20M</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">单位 k,M,G,T...</span></span><br><span class="line"></span><br><span class="line">find / -size +20M</span><br></pre></td></tr></table></figure><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><blockquote><p>locaate指令可以<strong>快速定位文件路径</strong>。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">locate 搜索文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用实例</span></span><br><span class="line">案例1:请使用locate 指令快速定位 hello.txt 文件所在目录</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>特别说明<br><strong>由于locate指今基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库。</strong></p></blockquote><h4 id="grep-和"><a href="#grep-和" class="headerlink" title="grep 和 |"></a>grep 和 |</h4><blockquote><p>grep 过滤查找，管道符 “|”, 表示将前一个命令的处理结果输出传递给后面的命令处理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">grep [选项] 查找内容 源文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项</span></span><br><span class="line">-n显示匹配及行号</span><br><span class="line">-i忽略字母大小</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">请在hello.txt 文件中，查找 31，并显示行号</span><br><span class="line">grep -ni 30 hello.txt</span><br><span class="line"></span><br><span class="line">cat hello.txt |grep -n 30</span><br></pre></td></tr></table></figure><h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><h4 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip/gunzip"></a>gzip/gunzip</h4><blockquote><p>gzip 用于压缩文件，gunzip 用于解压</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩，只能将文件压缩为 *.gz 文件，支持多文件，空格分开</span></span><br><span class="line">gzip 文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压文件命令</span></span><br><span class="line">gunzip 文件.gz</span><br></pre></td></tr></table></figure><h4 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip/unzip"></a>zip/unzip</h4><blockquote><p>zip 用于压缩文件，unzip用于解压文件。项目发包中常用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">zip [选项] xxx.zip 要压缩的内容</span><br><span class="line">-r:递归压缩，即压缩目录</span><br><span class="line"></span><br><span class="line">unzip [选项] xxx.zip</span><br><span class="line">-d&lt;目录&gt;：指定压缩后文件存放目录</span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line">1、将/test 下所有文件压缩成 test.zip</span><br><span class="line">zip -r test.zip test</span><br><span class="line">2、将 test.zip 解压到 test/zip 目录下</span><br><span class="line">unzip -d /test/zip test.zip </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><blockquote><p>tar 是打包指令，最后打包文件是 .tar.gz的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line"></span><br><span class="line">tar [选项] XXX.tar.gz 打包内容</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选项</span></span><br><span class="line">-x：解压.tar文件</span><br><span class="line">-z：打包同时压缩</span><br><span class="line">-v：显示所有过程</span><br><span class="line">-f：指定压缩文件名</span><br><span class="line">-j：有bz2属性的</span><br><span class="line">-c：产生.tar打包文件，用于压缩文件</span><br></pre></td></tr></table></figure><p>1、压缩多个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf a.tar.gz a1.txt a2.txt</span><br></pre></td></tr></table></figure><p>2、压缩目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf myhome.tar.gz /home/</span><br></pre></td></tr></table></figure><p>3、解压到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf a.tar.gz</span><br></pre></td></tr></table></figure><p>4、解压到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定目录必须已存在</span></span><br><span class="line">tar -zxvf myhome.tar,gz -C /test/gz</span><br></pre></td></tr></table></figure><h3 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h3><blockquote><p>crontab 进行定时任务的设置。</p><p>系统在某个时间执行的特定的命令或程序。</p><p>分类：</p><p>1、系统工作，如病毒扫描 </p><p>2、个别用户工作，比如 MySQL数据库备份</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本语法</span></span><br><span class="line">contab [选项]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用选项</span></span><br><span class="line">-e编辑crontab定时任务</span><br><span class="line">-l查询crontab任务</span><br><span class="line">-r删除当前用户所有的crontab任务</span><br></pre></td></tr></table></figure><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>设置任务调度文件： /etc/crontab</p><p>设置个人任务调度： crontab -e</p><p>输入任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每小时的每分钟执行 ls-l /etc/&gt;&gt; /tmp/to.txt</span></span><br><span class="line">*/1**** ls -l  /etc/&gt; /tmp/to.txt</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第1个*</td><td>1h中的第几分钟</td><td>0-59</td></tr><tr><td>第2个*</td><td>一天中的第几个小时</td><td>0-23</td></tr><tr><td>第3个*</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第4个*</td><td>一年中的地几个月</td><td>1-12</td></tr><tr><td>第5个*</td><td>一周当中的星期几</td><td>0-7（0,7都代表星期日）</td></tr></tbody></table><p><strong>特殊参数说明</strong></p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>任意时间</td></tr><tr><td>,</td><td>代表不连续时间。如”0 6,8 * * * 命令”,每天6:00,8:00执行一次</td></tr><tr><td>-</td><td>代表连续时间范围。如”0 5 * * 1-6 命令”,代表周一到周6凌晨5点0分执行</td></tr><tr><td>*/n</td><td>代表隔多久执行一次。如”*/10 * * * * 命令”，每隔10分钟执行一次</td></tr></tbody></table><h4 id="调度任务实例"><a href="#调度任务实例" class="headerlink" title="调度任务实例"></a><strong>调度任务实例</strong></h4><blockquote><p>每个一分钟，就将当前日期信息，追加到 /xxx/mydate 文件中</p></blockquote><ol><li><p>编写一个文件 mytask1.sh</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; /xxx/mydate</span><br></pre></td></tr></table></figure></li><li><p>给脚本可执行权限</p></li><li><p>crontab -e</p></li><li><p>*/1 * * * *   /xxx/mytask1.sh</p></li></ol><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><ol><li>contab -r  终止任务调度</li><li>contab -l  列出当前有哪些任务调度</li><li>service contab restart  重启任务调度</li></ol><h3 id="磁盘分区、挂载"><a href="#磁盘分区、挂载" class="headerlink" title="磁盘分区、挂载"></a>磁盘分区、挂载</h3><blockquote><p>分区方式：</p><ol><li>mbr分区<ul><li>最多支持4个主分区</li><li>系统只能安装在主分区</li><li>扩展分区要占一个主分区</li><li>MBR最大只支持2TB，但拥有最好兼容性</li></ul></li><li>gpt分区<ol><li>支持无限多个分区（操作系统可能会限制，如windows下最多128个）</li><li>支持最大18EB的大容量（EB=1024PB,pb=1024TB）</li><li>windows7 64位以后才支持gpt</li></ol></li></ol></blockquote><p>硬盘说明：</p><p>对于Linux硬盘分为 IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>对于IDE硬盘：驱动标识符 “hdx~”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hd 表名分区类型就是IDE</span><br><span class="line">X 为盘号，a基本盘，b基本从属盘，c为辅助主盘，d为辅助从属盘</span><br><span class="line">~ 代表分区，主分区、拓展分区（1-4），从5开始为逻辑分区</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hda3</span></span><br><span class="line">IDE硬盘上第三个主分区或拓展分区</span><br></pre></td></tr></table></figure><p>对于SCSI硬盘使用 “sd”表示分区所在设备的类型，其余跟 IDE硬盘一样</p><h4 id="查看系统分区和挂载"><a href="#查看系统分区和挂载" class="headerlink" title="查看系统分区和挂载"></a>查看系统分区和挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk -f</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230508112227249.png" alt="image-20230508112227249"></p><h4 id="Linux挂载今典案例"><a href="#Linux挂载今典案例" class="headerlink" title="Linux挂载今典案例"></a>Linux挂载今典案例</h4><blockquote><p>在Linux中增加一个新的硬盘 sdb1(2G)，并挂载到/home/newdisk</p></blockquote><p><strong>如何增加一块硬盘</strong></p><ol><li><p>虚拟机添加硬盘（需重启）</p></li><li><p>分区  fdisk /dev/sdb</p><p> 输入 n 新增分区，然后输入p,分区类型为主分区,然后输入w,保存退出</p></li><li><p>格式化  mkfs -t ext4 /dev/sdb1</p></li><li><p>挂载 先创建一个 /home/newdisk,挂载 mount /dev/sdb1 /home/newdisk</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount 设备名称 挂载名录</span><br><span class="line">umount 设备名称 挂载名录</span><br></pre></td></tr></table></figure></li><li><p>设置永久挂载（重启后任然生效）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">/dev/sdb1/home/newdiskext4defaults0 0</span><br></pre></td></tr></table></figure></li></ol><h3 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h3><h4 id="查询系统磁盘使用情况"><a href="#查询系统磁盘使用情况" class="headerlink" title="查询系统磁盘使用情况"></a>查询系统磁盘使用情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br><span class="line">df -l</span><br></pre></td></tr></table></figure><h4 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认当前目录</span></span><br><span class="line">du -ach /目录</span><br><span class="line">-s 指定目录占用大小汇总</span><br><span class="line">-h带计量单位</span><br><span class="line">-a含文件</span><br><span class="line">--max-depth=1子目录深度</span><br><span class="line">-c汇总值</span><br></pre></td></tr></table></figure><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><ol><li><p>统计/home 文件夹下文件个数</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /home | grep &quot;^-&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>统计/home 文件夹下目录个数</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /home | grep &quot;^d&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>统计/home 文件夹下文件个数，包括子文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /home | grep &quot;^-&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>统计/home 文件夹下目录个数，包括文件夹里的</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /home | grep &quot;^d&quot; | wc -l</span><br></pre></td></tr></table></figure></li><li><p>以树状显示目录结构</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure></li></ol><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="查看虚拟网络IP和网关"><a href="#查看虚拟网络IP和网关" class="headerlink" title="查看虚拟网络IP和网关"></a>查看虚拟网络IP和网关</h4><p>VMware 编辑-&gt; 虚拟网络编辑器</p><p>为防止IP每次登录动态分配，设置静态IP</p><p>修改配置文件来指定IP，并可连接到外网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eth0 代表第一块网卡，eth1代表第二块</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h4><blockquote><p>ps命令是用来查看目前系统中，有哪些正在执行，以及他们执行的情况，可不加任何参数。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">| grep nginx 过滤查询进程信息</span></span><br><span class="line">ps -aux | grep nginx</span><br><span class="line">-a显示当前终端的所有进程信息</span><br><span class="line">-u以用户的格式显示进程信息</span><br><span class="line">-x显示后台进程运行的参数</span><br><span class="line">-e显示所有进程。</span><br><span class="line">-f全格式</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>PID</td><td>进程识别号</td></tr><tr><td>TTY</td><td>终端机号</td></tr><tr><td>TIME</td><td>此进程所消CPU时间</td></tr><tr><td>CMD</td><td>正在执行的命令或进程号</td></tr><tr><td>TT</td><td>终端名称</td></tr><tr><td>STAT</td><td>S-睡眠，s-先导进程，N-优先级低，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者停止</td></tr><tr><td>CPU</td><td>cpu 进程占用</td></tr><tr><td>RSS</td><td>物理内存占用</td></tr><tr><td>VSZ</td><td>虚拟内存占用大小</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230508152858498.png" alt="image-20230508152858498"></p><h4 id="查询某进程父进程"><a href="#查询某进程父进程" class="headerlink" title="查询某进程父进程"></a>查询某进程父进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户进程<span class="built_in">id</span>  父进程<span class="built_in">id</span></span></span><br><span class="line">root       1602   1569  0 12:13 ?        00:00:00 nginx: master process nginx -g daemon off;</span><br><span class="line">101        1690   1602  0 12:13 ?        00:00:00 nginx: worker process</span><br><span class="line">root      40487   2197  0 15:43 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><p>基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过进程号杀死进程</span></span><br><span class="line">kill  [选项] 进程号</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过进程名杀死进程，支持通配符</span></span><br><span class="line">killall 进程名字</span><br><span class="line">-9：强迫进程立即停止</span><br></pre></td></tr></table></figure><p><strong>实践案例</strong></p><ol><li><p>踢掉某个非法登录用户</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep sshd</span><br><span class="line">kill xxx_id(第二列参数)</span><br></pre></td></tr></table></figure></li><li><p>终止远程登录服务sshd,在适当时候重启sshd服务</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep sshd</span><br><span class="line">kill xxx_id(第二列参数)</span><br></pre></td></tr></table></figure></li><li><p>终止多个gedit编辑器</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall gedit</span><br></pre></td></tr></table></figure></li><li><p>强制杀掉一个终端</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 gedit</span><br></pre></td></tr></table></figure></li><li><p>查看进程树</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pstree</span><br><span class="line">-p: 显示进程PID</span><br><span class="line">-u: 显示进程的所属用户</span><br></pre></td></tr></table></figure></li></ol><h4 id="查看CPU、内存和硬盘详细信息"><a href="#查看CPU、内存和硬盘详细信息" class="headerlink" title="查看CPU、内存和硬盘详细信息"></a>查看CPU、内存和硬盘详细信息</h4><blockquote><p><a href="https://blog.csdn.net/lishiyu93/article/details/120951677">参考链接</a></p></blockquote><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><blockquote><p>服务本质就是进程，但是运行在后台的，通常都会监听某个端口，等待其他程序知识。比如 mysql,sshd防火墙等，又称为守护进程，是Linux中非常重要的知识点。</p></blockquote><h4 id="管理指令"><a href="#管理指令" class="headerlink" title="管理指令"></a>管理指令</h4><blockquote><p>service/systemctl 命令设置后立马生效，但是重启后修改会重置。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service 服务名 start| stop | restart | reload | status</span><br><span class="line">systemctl （&gt;=7.0）</span><br></pre></td></tr></table></figure><h4 id="查看关闭重启防火墙情况"><a href="#查看关闭重启防火墙情况" class="headerlink" title="查看关闭重启防火墙情况"></a>查看关闭重启防火墙情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>1.查看防火墙此时运行状态。方式有两种具体如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# firewall-cmd --state</span><br><span class="line">[root@localhost student]# systemctl status firewalld</span><br></pre></td></tr></table></figure><p>2.查看防火墙是否开机自启。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# systemctl is-enabled</span><br></pre></td></tr></table></figure><p>3.查看接口区域，这里以ens33为例。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# firewall-cmd --get-zone-of-interface=ens33</span><br><span class="line">public</span><br></pre></td></tr></table></figure><p>4.查看绑定区域的接口。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# firewall-cmd --get-active-zones</span><br><span class="line">docker</span><br><span class="line">  interfaces: docker0</span><br><span class="line">public</span><br><span class="line">  interfaces: ens33</span><br></pre></td></tr></table></figure><p>5.查看所有开放端口。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@zq-virtual-machine:/home/zq# netstat -aptn</span><br></pre></td></tr></table></figure><p>2.1 开启防火墙</p><p>1.执行<strong>systemctl start firewalld.service</strong>命令开启防火墙，默认是开启的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# systemctl start firewalld.service</span><br></pre></td></tr></table></figure><p>2.2 关闭防火墙</p><p>1.执行<strong>systemctl stop firewalld.service</strong>命令关闭防火墙。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>2.3 重启防火墙</p><p>1.执行<strong>systemctl restart firewalld.service</strong>命令重启防火墙。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>2.4 开机自启防火墙</p><p>1.执行<strong>systemctl enable firewalld.service</strong>命令设置防火墙开机自启。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable firewalld.service</span><br></pre></td></tr></table></figure><h4 id="打开端口-服务"><a href="#打开端口-服务" class="headerlink" title="打开端口/服务"></a>打开端口/服务</h4><p><strong>3.1 打开端口</strong></p><p><strong>临时打开端口</strong></p><p>1.执行<strong>firewall-cmd –zone=public –add-port=80/tcp</strong>命令打开80/tcp。这里需要注意，这是临时的打开端口，重启后无效。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# firewall-cmd --zone=public --add-port=80/tcp</span><br></pre></td></tr></table></figure><p>2.执行<strong>systemctl restart firewalld.service</strong>命令重启防火墙。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost student]# systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p><strong>注意:当开放端口设置完成后必须要重启，否则不生效！！！</strong></p><p><strong>永久打开端口</strong></p><p>1.执行<strong>firewall-cmd –permanent –zone=public –add-port=80/tcp</strong>命令永久打开80/tcp。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br></pre></td></tr></table></figure><p>2.执行<strong>systemctl restart firewalld.service</strong>命令重启防火墙。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p><strong>注意:当开放端口设置完成后必须要重启，否则不生效！！！</strong></p><p><strong>3.2 打开服务</strong></p><p><strong>临时打开服务</strong></p><p>1.执行<strong>firewall-cmd –zone=public –add-service=http</strong>命令公共区域中临时打开服务HTTP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-service=http</span><br></pre></td></tr></table></figure><p><strong>永久打开服务</strong></p><p>1.执行<strong>firewall-cmd –permanent –zone=public –add-service=http</strong>命令公共区域中临时打开服务HTTP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http </span><br></pre></td></tr></table></figure><h4 id="查看系统服务"><a href="#查看系统服务" class="headerlink" title="查看系统服务"></a>查看系统服务</h4><p>方式1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;7</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统服务</span></span><br><span class="line">setup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;=7</span></span><br><span class="line">nmtui</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;7</span></span><br><span class="line">ls -l /etc/init.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;=7</span></span><br><span class="line">ls -l /usr/lib/systemd/</span><br></pre></td></tr></table></figure><h4 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h4><blockquote><p>top 命令，与ps相似，不同的是top会隔一段时间跟新正在运行的进程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top [选项]</span><br><span class="line">-d指定几秒后更新，默认3s</span><br><span class="line">-i使top 不显示任何闲置或者僵死进程</span><br><span class="line">-p通过指定监控进程ID来仅仅监控某个进程的状态</span><br></pre></td></tr></table></figure><p>快捷键</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认值</td></tr><tr><td>M</td><td>以内存使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><p><strong>终止指定索引</strong></p><p>top指令后，输入k,回车，在输入要结束的进程ID号</p><h4 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h4><p>查看系统网络情况 netstat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">基本用法</span></span><br><span class="line">netstat [选项]</span><br><span class="line"></span><br><span class="line">-an 按一定顺序排列输出</span><br><span class="line">-p显示哪个进程在调用</span><br></pre></td></tr></table></figure><p>查看服务名为 sshd 的服务信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep sshd</span><br></pre></td></tr></table></figure><h4 id="chkconfig-指令"><a href="#chkconfig-指令" class="headerlink" title="chkconfig 指令"></a>chkconfig 指令</h4><blockquote><p>通过 chkconfig  命令可以给每个服务器各运行级别设置自启动/关闭</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务</span></span><br><span class="line">chkconfig 服务名 --list|grep xxx</span><br><span class="line"></span><br><span class="line">chkconfig 服务名 --list</span><br><span class="line"></span><br><span class="line">chkconfig --level 5 服务名 on/off</span><br></pre></td></tr></table></figure><h3 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h3><p>RPM和YUM</p><p>rpm包的管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询已安装包 XX</span></span><br><span class="line">rpm -qa|grep xx</span><br></pre></td></tr></table></figure><p>一个rpm包名: firefox-45.0.1-1.el6.centos.x86_64.rpm</p><p>名称:firefox版本号: 45.0.1-1</p><p>适用操作系统: el6.centos</p><p>.x86 64表示centos6.x的64位系统。如果是i686、i386表示32位系统，noarch表示通用。</p><h4 id="rpm-包管理的其他查询命令"><a href="#rpm-包管理的其他查询命令" class="headerlink" title="rpm 包管理的其他查询命令"></a>rpm 包管理的其他查询命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpm-qa :查询所安装的所有rpm软件包</span><br><span class="line"></span><br><span class="line">rpm -ql软件包名：查询软件包中文件</span><br><span class="line"></span><br><span class="line">rpm -qf 文件全路径名：查询文件所属软件包</span><br><span class="line"></span><br><span class="line">rpm -q 软件包名：查询软件包是否安装</span><br><span class="line"></span><br><span class="line">rpm -qi 软件包名：查询软件包信息</span><br></pre></td></tr></table></figure><h4 id="yum-包管理"><a href="#yum-包管理" class="headerlink" title="yum 包管理"></a>yum 包管理</h4><blockquote><p><strong>Yum</strong> 是一个 shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p><p><strong>apt</strong> 是 ubuntu linux 版本用的包管理命令， mac 包管理使用 <strong>brew</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看yum仓库中所有可以安装的rpm包</span></span><br><span class="line">yum list|grep &#x27;^zip&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据命令查找该命令属于哪个安装包，最好写命令的绝对路径，如果不知道绝对路径可以在命令前用*匹配</span></span><br><span class="line">yum provides 命令</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum 本地安装</span></span><br><span class="line">yum localinstall -y 包名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum 源安装</span></span><br><span class="line">yum install -y 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网络安装</span></span><br><span class="line">yum install -y 网址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新安装该软件，可以用来恢复之前误删除该服务的重要文件，但是恢复的是最初始的配置</span></span><br><span class="line">yum reinstall -y 包名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前系统中，有哪些软件可以进行更新</span></span><br><span class="line">yum check-update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加软件名就是更新指定的软件包，不加软件名就是更新该系统中全部可以更新的软件<span class="string">&#x27;(不加软件名的更新很危险，它会将你的内核更新到最新版本，会导致很多命令不同，有些服务可能会失效)&#x27;</span></span></span><br><span class="line">yum update -y [软件名]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载指定的软件</span></span><br><span class="line">yum erase -y 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载指定的软件</span></span><br><span class="line">yum remove -y 软件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除所有的缓存，也可以清除默认路径下yum下载的包</span></span><br><span class="line">yum clean all(Packages)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统中还有哪些组可以安装</span></span><br><span class="line">yum group list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装包组</span></span><br><span class="line">yum groups install 包组名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">：卸载包组</span> </span><br><span class="line">yum groups remove 包组名字</span><br></pre></td></tr></table></figure><p>包的默认yum下载的路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.conf </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">cachedir=/var/cache/yum/$basearch/$releasever</span><br><span class="line">keepcache=0</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将keepcache改成1就可以吧rpm包下载到本地</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以用选项来下载rpm包到本地：</span></span><br><span class="line">--downloadonly：仅下载，不安装</span><br><span class="line">--downloaddir：指定下载的目录</span><br></pre></td></tr></table></figure><h3 id="Linux-安装JDK"><a href="#Linux-安装JDK" class="headerlink" title="Linux 安装JDK"></a>Linux 安装JDK</h3><blockquote><p>上传解压到 /usr/java/jdk1.8_131。 配置环境变量 </p></blockquote><p>/etc/profile</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># jdk</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">JAVA_HOME</span>=<span class="regexp">/usr/</span>java/jdk1<span class="number">.8</span><span class="number">.0_281</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">JRE_HOME</span>=$&#123;<span class="variable constant_">JAVA_HOME</span>&#125;/jre</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">CLASSPATH</span>=.:$&#123;<span class="variable constant_">JAVA_HOME</span>&#125;/<span class="attr">lib</span>:$&#123;<span class="variable constant_">JRE_HOME</span>&#125;/lib</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=$&#123;<span class="variable constant_">JAVA_HOME</span>&#125;/<span class="attr">bin</span>:$PATH</span><br><span class="line"></span><br><span class="line"># nodejs</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NODE_PATH</span>=<span class="regexp">/home/</span>jysp/workspace/node-v16<span class="number">.17</span><span class="number">.0</span>/lib/node_modules</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置完成需要注销重新登录</p><h4 id="安装jdk11版本及以上版本"><a href="#安装jdk11版本及以上版本" class="headerlink" title="安装jdk11版本及以上版本"></a>安装jdk11版本及以上版本</h4><blockquote><p>此时解压后的文件夹中没有jre 文件夹</p></blockquote><p>进入解压后的jdk目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/jlink --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;linux 由 unix 演化而来&lt;/p&gt;
&lt;p&gt;基于Linux 开源的内核，不同厂商开发出了不同名称的系统: 如 Redhat,CentOSE, Ubuntu,Suse,红旗等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;虚拟机的网络连接形式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;桥连接&lt;/p&gt;
&lt;p&gt;  Linux 可以和其他的通信，但是可能造成IP冲突&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NAT&lt;/p&gt;
&lt;p&gt;  网络地址转换方式，linux 可以访问外网，不会造成IP冲突&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主机模式&lt;/p&gt;
&lt;p&gt;  你的Linux是一个独立的主机，不能访问外网&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vmtools&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此工具可以让 centOS 与主机共享文件，剪切板&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="linux" scheme="https://wyf195075595.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://wyf195075595.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell 脚本</title>
    <link href="https://wyf195075595.github.io/2023/04/23/programming/linux/shell/"/>
    <id>https://wyf195075595.github.io/2023/04/23/programming/linux/shell/</id>
    <published>2023-04-23T07:23:10.000Z</published>
    <updated>2023-05-08T03:27:48.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>shell 脚本开头的两个字符叫做 shebang “#!”。在unix系统中，程序会分析 shebang 后面内容，作为解析器的指令。相当于告诉系统用那种解析器去解读脚本。yarn 就是python 开发的</p></blockquote><ul><li>以 #!/bin/sh 开头的文件，程序在执行的时候会调用 /bin/sh，也就是bash解释器</li><li>以 #!/usr/bin/python 开头的文件，代表指定python解释器去执行</li><li>以 #!/usr/bin/env 解释器名称，是一种在不同平台上都能正确找到解释器的办法</li></ul><span id="more"></span><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="新建一个shell脚本-test-sh"><a href="#新建一个shell脚本-test-sh" class="headerlink" title="新建一个shell脚本, test.sh"></a>新建一个shell脚本, test.sh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">echo &#x27;我是一行shell 脚本文件&#x27;</span><br></pre></td></tr></table></figure><h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test.sh # 找不到目录</span><br><span class="line"></span><br><span class="line">./test.sh # 权限不够</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加权限,就可以运行上边代码</span></span><br><span class="line">chmod +x hello.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定解析器运行</span></span><br><span class="line">/bin/sh ./test.sh</span><br><span class="line"></span><br><span class="line">. ./test.sh # . 等于 source </span><br><span class="line">source ./test.sh</span><br></pre></td></tr></table></figure><h4 id="查看当前解析器"><a href="#查看当前解析器" class="headerlink" title="查看当前解析器"></a>查看当前解析器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><h3 id="脚本注释"><a href="#脚本注释" class="headerlink" title="脚本注释"></a>脚本注释</h3><blockquote><p>为了方便阅读，要有写注释的习惯。</p><p>当行注释： #</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>history </p><p>  查看历史命名，echo $HISTSIZE 命令历史条数</p><p>  打开会话历史文件 ~/.bash_history</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">history #命令以及参数</span><br><span class="line">-c:清空内存中命令历史;</span><br><span class="line">-r:从文件中恢复历史命令</span><br><span class="line">数字 :显示最近n条命令 history 10</span><br><span class="line"></span><br><span class="line">执行指定历史命令 !id：!502</span><br><span class="line">执行上一条命令： !!</span><br></pre></td></tr></table></figure></li><li><p>echo</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-n 不换行输出</span><br><span class="line">-e 解析字符串特殊符号</span><br><span class="line"></span><br><span class="line">\r 回车</span><br><span class="line">\t 制表</span><br><span class="line">\n 换行</span><br><span class="line">\b 退格</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>eval</p><p>  执行多个命令</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval ls; cd /tmp</span><br></pre></td></tr></table></figure></li><li><p>exec</p><p>  不创建子进程，执行后续命令，执行完毕自动 exit</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec date</span><br></pre></td></tr></table></figure></li><li><p>export</p></li><li><p>read</p></li><li><p>shift</p></li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctrl + l # 清屏</span><br><span class="line">ctrl + a # 把光标移动到命令行开头 </span><br><span class="line">ctrl + e # 把光标移动到命令行结尾</span><br><span class="line">ctrl + u # 删除或剪切光标之前的命令</span><br><span class="line">ctrl + k # 删除或剪贴光标之后的内容</span><br><span class="line">ctrl + R # 搜索历史 </span><br><span class="line">ctrl + S # 暂停屏幕输出</span><br><span class="line">ctrl + D # 退出当前终端</span><br><span class="line">tab 补全</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>临时存放，shell 进程是一个作用域，弱类型跟js一样。</p><p>变量与赋值之间不能空格</p><p>单引号不识别特殊语法，双引号识别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&#x27;aaa&#x27;</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><h4 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h4><blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0  获取she11脚本文件名，以及脚本路</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">n  获取shel1脚本的第n个参数,n在1~9之间，如<span class="variable">$1</span>,<span class="variable">$2</span>，..<span class="variable">$9</span> ，大于9则需要写，<span class="variable">$10</span>，参数空格隔开</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment">#  获取执行的she11脚本后面的参数总个数</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*  获取shel1脚本所有参数，不加引号等同于<span class="variable">$@</span>作用，加上引号<span class="string">&quot;$*&quot;</span>作用是 接收所有参数为单个字符串<span class="string">&quot;<span class="variable">$1</span> <span class="variable">$2</span>...</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="string">@  不加引号，效果同上，加引号，是接收所有参数为独立字符串，如”<span class="variable">$1</span>”“<span class="variable">$2</span>” “<span class="variable">$3</span>”...，空格保留</span></span></span><br></pre></td></tr></table></figure><p><em><em>$@ 与 $</em> 的区别</em>*</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;print each param fromfor var in \&quot;\$*\&quot;&quot;</span><br><span class="line">for var in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">echo &quot;$var&quot; # 输出一行</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;print each param fromfor var in \&quot;\$@\&quot;&quot;</span><br><span class="line">for var in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">echo &quot;$var&quot; # 输出多行</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="特殊状态变量"><a href="#特殊状态变量" class="headerlink" title="特殊状态变量"></a>特殊状态变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">? 上一次命令执行状态返回值，0正确，非0失败</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$ 当前she11脚本的进程号</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">! 上一次后台进程的PID</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_ 上次之前执行的命令，最后一个参数</span></span><br></pre></td></tr></table></figure><p><strong>source 是在当前shell环境加载脚本，因此保留当前变量。bash都会开启一个子shell,不会保留当前shell变量</strong></p><p><strong>脚本控制返回值玩法</strong></p><p>test.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$#</span>获取参数个数-ne 不等于的情况 &amp;&amp; 并且</span></span><br><span class="line"><span class="meta prompt_">[$</span><span class="language-bash"><span class="comment"># -ne 2] &amp;&amp; &#123;</span></span></span><br><span class="line">echo &quot;must be two args&#x27;</span><br><span class="line">exit 119 #终止程序运行，且返回119状态码，提供给当前shelL的S?变量，若是在函数里 可以return 119用法</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出当前进程pid</span></span><br><span class="line">echo $$</span><br><span class="line"></span><br><span class="line">echo ok</span><br></pre></td></tr></table></figure><p>执行完上边脚本，$? 会保存 119</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时会提示 must be two args</span></span><br><span class="line">bash test.sh params1 params2 params3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">119</span></span><br><span class="line">echao $?</span><br></pre></td></tr></table></figure><p><strong>让程序后台执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台执行 ping baidu.com 并将日志输出到黑洞文件中.命令产生一个pid</span></span><br><span class="line">nohup ping baidu.com &amp; 1&gt; /dev/null</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出前面pid</span></span><br><span class="line">echo $!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><blockquote><p>个人变量优先于全局</p><p>用户个人配置文件 ~/.bash_profile</p><p>远程用户特有文件 ~/.bashrc</p><p>全局配置文件  /etc/profile, /etc/bashrc. 系统建议不要直接修改主文件而是创建 /etc/profile.d/</p></blockquote><p>set : 检索变量 name开头</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set |grep ^name</span><br></pre></td></tr></table></figure><p>env : 只显示全局变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env |wc -l # 显示输出条数</span><br></pre></td></tr></table></figure><p>declare: 输出所有的变量，如同set</p><p>export: 显示和设置环境变量值</p><p>unset 变量名: 撤销环境变量</p><p>readonly：只有shell结束，只读便变量失效。只对当前shell生效</p><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230424102750297.png" alt="image-20230424102750297"></p><h4 id="子串玩法"><a href="#子串玩法" class="headerlink" title="子串玩法"></a>子串玩法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$&#123;变量)返回变量值</span><br><span class="line">$&#123;#变量)返回变量长度，字符长度</span><br><span class="line">$&#123;变量:start&#125;返回变量start数值之后的字符</span><br><span class="line">$&#123;变量:start:length&#125;提取start之后的length限制的字符</span><br><span class="line">$&#123;变量#word&#125;从变量开头删除最短匹配的word子串</span><br><span class="line">$&#123;变量##word)从变量开头，删除最长匹配的word</span><br><span class="line">$&#123;变量%word&#125;从变量结尾删除最短的word</span><br><span class="line">$&#123;变量%%word&#125;从变量结尾开始删除最长匹配的word</span><br><span class="line">$&#123;变量/pattern/string&#125;用string代替第一个匹配的pattern</span><br><span class="line">$&#123;变量//pattern/string&#125;用string代替所有的pattern</span><br></pre></td></tr></table></figure><p>统计字符串长度的其他方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">expr length &quot;$&#123;name&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回行数</span></span><br><span class="line">cat test.txt| wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回最长行数的字符数量</span></span><br><span class="line">cat test.txt| wc -L</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;name&#125;&quot; | awk &#x27;&#123;print length($0)&#125;&#x27;</span><br></pre></td></tr></table></figure><p>子串拓展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果parameter变量值为空，返回word字符串$&#123;parameter:-word&#125;</span><br><span class="line"></span><br><span class="line">如果para变量为空，则word替代变量值，且返回其值$&#123;parameter:=word&#125;</span><br><span class="line"></span><br><span class="line">如果para变量为空，word当作stderr输出，否则输出变量值用于设置变量为空导致错误时，返回的错误信息$&#123;parameter:?word&#125;</span><br><span class="line"></span><br><span class="line">如果para变量为空，什么都不做，否则word返回$&#123;parameter:+word&#125;</span><br></pre></td></tr></table></figure><p>删除7天以上的过期数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find xargs 搜索，且删除</span><br><span class="line"></span><br><span class="line">find 需要搜索的目录-name 你要搜索的文件名字-type 文件类型-mtime +7 xargs rm -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定目录，超过7天的.tar.gz 压缩包</span> </span><br><span class="line">find $&#123;dir_path:=/data/mysql_back_data/&#125; -name &#x27;*.tar.gz&#x27; -type f -mtime +7 xargs rm </span><br></pre></td></tr></table></figure><h4 id="linux-特殊符号"><a href="#linux-特殊符号" class="headerlink" title="linux 特殊符号"></a>linux 特殊符号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;vars&#125;取出变量结果</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">()再括号中执行命令，且拿到命令的执行结果</span></span><br><span class="line">``再括号中执行命令，且拿到命令的执行结果</span><br><span class="line">()开启子she11执行命令结果</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">vars取出变量结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父子shell"><a href="#父子shell" class="headerlink" title="父子shell"></a>父子shell</h3><blockquote><p>开启子shell去做其他事情不会耽误我去做其他事情，类似于于多进程</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230424143608565.png" alt="image-20230424143608565"></p><blockquote><p>-</p><ol><li>source和点执行脚本，只在当前的shell环境中执行生效</li><li>指定bash sh解释器运行脚本，是开启subshell ,开启shell运行脚本命令</li><li>./script,都会指定shebang, 通过解释器运行，也是开启subshell 运行命令</li></ol></blockquote><h4 id="父子-shell-查看方式"><a href="#父子-shell-查看方式" class="headerlink" title="父子 shell 查看方式"></a>父子 shell 查看方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pstree</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 sshd 项</span></span><br><span class="line"></span><br><span class="line">ps -ef --forest</span><br></pre></td></tr></table></figure><h4 id="创建进程列表"><a href="#创建进程列表" class="headerlink" title="创建进程列表"></a>创建进程列表</h4><blockquote><p>使用小括号</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(cd ~; pwd;ls; cd /tmp/; pwd; ls)</span><br></pre></td></tr></table></figure><h4 id="判断父子shell"><a href="#判断父子shell" class="headerlink" title="判断父子shell"></a>判断父子shell</h4><blockquote><p>通过内置变量 $BASH_SUBSHELL, 值为0 则是当前shell,否者就是可开启了子shell</p></blockquote><h3 id="内置命令，外置命令"><a href="#内置命令，外置命令" class="headerlink" title="内置命令，外置命令"></a>内置命令，外置命令</h3><blockquote><p>内置命令：在系统启动时就在载入内存，常驻内存，执行效率高但是占用资源。如 cd,</p><p>外置命令：用户需要从硬盘中读取，在写入内存加载.如 nginx</p></blockquote><p>判断命令是否内置，外置命令</p><ul><li>通过Linux的 【type 命令 】验证（输出此命令是shell内嵌），不会开启子进程</li><li>外置命令执行肯定会开启子进程</li><li>查询所有内置命令：compgen -b</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for n in &#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">echo $n</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计循环时间</span></span><br><span class="line">time for n in &#123;1..10000&#125;</span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">生成1-100数字中间用 change分割的字符串</span></span><br><span class="line">  char= `seq -s &quot;change&quot; 100`</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">输出打印到黑洞文件，不在控制台打印</span></span><br><span class="line">  echo $&#123;#char&#125; &amp;&gt;/dev/null</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">real    0m43.783s实际时间</span><br><span class="line">user    0m8.716s用户时间</span><br><span class="line">sys     0m32.445s内核时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>批量修改文件名</p><p>将所欲后缀 _finished.jpg 图片名称去除 _finished</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出所有图片名包含 xxx_finished.jpg</span></span><br><span class="line">ls *fin*.jpg</span><br><span class="line"></span><br><span class="line">for file in `ls *fin*.jpg`</span><br><span class="line">do</span><br><span class="line">mv $file `echo $&#123;file//_finished/&#125;`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><blockquote><p>linux 大多运算不持支小数。 大多数运算符与js,java 类似</p></blockquote><h4 id="双小括号"><a href="#双小括号" class="headerlink" title="双小括号"></a>双小括号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这总反式不能取值</span></span><br><span class="line">((i + 1))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以取值</span></span><br><span class="line">echo $((i + 1))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2的3次方</span></span><br><span class="line">((2**3))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算 1-10 相加</span></span><br><span class="line">echo $((`seq -s + 10`))</span><br></pre></td></tr></table></figure><p>比较运算中 真为1 ，假为0</p><p><strong>运算脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">print_usage()&#123;</span><br><span class="line">  printf &quot;请输入一个数字\n&quot;</span><br><span class="line">  exit 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接收用户输入</span></span><br><span class="line"></span><br><span class="line">read -p &quot;请输入数字：&quot; firstnum</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-n 判断字符串是否为空，空-不成立，反之-成立</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sed 作用，将 输入的值，把所有数字替换为空，剩下的就是非数字</span></span><br><span class="line">if [ -n &quot;`echo $firstnum|sed &#x27;s/[0-9]//g&#x27;`&quot; ]</span><br><span class="line">  then</span><br><span class="line">    print_usage</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">read -p &quot;输入 运算符&quot; operator</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制在 +-*/</span></span><br><span class="line"></span><br><span class="line">if [ -n &quot;`echo $operator|sed &#x27;s/[+-\*\/]//g&#x27;`&quot; ]</span><br><span class="line">  then</span><br><span class="line">    echo &#x27;只允许输入 +,-,*,/&#x27;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入第二个数字</span></span><br><span class="line">read -p &quot;请输入数字：&quot; secondnum</span><br><span class="line">if [ -n &quot;`echo $secondnum|sed &#x27;s/[0-9]//g&#x27;`&quot; ]</span><br><span class="line">  then</span><br><span class="line">    print_usage</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后计算</span></span><br><span class="line"></span><br><span class="line">echo &#x27;运算结果是：&#x27;$(($&#123;firstnum&#125;$&#123;operator&#125;$&#123;secondnum&#125;))</span><br></pre></td></tr></table></figure><h4 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h4><blockquote><p>let 命令等同于双括号计算，((赋值表达式))。但是双括号效率更高</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rs=5</span><br><span class="line"></span><br><span class="line">let rs=rs*2</span><br><span class="line"></span><br><span class="line">echo $rs # 10</span><br></pre></td></tr></table></figure><h3 id="expr-命令"><a href="#expr-命令" class="headerlink" title="expr 命令"></a>expr 命令</h3><blockquote><p>expr 命令允许在命令处理数学表达式。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">expr 1 + 1</span><br><span class="line">expr 1 - 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要转义字符</span></span><br><span class="line">expr 1 \* 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分母大于分子则结果为0</span></span><br><span class="line">expr 1 / 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算 1-10 相加</span></span><br><span class="line">expr `seq -s &#x27; + &#x27; 10`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xargs 管道命令</span></span><br><span class="line">seq -s &#x27; + &#x27; 10| xargs expr</span><br></pre></td></tr></table></figure><p><strong>模式匹配</strong></p><ol><li>:， 计算字符串中的字符数</li><li>.*，任意字符串重复0次或多次</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">expr yc.jpg &quot;:&quot; &quot;.*&quot; # 6</span><br><span class="line"></span><br><span class="line">expr yc.jpg234 &quot;:&quot; &quot;.*\.jpg&quot; # 6</span><br><span class="line"></span><br><span class="line">expr yc.jpeg234 &quot;:&quot; &quot;.*\.jpg&quot; # 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><blockquote><p>通过是否匹配的上来判断文件格式，返回长度0 不能匹配，长度&gt;0匹配</p></blockquote><h3 id="bc-管道命令"><a href="#bc-管道命令" class="headerlink" title="bc 管道命令"></a>bc 管道命令</h3><blockquote><p>整数计算，双小括号，let,expr。带小数计算使用 bc</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo 4*4|bc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算 1-10 相加</span></span><br><span class="line">echo &#123;1..10&#125;|tr &quot; &quot; &quot;+&quot; |bc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="中括号运算"><a href="#中括号运算" class="headerlink" title="中括号运算[]"></a>中括号运算[]</h3><blockquote><p>$[表达式]语法如此，加减乘除</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rs=10</span><br><span class="line">rs=$[rs+8]</span><br><span class="line">echo $rs # 18</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="awk计算"><a href="#awk计算" class="headerlink" title="awk计算"></a>awk计算</h3><blockquote><p>支持小数，if 条件判断</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;3.2 3.2&quot; | awk &#x27;&#123;print ($1+4*$2)&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><blockquote><p>read 内置命令</p><p>-p    设置提示信息</p><p>-t    等待用户输入超时, timeout</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;给你5s中，时间输入密码：&quot; pwd</span><br><span class="line">echo $pwd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入多个变量时，注意空格</span></span><br><span class="line">read -p &quot;请输入账户和密码&quot; zh mm</span><br><span class="line">echo $zh $mm</span><br></pre></td></tr></table></figure><h3 id="if-then-语句"><a href="#if-then-语句" class="headerlink" title="if-then 语句"></a>if-then 语句</h3><blockquote><p>编程语言中 if 条件语句要求 结果是 false,true.而shell中并不是，bash 的if 语句会直接运行后边的命令，如果其执行正确则进入 then 否则不进入</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">fi</span><br><span class="line">--------</span><br><span class="line">if pwd</span><br><span class="line">then</span><br><span class="line">echo &#x27;i am ok&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="if-then-else-语句"><a href="#if-then-else-语句" class="headerlink" title="if-then-else 语句"></a>if-then-else 语句</h3><blockquote><p>增加了一个判断条件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">else</span><br><span class="line">command</span><br><span class="line">fi</span><br><span class="line">------------------</span><br><span class="line"> if [ 1 -eq 1 ]</span><br><span class="line"> then</span><br><span class="line"> echo ok</span><br><span class="line"> else</span><br><span class="line"> echo nono</span><br><span class="line"> fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">elif command</span><br><span class="line">then</span><br><span class="line">command</span><br><span class="line">else</span><br><span class="line">command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote><p>用于评估一个表达式；如果条件为真，则返回一个0， 非0则为假。判断结果通过 $? 访问</p></blockquote><ol><li><p>文件类型侦测</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -e filename</span><br></pre></td></tr></table></figure><p> -e 该文件名] 是否存在?(常用)</p><p> -f 该文件名是否为文件(file)?(常用)</p><p> -d 该文件名 是否为目录(directory)? (常用)</p><p> -b 该文件名是否为一个 block device 装置?</p><p> -c 该[文件名是否为一个 character device 装置?</p><p> -s 该文件名是否为一个 Socket 文件?</p><p> -p 该文件名是否为一个 FIFO (pipe) 文件?</p><p> -L 该文件名是否为一个连结档?</p></li><li><p>文件权限侦测</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename</span><br></pre></td></tr></table></figure><p> -r 侦测该文件名是否具有可读。的属性?</p><p> -w 侦测该文件名是否具有可写。的属性?</p><p> -x 侦测该文件名是否具有 可执行， 的属性?</p><p> -u 测该文件名是否具有 SUID 的属性?</p><p> -g 侦测该文件名是否具有 SGID 的属性?</p><p> -k 侦测该文件名是否具有 sticky bit 的属性?</p><p> -s 测该文件名是否为非空白文件。?</p></li><li><p>两个文件之间比较</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test file -nt file2</span><br></pre></td></tr></table></figure><p> -nt (newer than)判断 file1 是否比 file2 新</p><p> -ot (older than)判断 file1 是否比 file2 旧</p><p> -ef 判断 file2与 file2是否为同一文件，可用在判断 hard link 的判定</p></li><li><p>两整数之间判断</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test n1 -eq n2</span><br></pre></td></tr></table></figure><p> -eq 两数值相等(equal)</p><p> -ne 两数值不等 (not equal)</p><p> -gt n1 大于 n2 (greater than)</p><p> -lt n1 小于 n2 (less than)</p><p> -ge n1 大于等于 n2 (greater than or equal)</p><p> -le n1 小于等于 n2 (less than or equal)</p></li><li><p>判断字符串的数据</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test -z string # 字符串为0？true: false</span><br><span class="line">test -n string # 判断字符串是否为0？false: true, -n 可省略</span><br><span class="line"></span><br><span class="line">test str1 = str2 # 相等 true, 反之 false</span><br><span class="line">test str1 != str2 # 相等 返回false, 反之 true</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>多重判断</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename -a -x filename</span><br></pre></td></tr></table></figure><p> -a 两种状况同时成立</p><p> -o 两种状况任意成立</p><p> !  反相状态</p></li></ol><h4 id="简洁的测试方式"><a href="#简洁的测试方式" class="headerlink" title="简洁的测试方式"></a><strong>简洁的测试方式</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意空格</span></span><br><span class="line">if [ 条件 ]</span><br><span class="line">then</span><br><span class="line">cammands</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">--------判断目录是否存在---------</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">target_dir=/home/ccc</span><br><span class="line">if [ -d $target_dir ]</span><br><span class="line">then</span><br><span class="line">echo &quot;这个目录 $target_dir exists&quot;</span><br><span class="line">cd $target_dir</span><br><span class="line">ls</span><br><span class="line">else</span><br><span class="line">echo &quot;这个目录 $target_dir 不存在&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="Linux-内存监控"><a href="#Linux-内存监控" class="headerlink" title="Linux 内存监控"></a>Linux 内存监控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FreeMem=`free -m |awk &#x27;NR==2&#x27; &#123;print $NF&#125;`</span><br><span class="line">CHARS=&quot;Current memory is $FreeMem&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$FreeMem&quot; -lt &quot;2000&quot; ]</span><br><span class="line">then</span><br><span class="line">echo $CHARS|tee /tmp/messages.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mail -s <span class="string">&quot;主题&quot;</span> 收件人 &lt;</span></span><br><span class="line">mail -s &quot;`date +%F-%T$CHARS`&quot; xxx.qq.com &lt; /tmp/messages.txt</span><br><span class="line">echo &quot;内存不足，抓紧维护服务器！&quot;</span><br></pre></td></tr></table></figure><h4 id="符合条件测试"><a href="#符合条件测试" class="headerlink" title="符合条件测试"></a><strong>符合条件测试</strong></h4><blockquote><p>[ 条件1 ] &amp;&amp; [ 条件2 ]</p><p>[ 条件1 ] || [ 条件2 ]</p><p>布尔运算符</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">target_dir=/home/ccc</span><br><span class="line">if [ -d $target_dir ] &amp;&amp; [ -w $target_dir/testing ]</span><br><span class="line">then</span><br><span class="line">echo &quot;文件不存在，不能写入&quot;</span><br><span class="line">cd $target_dir</span><br><span class="line">ls</span><br><span class="line">else</span><br><span class="line">echo &quot;文件存在，可以写入&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>测试 nginx 服务是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本变量</span></span><br><span class="line">CheckUrl() &#123;</span><br><span class="line">  timeout=5</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">相当于定义一个计数器</span></span><br><span class="line">  fails=0</span><br><span class="line">  success=0</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">循环检测，循环执行一些命令</span></span><br><span class="line">  while true</span><br><span class="line">    do</span><br><span class="line">      wget --timeout=$&#123;timeout&#125; --tries=1 https://wyf195075595.github.io -q -O /dev/null</span><br><span class="line">      </span><br><span class="line">      # 命令执行结果 $?</span><br><span class="line">      if [ $? -ne 0 ]</span><br><span class="line">        then</span><br><span class="line">          let fails=fails+1 # 失败次数加一</span><br><span class="line">        else</span><br><span class="line">          let success+=1 # 成功次数加一</span><br><span class="line">      fi</span><br><span class="line">      </span><br><span class="line">      # 判断成功次数大于等于1，可以访问</span><br><span class="line">      if [ $success -ge 1 ]</span><br><span class="line">        then</span><br><span class="line">          echo &quot;该网站运行健康&quot;</span><br><span class="line">          # 返回状态码</span><br><span class="line">          exit 0</span><br><span class="line">      fi</span><br><span class="line">      </span><br><span class="line">      # 当错误次数大于等于2，警告</span><br><span class="line">      if [ $&#123;fails&#125; -ge 2 ]</span><br><span class="line">        then</span><br><span class="line">          echo &quot;网站挂掉了,尽快检查&quot;</span><br><span class="line">          exit 2</span><br><span class="line">      fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CheckUrl</span><br></pre></td></tr></table></figure><h3 id="双小括号-1"><a href="#双小括号-1" class="headerlink" title="双小括号"></a>双小括号</h3><blockquote><p>前面计算时就用到了这个语法，它支持数值运算，逻辑运算。还能在if 条件中使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val=10</span><br><span class="line">if (( $val ** 2 &gt; 90 ))</span><br><span class="line">  then</span><br><span class="line">    echo &quot;xxx&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="双方括号"><a href="#双方括号" class="headerlink" title="双方括号"></a>双方括号</h3><blockquote><p>双方括号提供了针对字符串的高级特性，模式匹配，正则表达式的匹配。双括号中字符不需要转义。一般不用，特殊场景使用</p><p>双括号中可以使用 &amp;&amp;,||,!</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在双中括号里，进行了 == 双等号，进行字符串匹配 r*，也就找到了 root 。</span></span><br><span class="line">if [[ $USER == r* ]]</span><br><span class="line">then</span><br><span class="line">  echo &quot;xxx&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;xxx&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------测试变量在【1，3】之间--------------</span><br><span class="line"></span><br><span class="line">[[ $num =~ [1-3] ]]</span><br></pre></td></tr></table></figure><h3 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h3><blockquote><p>也可以做一些数值字符比较，但是中括号中 字符需要 添加转义符，很常用</p><p>中括号中不能使用逻辑运算符 ||，&amp;&amp;, 要使用 -a ,-o 代替</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230504103754885.png" alt="image-20230504103754885"></p><h3 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">case &quot;变量&quot; in</span><br><span class="line">值1)</span><br><span class="line">  command1</span><br><span class="line">  ;;</span><br><span class="line">值2)</span><br><span class="line">  command2</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  command3</span><br><span class="line">esac</span><br><span class="line">-------------------</span><br><span class="line">case $car_type in</span><br><span class="line">自行车)</span><br><span class="line">  echo &quot;自行车也不错哦!&quot;</span><br><span class="line">  ;;</span><br><span class="line">摩托车)</span><br><span class="line">  echo &quot;摩托车泰库拉！&quot;</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo &quot;我是谁？我在哪儿？我在干什么？&quot;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while test command</span><br><span class="line">do</span><br><span class="line">  other command</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;shell 脚本开头的两个字符叫做 shebang “#!”。在unix系统中，程序会分析 shebang 后面内容，作为解析器的指令。相当于告诉系统用那种解析器去解读脚本。yarn 就是python 开发的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;以 #!/bin/sh 开头的文件，程序在执行的时候会调用 /bin/sh，也就是bash解释器&lt;/li&gt;
&lt;li&gt;以 #!/usr/bin/python 开头的文件，代表指定python解释器去执行&lt;/li&gt;
&lt;li&gt;以 #!/usr/bin/env 解释器名称，是一种在不同平台上都能正确找到解释器的办法&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="other" scheme="https://wyf195075595.github.io/categories/other/"/>
    
    
    <category term="shell" scheme="https://wyf195075595.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>vercel 部署koa项目</title>
    <link href="https://wyf195075595.github.io/2023/04/21/programming/others/vercel/"/>
    <id>https://wyf195075595.github.io/2023/04/21/programming/others/vercel/</id>
    <published>2023-04-21T00:23:10.000Z</published>
    <updated>2023-07-20T00:36:29.731Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vercel 不仅能够部署静态网站，还能部署node项目。这次就部署koa项目作为尝试。</p></blockquote><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><blockquote><p>新建koa项目，目录如下</p></blockquote><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230421090353337.png" alt="image-20230421090353337"></p><span id="more"></span><h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4><blockquote><p>入口文件一定要是index.js,如果改写其他如 app.js,main.js 等等 vercel 均无法识别，这是一个大坑.</p><p>koa 监听端口不能是 3000 ,因为vercel 默认是 3000 端口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域处理</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;koa-cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态资源</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">static</span>(__dirname+ <span class="string">&#x27;/static&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应格式</span></span><br><span class="line"><span class="keyword">const</span> routerResponse = <span class="built_in">require</span>(<span class="string">&#x27;./middleware/routerResponse&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">routerResponse</span>(&#123;</span><br><span class="line">    <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取post请求参数</span></span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyparser</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由</span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="built_in">require</span>(<span class="string">&#x27;./middleware/controllers&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">controller</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3030</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;port 3030 is running!&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="路由文件"><a href="#路由文件" class="headerlink" title="路由文件"></a>路由文件</h4><blockquote><p>因为没有数据库，路由中使用axios请求了接口获取数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;../utils/http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">fn_index</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span> = <span class="string">`&lt;h1&gt;Index&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;form action=&quot;/signin&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Name: &lt;input name=&quot;name&quot; value=&quot;koa&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Password: &lt;input name=&quot;password&quot; type=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">fn_signin</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> name = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">name</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        password = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">password</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">&#x27;koa&#x27;</span> &amp;&amp; password === <span class="string">&#x27;12345&#x27;</span>) &#123;</span><br><span class="line">        ctx.<span class="title function_">success</span>(&#123;</span><br><span class="line">            <span class="attr">ok</span>:<span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">body</span> = <span class="string">`&lt;h1&gt;Login failed!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Try again&lt;/a&gt;&lt;/p&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> rs = <span class="keyword">await</span> http.<span class="title function_">get</span>(<span class="string">&quot;https://www.fastmock.site/mock/cc1aeeec1b278c3c30ec60eeaf462247/front/getPicList&quot;</span>)</span><br><span class="line">    ctx.<span class="title function_">success</span>(&#123;</span><br><span class="line">        <span class="attr">data</span>: rs</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;GET /login&#x27;</span>: fn_index,</span><br><span class="line">    <span class="string">&#x27;GET /getData&#x27;</span>: fetchData,</span><br><span class="line">    <span class="string">&#x27;POST /signin&#x27;</span>: fn_signin</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>koa项目搭建好后可以在本地运行，访问静态资源，接口没有问题后。就开始改造</p></blockquote><h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><blockquote><p>部署到 vercel 需要做一些配置</p></blockquote><ol><li><p>package.json 新增 script</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vercel 部署时会用到</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;node index.js&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装 @vercel/node</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必备</span></span><br><span class="line">yarn add @vercel/node</span><br></pre></td></tr></table></figure></li><li><p>新建vercel.json</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 覆盖 vercel 默认行为</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;builds&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;src&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;use&quot;</span>: <span class="string">&quot;@vercel/node&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>安装vercel 并登录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 vercel</span></span><br><span class="line">npm i vercel -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录 Vercel 账号。</span></span><br><span class="line">vercel login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------其他命令----------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地开启服务。</span></span><br><span class="line">vercel dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地开启服务并打印日志。</span></span><br><span class="line">vercel dev --bug</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署本地资源到 Vercel 上。</span></span><br><span class="line">vercel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新本地网页。</span></span><br><span class="line">vercel --prod</span><br><span class="line"></span><br><span class="line">vercel 可以用 vc 来代替，vc 是 Vercel 的缩写。</span><br></pre></td></tr></table></figure></li></ol><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vercel</span><br></pre></td></tr></table></figure><p><img src="https://s9.51cto.com/oss/202205/10/d78f532685481bcc147866bb9c8a2276277074.png" alt="vercel"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 更新资源</span><br><span class="line">vercel --prod</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.51cto.com/article/708495.html">此处参考文章</a></p><p>此处操作vercel生成vercel-koa2 但是操作后代码并没有上传至 vercel, 还是得将代码提交到 github 再关联到 vercel</p></blockquote><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问地址，默认会访问到 static 中得 index,而不是根目录得index.html</span></span><br><span class="line">https://vercel-koa-three.vercel.app/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看获取数据得接口</span></span><br><span class="line">https://vercel-koa-three.vercel.app/getData</span><br></pre></td></tr></table></figure><blockquote><p>注意接口 注册时不要使用 /, 因为/ 会默认访问 static/index.html</p><p><a href="https://github.com/wyf195075595/koa-vercel">项目源码</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;vercel 不仅能够部署静态网站，还能部署node项目。这次就部署koa项目作为尝试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;项目目录&quot;&gt;&lt;a href=&quot;#项目目录&quot; class=&quot;headerlink&quot; title=&quot;项目目录&quot;&gt;&lt;/a&gt;项目目录&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;新建koa项目，目录如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230421090353337.png&quot; alt=&quot;image-20230421090353337&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="other" scheme="https://wyf195075595.github.io/categories/other/"/>
    
    
    <category term="vercel" scheme="https://wyf195075595.github.io/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>手机端搭建linux环境</title>
    <link href="https://wyf195075595.github.io/2023/04/17/programming/linux/%E6%89%8B%E6%9C%BA%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://wyf195075595.github.io/2023/04/17/programming/linux/%E6%89%8B%E6%9C%BA%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-04-17T00:23:10.000Z</published>
    <updated>2023-04-17T10:08:33.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将手机作为Linux服务器</p><p>在手机端安装 Linux 系统,通过一个名为<a href="(https://f-droid.org/packages/com.termux/)"><strong>Termux</strong></a>的软件。Termux 是适用于 Android 的终端仿真器和 Linux 环境。它在 Google Play 商店中可用。安装后无需额外配置。</p></blockquote><p>安装完成后运行就可以得到Linux 环境，接下来设置 ssh 连接。通过一个名为<strong>Dropbear</strong>的软件</p><span id="more"></span><p><strong># <a href="https://blog.csdn.net/qq_45704640/article/details/110398165">安装 dropbear</a></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pkg update <span class="comment">// 更新 Termux 包。</span></span><br><span class="line">pkg upgrade  <span class="comment">// 更新 包数据</span></span><br><span class="line">pkg install dropbear<span class="comment">// 安装</span></span><br><span class="line">dropbear <span class="comment">// 开启， 每次启动都需要手动chong&#x27;qi</span></span><br></pre></td></tr></table></figure><p>设置 <strong>termux密码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="comment">// 两次输入确认</span></span><br></pre></td></tr></table></figure><p><strong>远程连接</strong></p><blockquote><p><a href="https://lbrito1.github.io/blog/2020/02/repurposing-android.html">参考文章</a></p><p><a href="http://www.xbhp.cn/news/8058.html">Termux基础教程</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;将手机作为Linux服务器&lt;/p&gt;
&lt;p&gt;在手机端安装 Linux 系统,通过一个名为&lt;a href=&quot;(https://f-droid.org/packages/com.termux/)&quot;&gt;&lt;strong&gt;Termux&lt;/strong&gt;&lt;/a&gt;的软件。Termux 是适用于 Android 的终端仿真器和 Linux 环境。它在 Google Play 商店中可用。安装后无需额外配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装完成后运行就可以得到Linux 环境，接下来设置 ssh 连接。通过一个名为&lt;strong&gt;Dropbear&lt;/strong&gt;的软件&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://wyf195075595.github.io/categories/linux/"/>
    
    
    <category term="nginx" scheme="https://wyf195075595.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>csrf 跨站点请求伪造</title>
    <link href="https://wyf195075595.github.io/2023/04/13/programming/javascript/csrf/"/>
    <id>https://wyf195075595.github.io/2023/04/13/programming/javascript/csrf/</id>
    <published>2023-04-13T07:23:10.000Z</published>
    <updated>2023-04-13T07:47:19.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>CSRF概念：</strong><a href="https://so.csdn.net/so/search?q=CSRF&spm=1001.2101.3001.7020">CSRF</a>跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：<br>    攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p></blockquote><h3 id="CSRF攻击攻击原理及过程如下："><a href="#CSRF攻击攻击原理及过程如下：" class="headerlink" title="CSRF攻击攻击原理及过程如下："></a><strong>CSRF攻击攻击原理及过程如下：</strong></h3><ol><li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li><li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li><li> 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li><li>. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li><li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 </li></ol><span id="more"></span><h3 id="CSRF攻击实例"><a href="#CSRF攻击实例" class="headerlink" title="CSRF攻击实例"></a>CSRF攻击实例</h3><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2 </span></span><br></pre></td></tr></table></figure><p>可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p><p>​    黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</span></span><br></pre></td></tr></table></figure><p>。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p><p>​    这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=<span class="string">&quot;http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory&quot;</span></span><br></pre></td></tr></table></figure><p>，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 </p><h3 id="CSRF漏洞检测："><a href="#CSRF漏洞检测：" class="headerlink" title="CSRF漏洞检测："></a><strong>CSRF漏洞检测：</strong></h3><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><p>​    随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder等。</p><p>​    以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h3 id="防御CSRF攻击："><a href="#防御CSRF攻击：" class="headerlink" title="防御CSRF攻击："></a><strong>防御CSRF攻击：</strong></h3><blockquote><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p></blockquote><h4 id="（1）验证-HTTP-Referer-字段"><a href="#（1）验证-HTTP-Referer-字段" class="headerlink" title="（1）验证 HTTP Referer 字段"></a><strong>（1）验证 HTTP Referer 字段</strong></h4><p>​    根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</span></span><br></pre></td></tr></table></figure><p>，用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>​    这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p><p>​    然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p><p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p><h4 id="（2）在请求地址中添加-token-并验证"><a href="#（2）在请求地址中添加-token-并验证" class="headerlink" title="（2）在请求地址中添加 token 并验证"></a><strong>（2）在请求地址中添加 token 并验证</strong></h4><p>​     CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><p>​    这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url/?csrftoken=tokenvalue%E3%80%82">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrftoken&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tokenvalue&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p><p>​     该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p><p>   <strong>（3）在 HTTP 头中自定义属性并验证</strong></p><p>​    这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>​    然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSRF概念：&lt;/strong&gt;&lt;a href=&quot;https://so.csdn.net/so/search?q=CSRF&amp;spm=1001.2101.3001.7020&quot;&gt;CSRF&lt;/a&gt;跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：&lt;br&gt;    攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CSRF攻击攻击原理及过程如下：&quot;&gt;&lt;a href=&quot;#CSRF攻击攻击原理及过程如下：&quot; class=&quot;headerlink&quot; title=&quot;CSRF攻击攻击原理及过程如下：&quot;&gt;&lt;/a&gt;&lt;strong&gt;CSRF攻击攻击原理及过程如下：&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；&lt;/li&gt;
&lt;li&gt;在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；&lt;/li&gt;
&lt;li&gt; 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；&lt;/li&gt;
&lt;li&gt;. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；&lt;/li&gt;
&lt;li&gt;浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 &lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="拓展" scheme="https://wyf195075595.github.io/tags/%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>雪中悍刀行</title>
    <link href="https://wyf195075595.github.io/2023/04/01/note/essayNote/index/"/>
    <id>https://wyf195075595.github.io/2023/04/01/note/essayNote/index/</id>
    <published>2023-04-01T01:23:10.000Z</published>
    <updated>2023-03-08T14:41:22.577Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/imgs/hello-world/0df431adcbef76091bf6bb1c23dda3cc7dd99eb7.jpg"></p><h3 id="初始版"><a href="#初始版" class="headerlink" title="初始版"></a>初始版</h3><p>有个白狐脸儿，佩双刀绣冬春雷，要做那天下第一；</p><p>湖底有白发老魁爱吃荤；</p><p>缺门牙老仆背剑匣；</p><p>山上有个骑青牛的年轻师叔祖，不敢下山；</p><p>有个骑大猫扛向日葵不太冷的少女杀手；</p><span id="more"></span><h3 id="收官版"><a href="#收官版" class="headerlink" title="收官版"></a>收官版</h3><p>江湖是一张珠帘。大人物小人物，是珠子，大故事小故事，是串线。情义二字，则是那些珠子的精气神。开始收官中。最终章将以那一声“小二上酒”结尾。</p><h3 id="春秋九国"><a href="#春秋九国" class="headerlink" title="春秋九国"></a>春秋九国</h3><p>离阳，西楚，西蜀，北汉，大魏，后宋、后隋，东越，南唐。徐骁灭六国，后隋，西楚，后宋，西蜀，北汉，大魏。顾剑棠灭东越，南唐。</p><p>离阳王朝：原有六州，灭春秋八国添十三州，共计十九州。</p><p>北莽王朝：占地八州，分别是姑塞，龙腰，东锦，西河，金蝉，玉蝉，宝瓶，橘子。</p><p>西蜀：举国兵卒不过十二万，战死九万。被徐骁两个月灭国。西蜀曾凿开石壁挂了三条铁索拦江试图阻拦北凉临时拼凑出的水师，不曾想那场水战尚未开启便落幕，大江沿岸天险就被北凉军悉数摧破。</p><p>西楚皇都一战：离皇宫十里，赵军师病死。徐骁率军投鞭断江，死战西蜀皇都。西蜀国破，徐骁顺势灭去数个反复无常的南蛮豪强。</p><p>西楚：地方五千里持戟百万人。</p><h3 id="春秋战争"><a href="#春秋战争" class="headerlink" title="春秋战争"></a>春秋战争</h3><p>西楚景河之战：十二万大戟士对阵北凉铁骑，全军覆没，死战不屈。</p><p>西楚襄樊守城战：春秋第一守将王明阳坐镇死守。二十万襄樊人只剩下不到一万。襄樊攻守，北凉军精锐折损大半，其中就有三百名精于钻地的穴师，死亡殆尽。</p><p>西楚西垒壁之战：西楚亡国之战。春秋国战最后一战。北凉军与西楚军对峙两年。北凉旧部马岭等十四人以死替徐骁表忠。王妃一袭白衣缟素亲自敲响战鼓，鼓声如雷，不破西楚鼓不绝。“死战第一”千人鱼鼓营死战不退，最终只活下来十六人，为“骑战第一”三千大雪龙骑兵开辟出一条直插叶白夔大戟军腹地的坦荡血路。陈芝豹坐镇中军，运筹帷幄；王妃亲自擂鼓；徐骁舍弃头盔，持矛首当其冲；三千白马白甲，一路奔雷踏去。其中便有鱼鼓营千余人的袍泽尸体。小人屠陈芝豹与叶白夔死战。叶白夔战死。此战后，杨太岁曾力劝徐骁不杀硕儒方孝梨，最终无果。</p><p>西楚灭国后，徐骁受封大柱国，隔天被封北凉王。</p><p>老皇帝要将以武乱禁的江湖掀翻，徐骁一人请命马踏江湖，不曾开战，便有两万名百战老卒请辞还家，更有无数出身江湖的猛将对徐骁心生怨恨，转投其它军伍。</p><h2 id="境界划分"><a href="#境界划分" class="headerlink" title="境界划分"></a>境界划分</h2><p><a href="javascript:;">编辑</a><a href="javascript:;"> 播报</a></p><p><strong>九品制</strong>（从小到大，九品至一品）</p><p>伤甲而不破，是下三品</p><p>破六甲以下，中三品</p><p>破甲八九，上三品</p><p>二品为小宗师</p><p>一品四境：金刚境，指玄境，天象境，陆地神仙（皆有大小真伪之分，上品为大，最次是伪）。</p><p>金刚境喻释家，金刚境的主要特点就是熬炼体魄，这是四境当中最适合熬炼体魄的时候，也就是提高防御力和体质。金刚境在早年是不被划入高手体系内的，直到高树露以这个境界代表佛家，才被划入了一品境。而金刚境之上还有大金刚境，可锻造真正的金刚不败之身，比如三教中的李当心、当年四大宗师的符将红甲。</p><p>指玄境喻道家，指玄境的主要特点一个是有类似于未卜先知、料敌于先的能力。另一个则是可以悟得一些五花八门的指玄秘术，这些秘术千奇百怪，指玄境之间对上基本上谁也不敢称自己必胜，因为你不知道他悟出的是什么秘术。像江斧丁悟出的是“直指天心”的照镜之法，看到别人的武学可以过目不忘，撷取其中的精华，而天猫韩生宣悟出的是可以截断天象境天人感应的指玄秘术，因此可以指玄杀天象。</p><p>天象境喻儒家，天象境的特点就是天人感应，与天地共鸣，可以借法天地，可以与敏锐的直觉趋利避害。指玄境要晋升天象境难度不比二品境晋升一品境容易。而且因为天象境需要天人感应，如果滥造杀业的话，会受气数影响，所以像韩生宣是可以入天象境而不愿意入。天象境完美即为大天象境，距离地仙只有一步之遥，例如柳蒿师、轩辕大磐、程白霜等人。</p><p>陆地神仙，为三家殊途同归。含有气数在身，陆地神仙位格是有数的，只有其他陆地神仙死了或者飞升了，才能有新的陆地神仙诞生。</p><p>一般而言，佛门入一品为金刚，道门入一品为指玄，儒门入一品为天象，只修单境。而江湖武夫则大多循境而进，金刚-指玄-天象-地仙（融会贯通），多境叠加，故三教中人同境界对打不如武夫。当然，除了三教中人，江湖武夫也有越境升级者，其中多是以术入武，对体魄要求不大，故而入一品则指玄。</p><p>一品往上，则是破碎虚空，剑开天门，或举霞飞升，或驾鹤而起，或御剑而行。一入天门，飞升上界，则为天仙，可得长生，但是如果出了天门，就会成为谪仙人，不再长生。过天门而不入，停留下界，则为天人。有无瑕之分。</p><p>天人大长生为天人圆满，拥有大金刚境的天人体魄（无垢之体）、道教大长生的指玄、儒家圣人的天象，在天上都难寻敌手。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/imgs/hello-world/0df431adcbef76091bf6bb1c23dda3cc7dd99eb7.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;初始版&quot;&gt;&lt;a href=&quot;#初始版&quot; class=&quot;headerlink&quot; title=&quot;初始版&quot;&gt;&lt;/a&gt;初始版&lt;/h3&gt;&lt;p&gt;有个白狐脸儿，佩双刀绣冬春雷，要做那天下第一；&lt;/p&gt;
&lt;p&gt;湖底有白发老魁爱吃荤；&lt;/p&gt;
&lt;p&gt;缺门牙老仆背剑匣；&lt;/p&gt;
&lt;p&gt;山上有个骑青牛的年轻师叔祖，不敢下山；&lt;/p&gt;
&lt;p&gt;有个骑大猫扛向日葵不太冷的少女杀手；&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://wyf195075595.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://wyf195075595.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>h5播放rtsp格式视频</title>
    <link href="https://wyf195075595.github.io/2023/03/27/programming/jsplugin/rtsp/"/>
    <id>https://wyf195075595.github.io/2023/03/27/programming/jsplugin/rtsp/</id>
    <published>2023-03-27T10:53:10.000Z</published>
    <updated>2023-11-02T02:39:32.677Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.jianshu.com/p/e16a453bbfcc">Linux下载和安装yasm、FFmpeg、流媒体服务SRS4.0</a></p><p><a href="http://www.ffmpeg.org/releases/">FFmpeg下载</a></p></blockquote><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>前端：</p><ul><li>jsmpeg.js (连接wbesocket，绘制视频图像)</li></ul><p>服务端（node）：</p><ul><li>express（静态服务，接口处理）</li><li>body-parser（处理接口接收数据）</li><li>node-rtsp-stream-jsmpeg （下发FFmpeg指令，创建websocke服务端）</li><li>child_process（启动shell脚本指令）</li></ul><p>其他：</p><ul><li>FFmpeg(视频流转码)</li><li>pm2(node进程守护)</li><li>云台控制程序（通过视频厂家提供的sdk二次开发，通过ajax调用）</li></ul><blockquote><p><a href="https://juejin.cn/post/6844903949309313037">参考链接</a></p></blockquote><hr><span id="more"></span><h3 id="zlmediakit搭建和配合ffmpeg使用"><a href="#zlmediakit搭建和配合ffmpeg使用" class="headerlink" title="zlmediakit搭建和配合ffmpeg使用"></a>zlmediakit搭建和配合ffmpeg使用</h3><blockquote><p><a href="https://github.com/ZLMediaKit/ZLMediaKit">zlmediakit</a> 是一个基于C++11的高性能运营级流媒体服务框架，可以推送各种视频，音频流。</p><p>ffmpeg 推流视频，zlmediakit 流媒体服务器经行转发，转发后的地址有多种视频格式</p></blockquote><ul><li>zlmediakit linux 环境搭建：<br>  <a href="https://zhuanlan.zhihu.com/p/366774975">这篇文章</a>写得已经非常详细了，就不再拾人牙慧了</li><li>ffmpeg安装：<br>  虽然上面的搭建文档说不用安装ffmpeg，但是如果使用命令的话，肯定还是要安装的(不安装指的是在项目中调用api)，这种方式只能安装低版本，高版本参考上面<br>  1).sudo apt-get update<br>  2).sudo apt-get install ffmpeg</li><li>测试(；推流路径格式是：rtsp://ip/…（后面可随意命名）)：<br>  例：把test文件推到某个rtsp地址上去<br>  ffmpeg -re -i test.mp4 -vcodec h264 -acodec aac -f rtsp -rtsp_transport tcp rtsp://ip/live/test<br>  注意事项：<br>  1）要推的视频路径写绝对路径；<br>  2）推流地址格式为: rtsp://ip/…（后面可随意定义）<br>  3）zlmediakit的默认路径是554，如果改了端口号，ip后要加上。<br>  4）如果使用docker安装zlmediakit，那么要注意映射的端口不是554的话，端口号也得写上</li><li><a href="https://github.com/ZLMediaKit/ZLMediaKit/wiki/ZLMediaKit%E6%8E%A8%E6%B5%81%E6%B5%8B%E8%AF%95">附带推流测试地址(附带右边列表很多相关资料)：</a></li></ul><blockquote><p><a href="https://blog.csdn.net/weixin_43248279/article/details/124734505">参考地址</a></p></blockquote><p><a href="https://qiteecom/xia-chu/ZIMediaKit">ZIMediaKit源地址</a></p><p>ffmpeg 推送到 zlmediakit 服务上，需要先启动 zlmediakit </p><p>进入安装目录指定文件夹，找到 MediaServer 执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/xxx/ZLMediaKit/release/linux/Debug/</span><br><span class="line">./MediaServer</span><br></pre></td></tr></table></figure><p>ffmpeg 推流操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// rtsp推流(文件推流)</span><br><span class="line">ffmpeg -re -i test.mp4 -rtsp transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line">// rtsp推流(文件循环推流)</span><br><span class="line">ffmpeg -re -stream_loop -1 -i test.mp4 -rtsp_transport tcp -c copy -f rtsp rtsp://127.0.0.1:554/live/test</span><br><span class="line">// rtmp推流(文件推流)</span><br><span class="line">Ffmpeg -re -i test.mp4 -vcodec h264_nvenc -acodec aac -f flv rtmp://127.0.0.1:1935/live/test</span><br><span class="line">// rtmp推流(文件循环推流)</span><br><span class="line">ffmpeg -re -stream_loop -1 -i test.mp4 -vcodec h264 -acodec aac -f flv rtmp://127.0.0.1:1935/live/test</span><br><span class="line"></span><br><span class="line">// 推流笔记本摄像头</span><br><span class="line">ffmpeg -i /dev/video0 -vcodec libx264 -acodec copy -preset:v ultrafast -tune:v zerolatency -f flv rtmp://192.168.94.128:1935/live/test</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ZIMediaKit 转发地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># <span class="title class_">ZIMediaKit</span>支持多种流媒体协议的转换，协议转换后的播放地址</span><br><span class="line"><span class="comment">// rtsp播放</span></span><br><span class="line"><span class="attr">rtsp</span>:<span class="comment">//127.0.0.1:554/live/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//rtmp播放</span></span><br><span class="line"><span class="attr">rtmp</span>:<span class="comment">//127.0.0.1:1935/live/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hls播放</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1:80/live/test/hls.m3u8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http-flv播放</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1:80/live/test.live.flv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http-ts播放</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//127.0.0.1:80/live/test.live.ts</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_37429313/article/details/116201062">ffplay ffmpeg快速检验摄像头</a></p><p><a href="https://blog.csdn.net/YellowShite/article/details/120367738">ZLMediaKit 推/拉流</a></p></blockquote><h3 id="ffmpeg-基础"><a href="#ffmpeg-基础" class="headerlink" title="ffmpeg 基础"></a>ffmpeg 基础</h3><blockquote><p>Fmpeg 是领先的多媒体框架，能够解码、编码、转码、混合、解密、流媒体、过滤和播放人类和机器创造的几乎所有东西。它支持最晦涩的古老格式，直到最尖端的格式。</p><p>简单来说可以将浏览器不支持的流转换为支持的流供页面展示.</p><p>除了视频文件，还能处理 摄像头，声卡，网络直播，电脑桌面进行数据采集</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i 表示输入a.mov</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c 表示为输出文件指定编码格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">copy 表示从输入文件a.mov中直接拷贝音频和视频数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将输入的 a.mov 转化为 mp4 格式 输出 a.mp4</span></span><br><span class="line">ffmpeg -i a.mov -c copy a.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c:v  code video 指定视频编码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c:a  code audio 指定音频编码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 video.avi 输出为 视频编码246，音频编码 acc 格式 的mp4文件</span></span><br><span class="line">ffmpeg -i video.avi -c:v h246 -c:a aac video.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看支持的格式</span></span><br><span class="line">ffmpeg -c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数选项</span></span><br><span class="line">ffmpeg -h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示一些高级参数</span></span><br><span class="line">ffmpeg -h -long</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示更多</span></span><br><span class="line">ffmpeg -h full</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出参数</span></span><br><span class="line"></span><br><span class="line">-r 24 # 指定输出视频帧率 24</span><br><span class="line">-s 1920X1080 # 指定输出视频分辨率</span><br><span class="line">-vb 5000k 将输出文件视频码率限制在 5000k左右</span><br><span class="line">-ab 320k 将输出音频码率设置限制在320k左右</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将视频音频拆分，输出生成多个文件</span></span><br><span class="line">ffmpeg -i hello.avi -c:v h264 video.map -c:a aac audio.acc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将4k视频同时生成 不同分辨率视频输出</span></span><br><span class="line">ffmpeg -i video4k.avi -c:v h264 -s 1280x720 720p.map -c:v h264 -s 1920x1080 1080p.mp4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要参数</span></span><br><span class="line">-i 设定输入流 </span><br><span class="line">-f 设定输出格式 </span><br><span class="line">-ss 开始时间 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">视频参数：</span></span><br><span class="line">-b 设定视频流量(码率)，默认为200Kbit/s </span><br><span class="line">-r 设定帧速率，默认为25 </span><br><span class="line">-s 设定画面的宽与高 </span><br><span class="line">-aspect 设定画面的比例 </span><br><span class="line">-vn 不处理视频 </span><br><span class="line">-vcodec 设定视频编解码器，未设定时则使用与输入流相同的编解码器</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">音频参数：</span></span><br><span class="line">-ar 设定采样率 </span><br><span class="line">-ac 设定声音的Channel数 </span><br><span class="line">-acodec 设定声音编解码器，未设定时则使用与输入流相同的编解码器 </span><br><span class="line">-an 不处理音频</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.jianshu.com/p/ddafe46827b7">基础使用参考链接</a></p><p><a href="https://zhuanlan.zhihu.com/p/67878761">简单示例</a></p></blockquote><h3 id="ffplay"><a href="#ffplay" class="headerlink" title="ffplay"></a>ffplay</h3><blockquote><p>继承了 ffmpeg 的编解码能力，支持格式最全的播放器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">播放文件，左右方向键控制快进快退，q退出</span></span><br><span class="line">ffplay video.mp4</span><br></pre></td></tr></table></figure><p>在安装 ffmpeg 时 本来时默认会 安装好 ffplay,ffprobe。 但是如果缺少依赖会导致安装不成功</p><p>ffplay 依赖 <a href="https://github.com/libsdl-org/SDL/releases/tag/release-2.26.4">SDL2</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 设置 ffmpeg   --enable-libx264，此设置依赖x264。不然报错 libx264 not found</span><br><span class="line">./configure --enable-shared --enable-libx264 --enable-gpl --prefix=/usr/local/ffmpeg</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>5. 安装x264</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http://www.videolan.org/developers/x264.html，下载</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">git clone https://code.videolan.org/videolan/x264.git</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">git clone http://git.videolan.org/git/x264.git</span><br><span class="line"></span><br><span class="line">cd x264</span><br><span class="line"></span><br><span class="line">./configure --enable-shared</span><br><span class="line"></span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><p><strong>libx264 not found</strong></p><blockquote><ol><li>将使用到的库路径添加至环境变量中</li></ol><p>export PATH=/usr/local/x264/bin:$PATH</p><p>export PATH=/usr/local/x264/include:$PATH</p><p>export PATH=/usr/local/x264/lib:$PATH</p></blockquote><p><strong>手动编译安装ffmpeg会出现的问题</strong></p><blockquote><p>在跑视频流程序或命令时出现这个问题。<br> 跟这个报错：ffmpeg: error while loading shared libraries: libx264.so.164: cannot open shared object file: No such file or directory</p><p> ffmpeg 时使用到了 libx264，而在实际的编译式安装过程中没有指定编译 libx264 参数，从而产生报错。</p></blockquote><p><strong>缺失依赖</strong></p><p>ffmpeg 命令报错 xxxx =&gt; not found</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ffmpeg bin名录下</span></span><br><span class="line">ldd ffmpeg</span><br></pre></td></tr></table></figure><p>查找目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr -name &#x27;libavdevice.so.58&#x27;</span><br></pre></td></tr></table></figure><p>将 目录export 出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/usr/local/lib/</span><br></pre></td></tr></table></figure><h3 id="AKStream"><a href="#AKStream" class="headerlink" title="AKStream"></a>AKStream</h3><blockquote><p>​    AKStream是一套全功能的软NVR接口平台，软NVR指的是软件定义的NVR（Network Video Recoder）。</p><p>​    AKStream集成了ZLMediaKit作为其流媒体服务器，AKStream支持对ZLMediaKit的集群管理（通过AKStreamKeeper-流媒体治理组件），可以将分布在不同服务器的多个ZLMediaKit集群起来，统一管理，统一调度。</p></blockquote><p><strong>AKStream生态圈开源Web管理平台</strong></p><ul><li><p>基于React的纯前端AKStream Web UI</p></li><li><p>非常简单的部署方式，非常简单的运行方式</p></li><li><p><a href="https://gitee.com/sscboshi/AKStreamNVR">https://gitee.com/sscboshi/AKStreamNVR</a></p></li><li><p><a href="https://github.com/langmansh/AKStreamNVR">https://github.com/langmansh/AKStreamNVR</a></p></li><li><p>基于.net 5和vue2</p></li><li><p><a href="https://github.com/langmansh/AKStreamUI">https://github.com/langmansh/AKStreamUI</a></p></li><li><p><a href="https://gitee.com/sscboshi/AKStreamUI">https://gitee.com/sscboshi/AKStreamUI</a></p></li></ul><h3 id="Nginx-流媒体服务器"><a href="#Nginx-流媒体服务器" class="headerlink" title="Nginx 流媒体服务器"></a>Nginx 流媒体服务器</h3><blockquote><p>安装 Nginx,nginx-http-flv-module插件</p></blockquote><p>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80; #http-flv的拉流端口</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        # http-flv的相关配置</span><br><span class="line">        location /test &#123;</span><br><span class="line">            flv_live on; #打开HTTP播放FLV直播流功能</span><br><span class="line">            chunked_transfer_encoding on; #支持&#x27;Transfer-Encoding: chunked&#x27;方式回复</span><br><span class="line"> </span><br><span class="line">            add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;; #添加额外的HTTP头</span><br><span class="line">            add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; #添加额外的HTTP头</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp_auto_push_reconnect 1s;</span><br><span class="line">rtmp_socket_dir /tmp;</span><br><span class="line"> </span><br><span class="line">rtmp &#123;</span><br><span class="line">    out_queue           4096;</span><br><span class="line">    out_cork            8;</span><br><span class="line">    max_streams         128;</span><br><span class="line">    timeout             15s;</span><br><span class="line">    drop_idle_publisher 15s;</span><br><span class="line"> </span><br><span class="line">    log_interval 5s; #log模块在access.log中记录日志的间隔时间，对调试非常有用</span><br><span class="line">    log_size     1m; #log模块用来记录日志的缓冲区大小</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        chunk_size: 4096;</span><br><span class="line">        # server_name www.test.*; #用于虚拟主机名后缀通配</span><br><span class="line"> </span><br><span class="line">        #ffmpeg推流的application </span><br><span class="line">        application live &#123;</span><br><span class="line">            live on; # 启用实时流应用程序监听</span><br><span class="line">            allow publish 127.0.0.1;</span><br><span class="line">            allow play all;</span><br><span class="line">            record off; # 不要录制流</span><br><span class="line">            meta copy; # 复制传出元数据的传入元数据</span><br><span class="line">            gop_cache on; #打开GOP缓存，减少首屏等待时间 on时第一帧加载快，off时第一帧加载慢 </span><br><span class="line">            # @StringKai 在博客https://blog.csdn.net/string_kai/article/details/100598268提到on时延高，off时延低，不过我在测试时并没有感觉出时延的差别</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 ffmpeg 推流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f v4l2 -framerate 10 -i /dev/video0 -g 10 -f flv rtmp://127.0.0.1/live/wei</span><br></pre></td></tr></table></figure><p>播放：</p><p>RTMP协议拉流:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp:192.168.94.128/live/wei</span><br></pre></td></tr></table></figure><p>HTTL FLV 协议拉流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.94.128/test?app=live&amp;stream=wei</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20230409153038364.png" alt="image-20230409153038364"></p><h3 id="rtsp-拉流方案2"><a href="#rtsp-拉流方案2" class="headerlink" title="rtsp 拉流方案2"></a>rtsp 拉流方案2</h3><blockquote><p><a href="https://github.com/Neveryu/rtsp2web">rtsp2web</a> + <a href="https://github.com/phoboslab/jsmpeg">jsmpeg</a> 播放rtsp 流视频</p></blockquote><ol><li><p>rtsp2web 是 node服务 依赖 ffmpeg</p><p> 需要在服务器运行 rtsp2web ,有🕳</p><ul><li><p>这个服务在 conteos 运行不了，需要找作者付费。在Ubuntu Linux就可以</p></li><li><p>版本建议 v3.1.1，新版本Ubuntu也不行</p></li><li><p>视频有水印，可以去掉<a href="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20231102103414179.png">https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20231102103414179.png</a></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// setInterval((function()&#123;</span><br><span class="line">//    r.checkFree(),</span><br><span class="line">//    cs&amp;&amp;(ls.includes(decodeURIComponent(ut.exports.decode(&quot;eCUzRHctdHctNSUzQXklM0Q4MCUzQWZvbnRjb2xvciUzRHdoaXRlJTNBZm9udHNpemUlM0QzMiUzQXRleHQlM0RjbGVhciUyMHdpdGglMjBxcSUyMDQyMTM1NDUzMiUzQWJveCUzRDElM0Fib3hjb2xvciUzRGJsYWNr&quot;)))</span><br><span class="line">//    ||(r.destroyAllChannel(),global.process.stderr.write(&quot;***wm代码异常***，请联系作者！&quot;)))&#125;)</span><br><span class="line">//    ,1e3*fs);</span><br></pre></td></tr></table></figure><p>  <img src="https://raw.githubusercontent.com/wyf195075595/images/main/blog/image-20231102103414179.png" alt="image-20231102103414179"></p></li><li><p>代码</p><p>  nodejs</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">RTSP2</span>web = <span class="built_in">require</span>(<span class="string">&#x27;rtsp2web&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> port=<span class="number">28999</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> videoSzie = <span class="string">&#x27;1920*1080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RTSP2</span>web(&#123;</span><br><span class="line">port</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  前端</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no,viewport-fit=cover&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://jsmpeg.com/jsmpeg.min.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>播放rtsp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 600px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var rtsp = &#x27;rtsp://ip:554/live/test&#x27; </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">JSMpeg</span>.<span class="title class_">Player</span>(<span class="string">&quot;ws://ip:28999/rtsp?url=&quot;</span>+<span class="title function_">btoa</span>(rtsp), &#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">canvas</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoplay</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)&#125; </span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/e16a453bbfcc&quot;&gt;Linux下载和安装yasm、FFmpeg、流媒体服务SRS4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ffmpeg.org/releases/&quot;&gt;FFmpeg下载&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h3&gt;&lt;p&gt;前端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jsmpeg.js (连接wbesocket，绘制视频图像)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务端（node）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;express（静态服务，接口处理）&lt;/li&gt;
&lt;li&gt;body-parser（处理接口接收数据）&lt;/li&gt;
&lt;li&gt;node-rtsp-stream-jsmpeg （下发FFmpeg指令，创建websocke服务端）&lt;/li&gt;
&lt;li&gt;child_process（启动shell脚本指令）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FFmpeg(视频流转码)&lt;/li&gt;
&lt;li&gt;pm2(node进程守护)&lt;/li&gt;
&lt;li&gt;云台控制程序（通过视频厂家提供的sdk二次开发，通过ajax调用）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844903949309313037&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="rtsp" scheme="https://wyf195075595.github.io/tags/rtsp/"/>
    
  </entry>
  
  <entry>
    <title>开发自己的js plugin</title>
    <link href="https://wyf195075595.github.io/2023/03/22/programming/jsplugin/newnpm/"/>
    <id>https://wyf195075595.github.io/2023/03/22/programming/jsplugin/newnpm/</id>
    <published>2023-03-22T10:53:10.000Z</published>
    <updated>2023-08-04T07:44:01.660Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器。首先去找适合写插件的项目包管理工具。对比了webpack,rollup,gulp,parcel</p><p>经过一通对比就选中了 <strong>rollup</strong>，具体请自行了解。简单说一下我们熟知的<strong>vue</strong>,<strong>react</strong>,<strong>taro-ui</strong> 等 就是使用的 rolluojs 打包的</p><p>自己写了一个很简单的插件上传发布到npm。具体步骤如下：</p></blockquote><span id="more"></span><ol><li><p>首先 新建一个文件夹 npm init 初始化 得到package.json</p></li><li><p>引入 rollup</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用了 yarn 因为 yarn 打包 可以自己找到 (yarn rollup) 命令可执行文件</span></span><br><span class="line">yarn add rollup -D</span><br></pre></td></tr></table></figure></li><li><p>增加配置文件 rollup.config.js, 跟package.json 同级</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持 导入 josn 文件</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-json&#x27;</span></span><br><span class="line"><span class="comment">// 支持导入 npm 第三方模块</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="comment">// 兼容 commonJs 模块</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-commonjs&#x27;</span></span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line"><span class="keyword">import</span> changeCase <span class="keyword">from</span> <span class="string">&#x27;change-case&#x27;</span></span><br><span class="line"><span class="comment">// 创建作者，日期，库名等注释</span></span><br><span class="line"><span class="keyword">import</span> createBanner <span class="keyword">from</span> <span class="string">&#x27;create-banner&#x27;</span></span><br><span class="line"><span class="comment">// 语法降级,@babel/preset-env,@babel/core</span></span><br><span class="line"><span class="keyword">import</span> &#123; babel &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-babel&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span> assert &#123; <span class="attr">type</span>: <span class="string">&quot;json&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = changeCase.<span class="title function_">pascalCase</span>(pkg.<span class="property">name</span>)</span><br><span class="line"><span class="keyword">const</span> banner = <span class="title function_">createBanner</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">`<span class="subst">$&#123;name&#125;</span>.js`</span>,</span><br><span class="line">      <span class="attr">year</span>: <span class="string">&#x27;2023-present&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    <span class="attr">input</span>: <span class="string">&quot;src/index.js&quot;</span>,</span><br><span class="line">    <span class="comment">// input: [&quot;src/index.js&quot;, &quot;src/album.js&quot;],</span></span><br><span class="line">    <span class="comment">// input: &#123;</span></span><br><span class="line">    <span class="comment">//     foo: &quot;src/index.js&quot;,</span></span><br><span class="line">    <span class="comment">//     bar: &quot;src/album.js&quot;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="attr">output</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.amd.js`</span>,</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&quot;amd&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            name,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.common.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">            <span class="attr">exports</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.esm.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            banner,</span><br><span class="line">            <span class="attr">file</span>: <span class="string">`dist/<span class="subst">$&#123;pkg.name&#125;</span>.iife.js`</span>,</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;iife&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">json</span>(),</span><br><span class="line">        <span class="comment">// resolve(),</span></span><br><span class="line">        <span class="title function_">babel</span>(&#123;</span><br><span class="line">            <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">            <span class="attr">babelHelpers</span>: <span class="string">&#x27;bundled&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;test&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;istanbul&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">commonjs</span>(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建 src 文件夹放置源码，dist 文件夹放置打包文件，src/index.js</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Progress</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用超类的构造器</span></span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// 创建一个影子 DOM 树并将其附加到这个元素</span></span><br><span class="line">        <span class="comment">// 设置为 this.shadowRoot 的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123;<span class="attr">mode</span>:<span class="string">&#x27;open&#x27;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 克隆模板，定义自定义组件的后代及样式</span></span><br><span class="line">        <span class="comment">// 然后把内容追加到影子根节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">createTemplate</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">template</span>.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 内容模板</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">contentTemplate</span> = <span class="string">`正在安装 #percentage %`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取得对影子DOM中重要元素的引用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progress</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressContent</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress-content&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressWrapper</span> = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress-wrapper&#x27;</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化进度</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">max</span> = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 钩子函数： 自定义元素增加、删除、修改属性时 ，调用。</span></span><br><span class="line">    <span class="comment">// 触发此回调函数，必须监听变化的属性static get observedAttributes() ,返回监听的属性。</span></span><br><span class="line">    <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name, oldValue, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个 template 元素，用于保存样式和元素树,可以在每个 元素的实例中使用它门</span></span><br><span class="line">    <span class="title function_">createTemplate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> template = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">        template.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;style&gt;</span></span><br><span class="line"><span class="string">              .progress-wrapper &#123;</span></span><br><span class="line"><span class="string">                position: relative;</span></span><br><span class="line"><span class="string">                overflow: hidden;</span></span><br><span class="line"><span class="string">                width: 300px;</span></span><br><span class="line"><span class="string">                height: 20px;</span></span><br><span class="line"><span class="string">                text-align: center;</span></span><br><span class="line"><span class="string">                border-radius: 10px;</span></span><br><span class="line"><span class="string">                background-color: #cdeee3;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">              .progress &#123;</span></span><br><span class="line"><span class="string">                width: 0%;</span></span><br><span class="line"><span class="string">                height: 100%;</span></span><br><span class="line"><span class="string">                transition: all 200ms;</span></span><br><span class="line"><span class="string">                background-color: #3da985;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">              p &#123;</span></span><br><span class="line"><span class="string">                font-size: 12px;</span></span><br><span class="line"><span class="string">                font-weight: bolder;</span></span><br><span class="line"><span class="string">                position: absolute;</span></span><br><span class="line"><span class="string">                z-index: 10;</span></span><br><span class="line"><span class="string">                top: 0;</span></span><br><span class="line"><span class="string">                left: 0;</span></span><br><span class="line"><span class="string">                width: 100%;</span></span><br><span class="line"><span class="string">                height: 100%;</span></span><br><span class="line"><span class="string">                margin: 0;</span></span><br><span class="line"><span class="string">                transition: all 200ms;</span></span><br><span class="line"><span class="string">                background-image: linear-gradient(to right, #cdeee3 0%, #3da985 0%);</span></span><br><span class="line"><span class="string">                -webkit-background-clip: text;</span></span><br><span class="line"><span class="string">                -webkit-text-fill-color: transparent;</span></span><br><span class="line"><span class="string">                display: flex;</span></span><br><span class="line"><span class="string">                align-items: center;</span></span><br><span class="line"><span class="string">                justify-content: center;</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">            &lt;/style&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;progress-wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;progress&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;p class=&quot;progress-content&quot;&gt;正在安装 0%&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">template</span> = template;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新进度条</span></span><br><span class="line">    <span class="title function_">updateProgress</span>(<span class="params">percentage</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progress</span>.<span class="property">style</span>.<span class="property">width</span> = percentage + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">contentTemplate</span>.<span class="title function_">replace</span>(<span class="string">&quot;#percentage&quot;</span>, percentage);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`linear-gradient(to right, #cdeee3 <span class="subst">$&#123;percentage&#125;</span>%, #3da985 <span class="subst">$&#123;percentage&#125;</span>%)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 常用属性读写</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">percentage</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">start</span> &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">width</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">width</span> &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">height</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">height</span> &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">fontSize</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">style</span>.<span class="property">fontSize</span> &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">percentage</span>(<span class="params">pt</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">String</span>(pt).<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pt &gt;= <span class="variable language_">this</span>.<span class="property">max</span>) pt = <span class="variable language_">this</span>.<span class="property">max</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">start</span> = pt;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">updateProgress</span>(pt);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;data-percentage&quot;</span>, pt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">height</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">height</span> = val;</span><br><span class="line">            <span class="keyword">let</span> fontSize = <span class="built_in">parseInt</span>(<span class="number">1</span>/<span class="number">3</span> * (+<span class="title class_">String</span>(val).<span class="title function_">replace</span>(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>)))</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fontSize</span> = fontSize + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">width</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">progressWrapper</span>.<span class="property">style</span>.<span class="property">width</span> = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">fontSize</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(val) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">progressContent</span>.<span class="property">style</span>.<span class="property">fontSize</span> = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个静态属性对 attributeChangedCallback 方法是必须的，只有在这个数组中列出的属性名才会触发对该方法的调用</span></span><br><span class="line"><span class="title class_">Progress</span>.<span class="property">observedAttributes</span> = [<span class="string">&#x27;innerText&#x27;</span>, <span class="string">&#x27;value&#x27;</span>,<span class="string">&#x27;data-percentage&#x27;</span>];</span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-progress&#x27;</span>, <span class="title class_">Progress</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Progress</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行打包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c 表示使用配置文件，不加默认不使用</span></span><br><span class="line">yarn rollup -c</span><br></pre></td></tr></table></figure></li><li><p>上传至npm</p><blockquote><p>准备：注册npm账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消淘宝镜像，设置npm官方地址，否则发布不了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看npm配置</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果设置了淘宝镜像，执行以下命令,一定要是https 否则会报错</span></span><br><span class="line">npm config set registry=https://registry.npmjs.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录 npm 账户，提示🔗跳转至网页登录</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否登录，登录成功会显示你的用户名</span></span><br><span class="line">npm who am i</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布, 此处如果报错403，重名错误。修改package.json name 属性。应为全网name不能重复。提交时可以增加 忽略文件 .gitignore</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>结语： 插件写的很拉，主要是体验一把过程</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器。首先去找适合写插件的项目包管理工具。对比了webpack,rollup,gulp,parcel&lt;/p&gt;
&lt;p&gt;经过一通对比就选中了 &lt;strong&gt;rollup&lt;/strong&gt;，具体请自行了解。简单说一下我们熟知的&lt;strong&gt;vue&lt;/strong&gt;,&lt;strong&gt;react&lt;/strong&gt;,&lt;strong&gt;taro-ui&lt;/strong&gt; 等 就是使用的 rolluojs 打包的&lt;/p&gt;
&lt;p&gt;自己写了一个很简单的插件上传发布到npm。具体步骤如下：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="js" scheme="https://wyf195075595.github.io/categories/js/"/>
    
    
    <category term="npm" scheme="https://wyf195075595.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>打包工具对比</title>
    <link href="https://wyf195075595.github.io/2023/03/21/programming/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/%E6%8B%93%E5%B1%95/"/>
    <id>https://wyf195075595.github.io/2023/03/21/programming/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/%E6%8B%93%E5%B1%95/</id>
    <published>2023-03-21T08:10:10.000Z</published>
    <updated>2023-03-26T06:13:06.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack、gulp、rollup-使用对比和适用场景"><a href="#webpack、gulp、rollup-使用对比和适用场景" class="headerlink" title="webpack、gulp、rollup 使用对比和适用场景"></a><a href="https://my.oschina.net/nieyao/blog/5506339">webpack、gulp、rollup 使用对比和适用场景</a></h3><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><blockquote><p>打包工具，根据我们的资源依赖树，分不同类型打包成静态资源，支持热更新，代码模块切分，three-shaking、异步加载等、</p></blockquote><p><strong>特性：</strong></p><blockquote><p>不同资源的模块打包 热更新 代码分割 静态资源压缩 异步加载 three-shaking</p></blockquote><p><strong>适用场景</strong></p><blockquote><p>应用程序打包</p></blockquote><h4 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a><a href="https://www.oschina.net/action/GoToLink?url=https://www.rollupjs.com/guide/faqs">rollup</a></h4><blockquote><p>Rollup 是一个<strong>模块</strong>打包工具，可以将我们按照 ESM (ES2015 Module) 规范编写的源码构建输出如下格式:</p></blockquote><ul><li>IIFE: 自执行函数，可通过 &lt;script&gt; 标签加载</li><li>AMD: 通过 RequireJS 加载</li><li>CommonJS: Node 默认的模块规范，可通过 Webpack 加载</li><li>UMD: 兼容 IIFE, AMD, CJS 三种模块规范</li><li>ESM: ES2015 Module 规范，可用 Webpack, Rollup 加载 -</li></ul><p><strong>特性：</strong></p><blockquote><p>支持动态导入。</p><p>支持 tree shaking。仅加载模块里用得到的函数以减小文件大小。</p><p>Scope Hoisting。 rollup 可以将所有小文件生成到一个大文件中，所有代码都在同一个函数作用域里:， 不会像 Webpack 那样用很多函数来包装模块。</p><p>没有其他冗余代码，执行很快。除了必要的 cjs, umd 头外，bundle 代码基本和源码差不多，也没有奇怪的 <strong>webpack_require</strong>, Object.defineProperty 之类的东西，</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>不支持热更新功能；对于 commonjs 模块，需要额外的插件将其转化为 es2015 供 rollup 处理；无法进行公共代码拆分。 运行时态的动态导入 dynamic imports at runtime.</p><p>rollup 通过插件来编译处理各类静态资源：</p></blockquote><ul><li>rollup-plugin-typescript2</li><li>rollup-plugin-babel</li><li>rollup-plugin-uglify</li><li>rollup-plugin-commonjs</li><li>rollup-plugin-postcss</li><li>rollup-plugin-img</li><li>rollup-plugin-json</li></ul><p><strong>适用场景：</strong></p><blockquote><p>由纯 js 开发的第三方库； 需要生成单一的 umd 文件的场景</p></blockquote><h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a><a href="https://www.oschina.net/action/GoToLink?url=https://www.gulpjs.com.cn/docs/getting-started/quick-start/">gulp</a></h4><blockquote><p>自动化构建工具，把项目工作抽象成自动化任务 用 gulp 构建自动化工作流，处理项目中的资源，基于流式操作。</p></blockquote><p><strong>特性</strong> </p><blockquote><p>gulp 文档简单，学习成本低，使用简单；对大量源文件可以进行流式处理，借助插件，可以对文件类型进行多种操作处理。</p></blockquote><p><strong>适用场景</strong> </p><blockquote><p>静态资源密集操作型场景，主要用于 css、图片等静态资源的处理操作。 文件处理：</p></blockquote><p>gulp 通过各种中间件处理静态资源的编译：</p><ul><li>gulp-load-plugins：自动加载 package.json 中的 gulp 插件</li><li>gulp-rename： 重命名</li><li>gulp-uglify：文件压缩</li><li>gulp-concat：文件合并</li><li>gulp-less：编译 less</li><li>gulp-sass：编译 sass</li><li>gulp-clean-css：压缩 CSS 文件</li><li>gulp-htmlmin：压缩 HTML 文件</li><li>gulp-babel: 使用 babel 编译 JS 文件</li><li>gulp-jshint：jshint 检查</li><li>gulp-imagemin：压缩 jpg、png、gif 等图片</li><li>gulp-livereload：当代码变化时，它可以帮我们自动刷新页面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;webpack、gulp、rollup-使用对比和适用场景&quot;&gt;&lt;a href=&quot;#webpack、gulp、rollup-使用对比和适用场景&quot; class=&quot;headerlink&quot; title=&quot;webpack、gulp、rollup 使用对比和适用场景&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="webpack" scheme="https://wyf195075595.github.io/categories/webpack/"/>
    
    
    <category term="eslint" scheme="https://wyf195075595.github.io/tags/eslint/"/>
    
  </entry>
  
</feed>
